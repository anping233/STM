/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\study\STM32\practice\gpio\prj\f411_proj_Sequences_0008.log
 *  Created     : 07:36:24 (08/06/2023)
 *  Device      : STM32F411CEUx
 *  PDSC File   : C:/Users/anping/AppData/Local/Arm/Packs/Keil/STM32F4xx_DFP/2.17.0/Keil.STM32F4xx_DFP.pdsc
 *  Config File : D:\study\STM32\practice\gpio\prj\DebugConfig\Target_1_STM32F411CEUx.dbgconf
 *
 */

[07:36:24.169]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[07:36:24.169]  
[07:36:24.170]  <debugvars>
[07:36:24.170]    // Pre-defined
[07:36:24.171]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[07:36:24.172]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[07:36:24.173]    __dp=0x00000000
[07:36:24.173]    __ap=0x00000000
[07:36:24.174]    __traceout=0x00000001      (SWO Trace)
[07:36:24.174]    __errorcontrol=0x00000000  (Skip Errors="False")
[07:36:24.174]    __FlashAddr=0x00000000
[07:36:24.174]    __FlashLen=0x00000000
[07:36:24.175]    __FlashArg=0x00000000
[07:36:24.175]    __FlashOp=0x00000000
[07:36:24.175]    __Result=0x00000000
[07:36:24.176]    
[07:36:24.176]    // User-defined
[07:36:24.176]    DbgMCU_CR=0x00000007
[07:36:24.177]    DbgMCU_APB1_Fz=0x00000000
[07:36:24.177]    DbgMCU_APB2_Fz=0x00000000
[07:36:24.177]    TraceClk_Pin=0x00040002
[07:36:24.178]    TraceD0_Pin=0x00040003
[07:36:24.178]    TraceD1_Pin=0x00040004
[07:36:24.178]    TraceD2_Pin=0x00040005
[07:36:24.178]    TraceD3_Pin=0x00040006
[07:36:24.179]  </debugvars>
[07:36:24.179]  
[07:36:24.179]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[07:36:24.180]    <block atomic="false" info="">
[07:36:24.180]      Sequence("CheckID");
[07:36:24.180]        <sequence name="CheckID" Pname="" disable="false" info="">
[07:36:24.181]          <block atomic="false" info="">
[07:36:24.181]            __var pidr1 = 0;
[07:36:24.181]              // -> [pidr1 <= 0x00000000]
[07:36:24.182]            __var pidr2 = 0;
[07:36:24.182]              // -> [pidr2 <= 0x00000000]
[07:36:24.182]            __var jep106id = 0;
[07:36:24.182]              // -> [jep106id <= 0x00000000]
[07:36:24.183]            __var ROMTableBase = 0;
[07:36:24.183]              // -> [ROMTableBase <= 0x00000000]
[07:36:24.183]            __ap = 0;      // AHB-AP
[07:36:24.183]              // -> [__ap <= 0x00000000]
[07:36:24.184]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[07:36:24.184]              // -> [ReadAP(0x000000F8) => 0xE00FF003]   (__dp=0x00000000, __ap=0x00000000)
[07:36:24.185]              // -> [ROMTableBase <= 0xE00FF000]
[07:36:24.185]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[07:36:24.187]              // -> [Read32(0xE00FFFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[07:36:24.187]              // -> [pidr1 <= 0x00000004]
[07:36:24.188]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[07:36:24.189]              // -> [Read32(0xE00FFFE8) => 0x0000000A]   (__dp=0x00000000, __ap=0x00000000)
[07:36:24.189]              // -> [pidr2 <= 0x0000000A]
[07:36:24.189]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[07:36:24.189]              // -> [jep106id <= 0x00000020]
[07:36:24.190]          </block>
[07:36:24.190]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[07:36:24.190]            // if-block "jep106id != 0x20"
[07:36:24.191]              // =>  FALSE
[07:36:24.191]            // skip if-block "jep106id != 0x20"
[07:36:24.191]          </control>
[07:36:24.191]        </sequence>
[07:36:24.191]    </block>
[07:36:24.192]  </sequence>
[07:36:24.192]  
[07:36:24.192]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[07:36:24.192]  
[07:36:24.192]  <debugvars>
[07:36:24.193]    // Pre-defined
[07:36:24.193]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[07:36:24.193]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[07:36:24.194]    __dp=0x00000000
[07:36:24.194]    __ap=0x00000000
[07:36:24.194]    __traceout=0x00000001      (SWO Trace)
[07:36:24.195]    __errorcontrol=0x00000000  (Skip Errors="False")
[07:36:24.195]    __FlashAddr=0x00000000
[07:36:24.196]    __FlashLen=0x00000000
[07:36:24.196]    __FlashArg=0x00000000
[07:36:24.196]    __FlashOp=0x00000000
[07:36:24.197]    __Result=0x00000000
[07:36:24.197]    
[07:36:24.197]    // User-defined
[07:36:24.198]    DbgMCU_CR=0x00000007
[07:36:24.198]    DbgMCU_APB1_Fz=0x00000000
[07:36:24.198]    DbgMCU_APB2_Fz=0x00000000
[07:36:24.198]    TraceClk_Pin=0x00040002
[07:36:24.199]    TraceD0_Pin=0x00040003
[07:36:24.199]    TraceD1_Pin=0x00040004
[07:36:24.199]    TraceD2_Pin=0x00040005
[07:36:24.199]    TraceD3_Pin=0x00040006
[07:36:24.200]  </debugvars>
[07:36:24.200]  
[07:36:24.201]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[07:36:24.201]    <block atomic="false" info="">
[07:36:24.201]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[07:36:24.203]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:24.203]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[07:36:24.204]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:24.205]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[07:36:24.206]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:24.206]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[07:36:24.208]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:24.208]    </block>
[07:36:24.208]  </sequence>
[07:36:24.209]  
[07:36:25.928]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[07:36:25.928]  
[07:36:25.929]  <debugvars>
[07:36:25.929]    // Pre-defined
[07:36:25.929]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[07:36:25.929]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[07:36:25.929]    __dp=0x00000000
[07:36:25.929]    __ap=0x00000000
[07:36:25.929]    __traceout=0x00000001      (SWO Trace)
[07:36:25.929]    __errorcontrol=0x00000000  (Skip Errors="False")
[07:36:25.930]    __FlashAddr=0x00000000
[07:36:25.930]    __FlashLen=0x00000000
[07:36:25.930]    __FlashArg=0x00000000
[07:36:25.930]    __FlashOp=0x00000000
[07:36:25.930]    __Result=0x00000000
[07:36:25.930]    
[07:36:25.930]    // User-defined
[07:36:25.930]    DbgMCU_CR=0x00000007
[07:36:25.930]    DbgMCU_APB1_Fz=0x00000000
[07:36:25.930]    DbgMCU_APB2_Fz=0x00000000
[07:36:25.931]    TraceClk_Pin=0x00040002
[07:36:25.931]    TraceD0_Pin=0x00040003
[07:36:25.931]    TraceD1_Pin=0x00040004
[07:36:25.931]    TraceD2_Pin=0x00040005
[07:36:25.931]    TraceD3_Pin=0x00040006
[07:36:25.931]  </debugvars>
[07:36:25.931]  
[07:36:25.931]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[07:36:25.931]    <block atomic="false" info="">
[07:36:25.932]      Sequence("CheckID");
[07:36:25.932]        <sequence name="CheckID" Pname="" disable="false" info="">
[07:36:25.932]          <block atomic="false" info="">
[07:36:25.932]            __var pidr1 = 0;
[07:36:25.932]              // -> [pidr1 <= 0x00000000]
[07:36:25.932]            __var pidr2 = 0;
[07:36:25.932]              // -> [pidr2 <= 0x00000000]
[07:36:25.932]            __var jep106id = 0;
[07:36:25.932]              // -> [jep106id <= 0x00000000]
[07:36:25.933]            __var ROMTableBase = 0;
[07:36:25.933]              // -> [ROMTableBase <= 0x00000000]
[07:36:25.933]            __ap = 0;      // AHB-AP
[07:36:25.933]              // -> [__ap <= 0x00000000]
[07:36:25.933]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[07:36:25.933]              // -> [ReadAP(0x000000F8) => 0xE00FF003]   (__dp=0x00000000, __ap=0x00000000)
[07:36:25.934]              // -> [ROMTableBase <= 0xE00FF000]
[07:36:25.934]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[07:36:25.934]              // -> [Read32(0xE00FFFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[07:36:25.935]              // -> [pidr1 <= 0x00000004]
[07:36:25.935]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[07:36:25.935]              // -> [Read32(0xE00FFFE8) => 0x0000000A]   (__dp=0x00000000, __ap=0x00000000)
[07:36:25.935]              // -> [pidr2 <= 0x0000000A]
[07:36:25.935]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[07:36:25.936]              // -> [jep106id <= 0x00000020]
[07:36:25.936]          </block>
[07:36:25.936]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[07:36:25.936]            // if-block "jep106id != 0x20"
[07:36:25.936]              // =>  FALSE
[07:36:25.936]            // skip if-block "jep106id != 0x20"
[07:36:25.936]          </control>
[07:36:25.936]        </sequence>
[07:36:25.936]    </block>
[07:36:25.937]  </sequence>
[07:36:25.937]  
[07:36:25.937]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[07:36:25.937]  
[07:36:25.937]  <debugvars>
[07:36:25.937]    // Pre-defined
[07:36:25.938]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[07:36:25.938]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[07:36:25.938]    __dp=0x00000000
[07:36:25.938]    __ap=0x00000000
[07:36:25.938]    __traceout=0x00000001      (SWO Trace)
[07:36:25.938]    __errorcontrol=0x00000000  (Skip Errors="False")
[07:36:25.938]    __FlashAddr=0x00000000
[07:36:25.938]    __FlashLen=0x00000000
[07:36:25.938]    __FlashArg=0x00000000
[07:36:25.938]    __FlashOp=0x00000000
[07:36:25.939]    __Result=0x00000000
[07:36:25.939]    
[07:36:25.939]    // User-defined
[07:36:25.939]    DbgMCU_CR=0x00000007
[07:36:25.939]    DbgMCU_APB1_Fz=0x00000000
[07:36:25.939]    DbgMCU_APB2_Fz=0x00000000
[07:36:25.939]    TraceClk_Pin=0x00040002
[07:36:25.939]    TraceD0_Pin=0x00040003
[07:36:25.939]    TraceD1_Pin=0x00040004
[07:36:25.939]    TraceD2_Pin=0x00040005
[07:36:25.939]    TraceD3_Pin=0x00040006
[07:36:25.940]  </debugvars>
[07:36:25.940]  
[07:36:25.940]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[07:36:25.940]    <block atomic="false" info="">
[07:36:25.940]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[07:36:25.940]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:25.941]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[07:36:25.941]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:25.941]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[07:36:25.942]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:25.942]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[07:36:25.942]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:25.943]    </block>
[07:36:25.943]  </sequence>
[07:36:25.943]  
[07:36:25.963]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[07:36:25.963]  
[07:36:25.963]  <debugvars>
[07:36:25.963]    // Pre-defined
[07:36:25.963]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[07:36:25.964]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[07:36:25.964]    __dp=0x00000000
[07:36:25.964]    __ap=0x00000000
[07:36:25.964]    __traceout=0x00000001      (SWO Trace)
[07:36:25.964]    __errorcontrol=0x00000000  (Skip Errors="False")
[07:36:25.964]    __FlashAddr=0x00000000
[07:36:25.964]    __FlashLen=0x00000000
[07:36:25.964]    __FlashArg=0x00000000
[07:36:25.964]    __FlashOp=0x00000000
[07:36:25.965]    __Result=0x00000000
[07:36:25.965]    
[07:36:25.965]    // User-defined
[07:36:25.965]    DbgMCU_CR=0x00000007
[07:36:25.965]    DbgMCU_APB1_Fz=0x00000000
[07:36:25.965]    DbgMCU_APB2_Fz=0x00000000
[07:36:25.965]    TraceClk_Pin=0x00040002
[07:36:25.965]    TraceD0_Pin=0x00040003
[07:36:25.965]    TraceD1_Pin=0x00040004
[07:36:25.965]    TraceD2_Pin=0x00040005
[07:36:25.966]    TraceD3_Pin=0x00040006
[07:36:25.966]  </debugvars>
[07:36:25.966]  
[07:36:25.966]  <sequence name="TraceStart" Pname="" disable="false" info="">
[07:36:25.966]    <block atomic="false" info="">
[07:36:25.966]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[07:36:25.966]        // -> [traceSWO <= 0x00000001]
[07:36:25.966]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[07:36:25.966]        // -> [traceTPIU <= 0x00000000]
[07:36:25.967]    </block>
[07:36:25.967]    <control if="traceSWO" while="" timeout="0" info="">
[07:36:25.967]      // if-block "traceSWO"
[07:36:25.967]        // =>  TRUE
[07:36:25.967]      <block atomic="false" info="">
[07:36:25.967]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[07:36:25.967]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[07:36:25.967]            <block atomic="false" info="">
[07:36:25.967]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[07:36:25.967]                // -> [dbgmcu_val <= 0x00000000]
[07:36:25.968]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[07:36:25.968]                // -> [dbgmcu_trace_val <= 0x00000000]
[07:36:25.968]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[07:36:25.969]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[07:36:25.969]                // -> [dbgmcu_val <= 0x00000007]
[07:36:25.969]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[07:36:25.969]                // -> [dbgmcu_trace_val <= 0x00000020]
[07:36:25.969]              Sequence("ConfigureTraceSWOPin");
[07:36:25.969]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[07:36:25.969]                  <block atomic="false" info="">
[07:36:25.969]                    __var pin     = 0;
[07:36:25.969]                      // -> [pin <= 0x00000000]
[07:36:25.969]                    __var port    = 0;
[07:36:25.970]                      // -> [port <= 0x00000000]
[07:36:25.970]                    __var portAdr = 0;
[07:36:25.970]                      // -> [portAdr <= 0x00000000]
[07:36:25.970]                    __var pos     = 0;
[07:36:25.970]                      // -> [pos <= 0x00000000]
[07:36:25.970]                    __var SWO_Pin = 0x00010003;          // PB3
[07:36:25.970]                      // -> [SWO_Pin <= 0x00010003]
[07:36:25.970]                  </block>
[07:36:25.970]                  <block atomic="false" info="configure SWO">
[07:36:25.971]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[07:36:25.971]                      // -> [pin <= 0x00000003]
[07:36:25.971]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[07:36:25.971]                      // -> [port <= 0x00000001]
[07:36:25.971]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[07:36:25.971]                      // -> [portAdr <= 0x40020400]
[07:36:25.971]                    pos = pin * 2;
[07:36:25.971]                      // -> [pos <= 0x00000006]
[07:36:25.971]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[07:36:25.972]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[07:36:25.973]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:25.973]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[07:36:25.973]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[07:36:25.974]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:25.974]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[07:36:25.974]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[07:36:25.975]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:25.975]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[07:36:25.976]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[07:36:25.976]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:25.977]                  </block>
[07:36:25.977]                  <control if="pin <  8" while="" timeout="0" info="">
[07:36:25.977]                    // if-block "pin <  8"
[07:36:25.977]                      // =>  TRUE
[07:36:25.977]                    <block atomic="false" info="">
[07:36:25.977]                      pos = ((pin    ) & 7) * 4;
[07:36:25.977]                        // -> [pos <= 0x0000000C]
[07:36:25.978]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[07:36:25.978]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[07:36:25.979]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:25.980]                    </block>
[07:36:25.980]                    // end if-block "pin <  8"
[07:36:25.980]                  </control>
[07:36:25.980]                  <control if="pin >= 8" while="" timeout="0" info="">
[07:36:25.980]                    // if-block "pin >= 8"
[07:36:25.980]                      // =>  FALSE
[07:36:25.980]                    // skip if-block "pin >= 8"
[07:36:25.980]                  </control>
[07:36:25.981]                </sequence>
[07:36:25.981]            </block>
[07:36:25.981]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[07:36:25.981]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[07:36:25.982]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:25.982]            </block>
[07:36:25.982]          </sequence>
[07:36:25.982]      </block>
[07:36:25.982]      // end if-block "traceSWO"
[07:36:25.982]    </control>
[07:36:25.983]    <control if="traceTPIU" while="" timeout="0" info="">
[07:36:25.983]      // if-block "traceTPIU"
[07:36:25.983]        // =>  FALSE
[07:36:25.983]      // skip if-block "traceTPIU"
[07:36:25.983]    </control>
[07:36:25.983]  </sequence>
[07:36:25.983]  
[07:36:25.993]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[07:36:25.993]  
[07:36:25.994]  <debugvars>
[07:36:25.994]    // Pre-defined
[07:36:25.994]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[07:36:25.994]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[07:36:25.994]    __dp=0x00000000
[07:36:25.994]    __ap=0x00000000
[07:36:25.995]    __traceout=0x00000001      (SWO Trace)
[07:36:25.995]    __errorcontrol=0x00000000  (Skip Errors="False")
[07:36:25.995]    __FlashAddr=0x00000000
[07:36:25.995]    __FlashLen=0x00000000
[07:36:25.995]    __FlashArg=0x00000000
[07:36:25.995]    __FlashOp=0x00000000
[07:36:25.995]    __Result=0x00000000
[07:36:25.995]    
[07:36:25.995]    // User-defined
[07:36:25.996]    DbgMCU_CR=0x00000007
[07:36:25.996]    DbgMCU_APB1_Fz=0x00000000
[07:36:25.996]    DbgMCU_APB2_Fz=0x00000000
[07:36:25.996]    TraceClk_Pin=0x00040002
[07:36:25.996]    TraceD0_Pin=0x00040003
[07:36:25.996]    TraceD1_Pin=0x00040004
[07:36:25.996]    TraceD2_Pin=0x00040005
[07:36:25.996]    TraceD3_Pin=0x00040006
[07:36:25.997]  </debugvars>
[07:36:25.997]  
[07:36:25.997]  <sequence name="TraceStart" Pname="" disable="false" info="">
[07:36:25.997]    <block atomic="false" info="">
[07:36:25.997]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[07:36:25.997]        // -> [traceSWO <= 0x00000001]
[07:36:25.997]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[07:36:25.998]        // -> [traceTPIU <= 0x00000000]
[07:36:25.998]    </block>
[07:36:25.998]    <control if="traceSWO" while="" timeout="0" info="">
[07:36:25.998]      // if-block "traceSWO"
[07:36:25.998]        // =>  TRUE
[07:36:25.998]      <block atomic="false" info="">
[07:36:25.998]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[07:36:25.998]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[07:36:25.999]            <block atomic="false" info="">
[07:36:25.999]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[07:36:25.999]                // -> [dbgmcu_val <= 0x00000000]
[07:36:25.999]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[07:36:25.999]                // -> [dbgmcu_trace_val <= 0x00000000]
[07:36:25.999]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[07:36:26.000]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.000]                // -> [dbgmcu_val <= 0x00000007]
[07:36:26.000]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[07:36:26.000]                // -> [dbgmcu_trace_val <= 0x00000020]
[07:36:26.001]              Sequence("ConfigureTraceSWOPin");
[07:36:26.001]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[07:36:26.001]                  <block atomic="false" info="">
[07:36:26.001]                    __var pin     = 0;
[07:36:26.001]                      // -> [pin <= 0x00000000]
[07:36:26.001]                    __var port    = 0;
[07:36:26.001]                      // -> [port <= 0x00000000]
[07:36:26.002]                    __var portAdr = 0;
[07:36:26.002]                      // -> [portAdr <= 0x00000000]
[07:36:26.002]                    __var pos     = 0;
[07:36:26.002]                      // -> [pos <= 0x00000000]
[07:36:26.002]                    __var SWO_Pin = 0x00010003;          // PB3
[07:36:26.002]                      // -> [SWO_Pin <= 0x00010003]
[07:36:26.002]                  </block>
[07:36:26.003]                  <block atomic="false" info="configure SWO">
[07:36:26.003]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[07:36:26.003]                      // -> [pin <= 0x00000003]
[07:36:26.003]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[07:36:26.003]                      // -> [port <= 0x00000001]
[07:36:26.003]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[07:36:26.004]                      // -> [portAdr <= 0x40020400]
[07:36:26.004]                    pos = pin * 2;
[07:36:26.004]                      // -> [pos <= 0x00000006]
[07:36:26.004]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[07:36:26.005]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.006]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.006]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[07:36:26.007]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.008]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.008]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[07:36:26.009]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.009]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.009]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[07:36:26.010]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.010]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.011]                  </block>
[07:36:26.011]                  <control if="pin <  8" while="" timeout="0" info="">
[07:36:26.011]                    // if-block "pin <  8"
[07:36:26.011]                      // =>  TRUE
[07:36:26.011]                    <block atomic="false" info="">
[07:36:26.011]                      pos = ((pin    ) & 7) * 4;
[07:36:26.011]                        // -> [pos <= 0x0000000C]
[07:36:26.012]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[07:36:26.012]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.013]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.013]                    </block>
[07:36:26.013]                    // end if-block "pin <  8"
[07:36:26.013]                  </control>
[07:36:26.013]                  <control if="pin >= 8" while="" timeout="0" info="">
[07:36:26.013]                    // if-block "pin >= 8"
[07:36:26.013]                      // =>  FALSE
[07:36:26.013]                    // skip if-block "pin >= 8"
[07:36:26.014]                  </control>
[07:36:26.014]                </sequence>
[07:36:26.014]            </block>
[07:36:26.014]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[07:36:26.014]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[07:36:26.015]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.015]            </block>
[07:36:26.015]          </sequence>
[07:36:26.015]      </block>
[07:36:26.015]      // end if-block "traceSWO"
[07:36:26.015]    </control>
[07:36:26.015]    <control if="traceTPIU" while="" timeout="0" info="">
[07:36:26.015]      // if-block "traceTPIU"
[07:36:26.016]        // =>  FALSE
[07:36:26.016]      // skip if-block "traceTPIU"
[07:36:26.016]    </control>
[07:36:26.016]  </sequence>
[07:36:26.016]  
[07:36:26.621]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[07:36:26.621]  
[07:36:26.668]  <debugvars>
[07:36:26.668]    // Pre-defined
[07:36:26.668]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[07:36:26.669]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[07:36:26.669]    __dp=0x00000000
[07:36:26.669]    __ap=0x00000000
[07:36:26.669]    __traceout=0x00000001      (SWO Trace)
[07:36:26.670]    __errorcontrol=0x00000000  (Skip Errors="False")
[07:36:26.670]    __FlashAddr=0x00000000
[07:36:26.670]    __FlashLen=0x00000000
[07:36:26.671]    __FlashArg=0x00000000
[07:36:26.671]    __FlashOp=0x00000000
[07:36:26.671]    __Result=0x00000000
[07:36:26.671]    
[07:36:26.671]    // User-defined
[07:36:26.671]    DbgMCU_CR=0x00000007
[07:36:26.671]    DbgMCU_APB1_Fz=0x00000000
[07:36:26.672]    DbgMCU_APB2_Fz=0x00000000
[07:36:26.672]    TraceClk_Pin=0x00040002
[07:36:26.672]    TraceD0_Pin=0x00040003
[07:36:26.672]    TraceD1_Pin=0x00040004
[07:36:26.672]    TraceD2_Pin=0x00040005
[07:36:26.672]    TraceD3_Pin=0x00040006
[07:36:26.672]  </debugvars>
[07:36:26.672]  
[07:36:26.672]  <sequence name="TraceStart" Pname="" disable="false" info="">
[07:36:26.672]    <block atomic="false" info="">
[07:36:26.673]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[07:36:26.673]        // -> [traceSWO <= 0x00000001]
[07:36:26.673]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[07:36:26.673]        // -> [traceTPIU <= 0x00000000]
[07:36:26.673]    </block>
[07:36:26.673]    <control if="traceSWO" while="" timeout="0" info="">
[07:36:26.674]      // if-block "traceSWO"
[07:36:26.674]        // =>  TRUE
[07:36:26.674]      <block atomic="false" info="">
[07:36:26.674]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[07:36:26.674]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[07:36:26.674]            <block atomic="false" info="">
[07:36:26.674]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[07:36:26.675]                // -> [dbgmcu_val <= 0x00000000]
[07:36:26.675]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[07:36:26.675]                // -> [dbgmcu_trace_val <= 0x00000000]
[07:36:26.675]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[07:36:26.676]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.676]                // -> [dbgmcu_val <= 0x00000007]
[07:36:26.677]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[07:36:26.677]                // -> [dbgmcu_trace_val <= 0x00000020]
[07:36:26.677]              Sequence("ConfigureTraceSWOPin");
[07:36:26.678]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[07:36:26.678]                  <block atomic="false" info="">
[07:36:26.678]                    __var pin     = 0;
[07:36:26.678]                      // -> [pin <= 0x00000000]
[07:36:26.678]                    __var port    = 0;
[07:36:26.678]                      // -> [port <= 0x00000000]
[07:36:26.679]                    __var portAdr = 0;
[07:36:26.679]                      // -> [portAdr <= 0x00000000]
[07:36:26.679]                    __var pos     = 0;
[07:36:26.679]                      // -> [pos <= 0x00000000]
[07:36:26.679]                    __var SWO_Pin = 0x00010003;          // PB3
[07:36:26.679]                      // -> [SWO_Pin <= 0x00010003]
[07:36:26.679]                  </block>
[07:36:26.679]                  <block atomic="false" info="configure SWO">
[07:36:26.679]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[07:36:26.679]                      // -> [pin <= 0x00000003]
[07:36:26.680]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[07:36:26.680]                      // -> [port <= 0x00000001]
[07:36:26.681]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[07:36:26.681]                      // -> [portAdr <= 0x40020400]
[07:36:26.681]                    pos = pin * 2;
[07:36:26.681]                      // -> [pos <= 0x00000006]
[07:36:26.681]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[07:36:26.682]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.683]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.683]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[07:36:26.684]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.684]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.685]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[07:36:26.686]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.687]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.687]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[07:36:26.688]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.689]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.689]                  </block>
[07:36:26.689]                  <control if="pin <  8" while="" timeout="0" info="">
[07:36:26.689]                    // if-block "pin <  8"
[07:36:26.689]                      // =>  TRUE
[07:36:26.690]                    <block atomic="false" info="">
[07:36:26.690]                      pos = ((pin    ) & 7) * 4;
[07:36:26.691]                        // -> [pos <= 0x0000000C]
[07:36:26.691]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[07:36:26.692]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.692]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.693]                    </block>
[07:36:26.693]                    // end if-block "pin <  8"
[07:36:26.693]                  </control>
[07:36:26.693]                  <control if="pin >= 8" while="" timeout="0" info="">
[07:36:26.693]                    // if-block "pin >= 8"
[07:36:26.693]                      // =>  FALSE
[07:36:26.694]                    // skip if-block "pin >= 8"
[07:36:26.694]                  </control>
[07:36:26.694]                </sequence>
[07:36:26.694]            </block>
[07:36:26.694]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[07:36:26.694]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[07:36:26.695]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[07:36:26.695]            </block>
[07:36:26.695]          </sequence>
[07:36:26.695]      </block>
[07:36:26.696]      // end if-block "traceSWO"
[07:36:26.696]    </control>
[07:36:26.696]    <control if="traceTPIU" while="" timeout="0" info="">
[07:36:26.696]      // if-block "traceTPIU"
[07:36:26.696]        // =>  FALSE
[07:36:26.697]      // skip if-block "traceTPIU"
[07:36:26.697]    </control>
[07:36:26.697]  </sequence>
[07:36:26.698]  
[08:04:46.193]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[08:04:46.193]  
[08:04:46.241]  <debugvars>
[08:04:46.241]    // Pre-defined
[08:04:46.241]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[08:04:46.241]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[08:04:46.241]    __dp=0x00000000
[08:04:46.241]    __ap=0x00000000
[08:04:46.242]    __traceout=0x00000001      (SWO Trace)
[08:04:46.242]    __errorcontrol=0x00000000  (Skip Errors="False")
[08:04:46.243]    __FlashAddr=0x00000000
[08:04:46.243]    __FlashLen=0x00000000
[08:04:46.243]    __FlashArg=0x00000000
[08:04:46.244]    __FlashOp=0x00000000
[08:04:46.244]    __Result=0x00000000
[08:04:46.244]    
[08:04:46.244]    // User-defined
[08:04:46.244]    DbgMCU_CR=0x00000007
[08:04:46.245]    DbgMCU_APB1_Fz=0x00000000
[08:04:46.245]    DbgMCU_APB2_Fz=0x00000000
[08:04:46.245]    TraceClk_Pin=0x00040002
[08:04:46.245]    TraceD0_Pin=0x00040003
[08:04:46.246]    TraceD1_Pin=0x00040004
[08:04:46.246]    TraceD2_Pin=0x00040005
[08:04:46.246]    TraceD3_Pin=0x00040006
[08:04:46.246]  </debugvars>
[08:04:46.246]  
[08:04:46.247]  <sequence name="TraceStop" Pname="" disable="false" info="">
[08:04:46.248]    <block atomic="false" info="">
[08:04:46.248]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[08:04:46.248]        // -> [traceSWO <= 0x00000001]
[08:04:46.248]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[08:04:46.249]        // -> [traceTPIU <= 0x00000000]
[08:04:46.249]    </block>
[08:04:46.249]    <control if="traceSWO" while="" timeout="0" info="">
[08:04:46.249]      // if-block "traceSWO"
[08:04:46.250]        // =>  TRUE
[08:04:46.250]      <block atomic="false" info="">
[08:04:46.250]        Sequence("DisableTraceSWO");
[08:04:46.250]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[08:04:46.251]            <block atomic="false" info="">
[08:04:46.251]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[08:04:46.252]                // -> [dbgmcu_val <= 0x00000000]
[08:04:46.253]            </block>
[08:04:46.253]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[08:04:46.253]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[08:04:46.254]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[08:04:46.254]                // -> [dbgmcu_val <= 0x00000007]
[08:04:46.255]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[08:04:46.257]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[08:04:46.257]            </block>
[08:04:46.257]          </sequence>
[08:04:46.257]      </block>
[08:04:46.258]      // end if-block "traceSWO"
[08:04:46.258]    </control>
[08:04:46.258]    <control if="traceTPIU" while="" timeout="0" info="">
[08:04:46.258]      // if-block "traceTPIU"
[08:04:46.258]        // =>  FALSE
[08:04:46.259]      // skip if-block "traceTPIU"
[08:04:46.259]    </control>
[08:04:46.259]  </sequence>
[08:04:46.259]  
[08:10:08.351]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[08:10:08.351]  
[08:10:08.352]  <debugvars>
[08:10:08.352]    // Pre-defined
[08:10:08.353]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[08:10:08.353]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[08:10:08.353]    __dp=0x00000000
[08:10:08.353]    __ap=0x00000000
[08:10:08.354]    __traceout=0x00000001      (SWO Trace)
[08:10:08.354]    __errorcontrol=0x00000000  (Skip Errors="False")
[08:10:08.354]    __FlashAddr=0x00000000
[08:10:08.354]    __FlashLen=0x00000000
[08:10:08.354]    __FlashArg=0x00000000
[08:10:08.354]    __FlashOp=0x00000000
[08:10:08.355]    __Result=0x00000000
[08:10:08.355]    
[08:10:08.355]    // User-defined
[08:10:08.355]    DbgMCU_CR=0x00000007
[08:10:08.355]    DbgMCU_APB1_Fz=0x00000000
[08:10:08.355]    DbgMCU_APB2_Fz=0x00000000
[08:10:08.355]    TraceClk_Pin=0x00040002
[08:10:08.355]    TraceD0_Pin=0x00040003
[08:10:08.355]    TraceD1_Pin=0x00040004
[08:10:08.356]    TraceD2_Pin=0x00040005
[08:10:08.357]    TraceD3_Pin=0x00040006
[08:10:08.357]  </debugvars>
[08:10:08.357]  
[08:10:08.357]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[08:10:08.357]    <block atomic="false" info="">
[08:10:08.357]      Sequence("CheckID");
[08:10:08.357]        <sequence name="CheckID" Pname="" disable="false" info="">
[08:10:08.358]          <block atomic="false" info="">
[08:10:08.358]            __var pidr1 = 0;
[08:10:08.358]              // -> [pidr1 <= 0x00000000]
[08:10:08.358]            __var pidr2 = 0;
[08:10:08.358]              // -> [pidr2 <= 0x00000000]
[08:10:08.358]            __var jep106id = 0;
[08:10:08.358]              // -> [jep106id <= 0x00000000]
[08:10:08.359]            __var ROMTableBase = 0;
[08:10:08.359]              // -> [ROMTableBase <= 0x00000000]
[08:10:08.359]            __ap = 0;      // AHB-AP
[08:10:08.359]              // -> [__ap <= 0x00000000]
[08:10:08.359]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[08:10:08.360]              // -> [ReadAP(0x000000F8) => 0xE00FF003]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.360]              // -> [ROMTableBase <= 0xE00FF000]
[08:10:08.360]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[08:10:08.361]              // -> [Read32(0xE00FFFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.361]              // -> [pidr1 <= 0x00000004]
[08:10:08.361]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[08:10:08.363]              // -> [Read32(0xE00FFFE8) => 0x0000000A]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.363]              // -> [pidr2 <= 0x0000000A]
[08:10:08.364]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[08:10:08.364]              // -> [jep106id <= 0x00000020]
[08:10:08.364]          </block>
[08:10:08.364]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[08:10:08.364]            // if-block "jep106id != 0x20"
[08:10:08.365]              // =>  FALSE
[08:10:08.365]            // skip if-block "jep106id != 0x20"
[08:10:08.365]          </control>
[08:10:08.365]        </sequence>
[08:10:08.365]    </block>
[08:10:08.366]  </sequence>
[08:10:08.366]  
[08:10:08.366]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[08:10:08.366]  
[08:10:08.366]  <debugvars>
[08:10:08.367]    // Pre-defined
[08:10:08.367]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[08:10:08.367]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[08:10:08.367]    __dp=0x00000000
[08:10:08.367]    __ap=0x00000000
[08:10:08.368]    __traceout=0x00000001      (SWO Trace)
[08:10:08.368]    __errorcontrol=0x00000000  (Skip Errors="False")
[08:10:08.368]    __FlashAddr=0x00000000
[08:10:08.368]    __FlashLen=0x00000000
[08:10:08.368]    __FlashArg=0x00000000
[08:10:08.369]    __FlashOp=0x00000000
[08:10:08.369]    __Result=0x00000000
[08:10:08.369]    
[08:10:08.369]    // User-defined
[08:10:08.369]    DbgMCU_CR=0x00000007
[08:10:08.369]    DbgMCU_APB1_Fz=0x00000000
[08:10:08.369]    DbgMCU_APB2_Fz=0x00000000
[08:10:08.370]    TraceClk_Pin=0x00040002
[08:10:08.370]    TraceD0_Pin=0x00040003
[08:10:08.370]    TraceD1_Pin=0x00040004
[08:10:08.370]    TraceD2_Pin=0x00040005
[08:10:08.370]    TraceD3_Pin=0x00040006
[08:10:08.370]  </debugvars>
[08:10:08.370]  
[08:10:08.371]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[08:10:08.371]    <block atomic="false" info="">
[08:10:08.371]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[08:10:08.372]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.372]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[08:10:08.373]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.374]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[08:10:08.375]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.375]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[08:10:08.376]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.376]    </block>
[08:10:08.377]  </sequence>
[08:10:08.377]  
[08:10:08.409]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[08:10:08.409]  
[08:10:08.409]  <debugvars>
[08:10:08.409]    // Pre-defined
[08:10:08.410]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[08:10:08.410]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[08:10:08.410]    __dp=0x00000000
[08:10:08.410]    __ap=0x00000000
[08:10:08.410]    __traceout=0x00000001      (SWO Trace)
[08:10:08.411]    __errorcontrol=0x00000000  (Skip Errors="False")
[08:10:08.411]    __FlashAddr=0x00000000
[08:10:08.411]    __FlashLen=0x00000000
[08:10:08.411]    __FlashArg=0x00000000
[08:10:08.411]    __FlashOp=0x00000000
[08:10:08.411]    __Result=0x00000000
[08:10:08.411]    
[08:10:08.411]    // User-defined
[08:10:08.412]    DbgMCU_CR=0x00000007
[08:10:08.412]    DbgMCU_APB1_Fz=0x00000000
[08:10:08.412]    DbgMCU_APB2_Fz=0x00000000
[08:10:08.412]    TraceClk_Pin=0x00040002
[08:10:08.412]    TraceD0_Pin=0x00040003
[08:10:08.412]    TraceD1_Pin=0x00040004
[08:10:08.412]    TraceD2_Pin=0x00040005
[08:10:08.413]    TraceD3_Pin=0x00040006
[08:10:08.413]  </debugvars>
[08:10:08.413]  
[08:10:08.413]  <sequence name="TraceStart" Pname="" disable="false" info="">
[08:10:08.413]    <block atomic="false" info="">
[08:10:08.413]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[08:10:08.413]        // -> [traceSWO <= 0x00000001]
[08:10:08.414]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[08:10:08.414]        // -> [traceTPIU <= 0x00000000]
[08:10:08.414]    </block>
[08:10:08.414]    <control if="traceSWO" while="" timeout="0" info="">
[08:10:08.414]      // if-block "traceSWO"
[08:10:08.414]        // =>  TRUE
[08:10:08.414]      <block atomic="false" info="">
[08:10:08.415]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[08:10:08.415]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[08:10:08.415]            <block atomic="false" info="">
[08:10:08.415]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[08:10:08.415]                // -> [dbgmcu_val <= 0x00000000]
[08:10:08.416]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[08:10:08.416]                // -> [dbgmcu_trace_val <= 0x00000000]
[08:10:08.416]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[08:10:08.417]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.418]                // -> [dbgmcu_val <= 0x00000007]
[08:10:08.418]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[08:10:08.418]                // -> [dbgmcu_trace_val <= 0x00000020]
[08:10:08.418]              Sequence("ConfigureTraceSWOPin");
[08:10:08.418]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[08:10:08.418]                  <block atomic="false" info="">
[08:10:08.418]                    __var pin     = 0;
[08:10:08.419]                      // -> [pin <= 0x00000000]
[08:10:08.419]                    __var port    = 0;
[08:10:08.419]                      // -> [port <= 0x00000000]
[08:10:08.419]                    __var portAdr = 0;
[08:10:08.419]                      // -> [portAdr <= 0x00000000]
[08:10:08.420]                    __var pos     = 0;
[08:10:08.420]                      // -> [pos <= 0x00000000]
[08:10:08.420]                    __var SWO_Pin = 0x00010003;          // PB3
[08:10:08.421]                      // -> [SWO_Pin <= 0x00010003]
[08:10:08.421]                  </block>
[08:10:08.421]                  <block atomic="false" info="configure SWO">
[08:10:08.421]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[08:10:08.421]                      // -> [pin <= 0x00000003]
[08:10:08.421]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[08:10:08.421]                      // -> [port <= 0x00000001]
[08:10:08.422]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[08:10:08.422]                      // -> [portAdr <= 0x40020400]
[08:10:08.422]                    pos = pin * 2;
[08:10:08.422]                      // -> [pos <= 0x00000006]
[08:10:08.422]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[08:10:08.423]                      // -> [Read32(0x40023830) => 0x00000007]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.425]                      // -> [Write32(0x40023830, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.425]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[08:10:08.426]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.427]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.427]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[08:10:08.428]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.429]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.429]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[08:10:08.430]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.431]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.431]                  </block>
[08:10:08.431]                  <control if="pin <  8" while="" timeout="0" info="">
[08:10:08.432]                    // if-block "pin <  8"
[08:10:08.432]                      // =>  TRUE
[08:10:08.432]                    <block atomic="false" info="">
[08:10:08.432]                      pos = ((pin    ) & 7) * 4;
[08:10:08.432]                        // -> [pos <= 0x0000000C]
[08:10:08.433]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[08:10:08.434]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.435]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.435]                    </block>
[08:10:08.435]                    // end if-block "pin <  8"
[08:10:08.435]                  </control>
[08:10:08.435]                  <control if="pin >= 8" while="" timeout="0" info="">
[08:10:08.436]                    // if-block "pin >= 8"
[08:10:08.436]                      // =>  FALSE
[08:10:08.436]                    // skip if-block "pin >= 8"
[08:10:08.436]                  </control>
[08:10:08.437]                </sequence>
[08:10:08.437]            </block>
[08:10:08.437]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[08:10:08.437]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[08:10:08.438]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.438]            </block>
[08:10:08.439]          </sequence>
[08:10:08.439]      </block>
[08:10:08.439]      // end if-block "traceSWO"
[08:10:08.439]    </control>
[08:10:08.439]    <control if="traceTPIU" while="" timeout="0" info="">
[08:10:08.440]      // if-block "traceTPIU"
[08:10:08.440]        // =>  FALSE
[08:10:08.440]      // skip if-block "traceTPIU"
[08:10:08.440]    </control>
[08:10:08.440]  </sequence>
[08:10:08.440]  
[08:10:08.454]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[08:10:08.454]  
[08:10:08.454]  <debugvars>
[08:10:08.454]    // Pre-defined
[08:10:08.454]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[08:10:08.455]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[08:10:08.455]    __dp=0x00000000
[08:10:08.455]    __ap=0x00000000
[08:10:08.455]    __traceout=0x00000001      (SWO Trace)
[08:10:08.455]    __errorcontrol=0x00000000  (Skip Errors="False")
[08:10:08.456]    __FlashAddr=0x00000000
[08:10:08.456]    __FlashLen=0x00000000
[08:10:08.456]    __FlashArg=0x00000000
[08:10:08.456]    __FlashOp=0x00000000
[08:10:08.456]    __Result=0x00000000
[08:10:08.456]    
[08:10:08.456]    // User-defined
[08:10:08.457]    DbgMCU_CR=0x00000007
[08:10:08.457]    DbgMCU_APB1_Fz=0x00000000
[08:10:08.457]    DbgMCU_APB2_Fz=0x00000000
[08:10:08.457]    TraceClk_Pin=0x00040002
[08:10:08.457]    TraceD0_Pin=0x00040003
[08:10:08.457]    TraceD1_Pin=0x00040004
[08:10:08.458]    TraceD2_Pin=0x00040005
[08:10:08.458]    TraceD3_Pin=0x00040006
[08:10:08.458]  </debugvars>
[08:10:08.458]  
[08:10:08.458]  <sequence name="TraceStart" Pname="" disable="false" info="">
[08:10:08.458]    <block atomic="false" info="">
[08:10:08.458]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[08:10:08.459]        // -> [traceSWO <= 0x00000001]
[08:10:08.459]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[08:10:08.459]        // -> [traceTPIU <= 0x00000000]
[08:10:08.459]    </block>
[08:10:08.459]    <control if="traceSWO" while="" timeout="0" info="">
[08:10:08.460]      // if-block "traceSWO"
[08:10:08.460]        // =>  TRUE
[08:10:08.460]      <block atomic="false" info="">
[08:10:08.460]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[08:10:08.460]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[08:10:08.460]            <block atomic="false" info="">
[08:10:08.461]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[08:10:08.461]                // -> [dbgmcu_val <= 0x00000000]
[08:10:08.461]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[08:10:08.461]                // -> [dbgmcu_trace_val <= 0x00000000]
[08:10:08.461]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[08:10:08.462]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.463]                // -> [dbgmcu_val <= 0x00000007]
[08:10:08.463]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[08:10:08.463]                // -> [dbgmcu_trace_val <= 0x00000020]
[08:10:08.463]              Sequence("ConfigureTraceSWOPin");
[08:10:08.463]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[08:10:08.463]                  <block atomic="false" info="">
[08:10:08.464]                    __var pin     = 0;
[08:10:08.464]                      // -> [pin <= 0x00000000]
[08:10:08.464]                    __var port    = 0;
[08:10:08.464]                      // -> [port <= 0x00000000]
[08:10:08.464]                    __var portAdr = 0;
[08:10:08.465]                      // -> [portAdr <= 0x00000000]
[08:10:08.465]                    __var pos     = 0;
[08:10:08.465]                      // -> [pos <= 0x00000000]
[08:10:08.465]                    __var SWO_Pin = 0x00010003;          // PB3
[08:10:08.465]                      // -> [SWO_Pin <= 0x00010003]
[08:10:08.466]                  </block>
[08:10:08.466]                  <block atomic="false" info="configure SWO">
[08:10:08.466]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[08:10:08.466]                      // -> [pin <= 0x00000003]
[08:10:08.466]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[08:10:08.467]                      // -> [port <= 0x00000001]
[08:10:08.467]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[08:10:08.467]                      // -> [portAdr <= 0x40020400]
[08:10:08.467]                    pos = pin * 2;
[08:10:08.468]                      // -> [pos <= 0x00000006]
[08:10:08.468]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[08:10:08.469]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.470]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.470]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[08:10:08.471]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.472]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.472]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[08:10:08.473]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.474]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.475]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[08:10:08.476]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.477]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.477]                  </block>
[08:10:08.477]                  <control if="pin <  8" while="" timeout="0" info="">
[08:10:08.477]                    // if-block "pin <  8"
[08:10:08.477]                      // =>  TRUE
[08:10:08.477]                    <block atomic="false" info="">
[08:10:08.478]                      pos = ((pin    ) & 7) * 4;
[08:10:08.478]                        // -> [pos <= 0x0000000C]
[08:10:08.478]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[08:10:08.479]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.480]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.480]                    </block>
[08:10:08.480]                    // end if-block "pin <  8"
[08:10:08.480]                  </control>
[08:10:08.480]                  <control if="pin >= 8" while="" timeout="0" info="">
[08:10:08.481]                    // if-block "pin >= 8"
[08:10:08.481]                      // =>  FALSE
[08:10:08.481]                    // skip if-block "pin >= 8"
[08:10:08.481]                  </control>
[08:10:08.481]                </sequence>
[08:10:08.482]            </block>
[08:10:08.482]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[08:10:08.482]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[08:10:08.483]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:08.484]            </block>
[08:10:08.484]          </sequence>
[08:10:08.484]      </block>
[08:10:08.484]      // end if-block "traceSWO"
[08:10:08.484]    </control>
[08:10:08.484]    <control if="traceTPIU" while="" timeout="0" info="">
[08:10:08.484]      // if-block "traceTPIU"
[08:10:08.485]        // =>  FALSE
[08:10:08.485]      // skip if-block "traceTPIU"
[08:10:08.485]    </control>
[08:10:08.485]  </sequence>
[08:10:08.485]  
[08:10:09.320]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[08:10:09.320]  
[08:10:09.368]  <debugvars>
[08:10:09.368]    // Pre-defined
[08:10:09.368]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[08:10:09.368]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[08:10:09.368]    __dp=0x00000000
[08:10:09.369]    __ap=0x00000000
[08:10:09.369]    __traceout=0x00000001      (SWO Trace)
[08:10:09.370]    __errorcontrol=0x00000000  (Skip Errors="False")
[08:10:09.370]    __FlashAddr=0x00000000
[08:10:09.370]    __FlashLen=0x00000000
[08:10:09.371]    __FlashArg=0x00000000
[08:10:09.371]    __FlashOp=0x00000000
[08:10:09.371]    __Result=0x00000000
[08:10:09.371]    
[08:10:09.371]    // User-defined
[08:10:09.372]    DbgMCU_CR=0x00000007
[08:10:09.372]    DbgMCU_APB1_Fz=0x00000000
[08:10:09.372]    DbgMCU_APB2_Fz=0x00000000
[08:10:09.373]    TraceClk_Pin=0x00040002
[08:10:09.374]    TraceD0_Pin=0x00040003
[08:10:09.374]    TraceD1_Pin=0x00040004
[08:10:09.374]    TraceD2_Pin=0x00040005
[08:10:09.374]    TraceD3_Pin=0x00040006
[08:10:09.375]  </debugvars>
[08:10:09.375]  
[08:10:09.375]  <sequence name="TraceStart" Pname="" disable="false" info="">
[08:10:09.375]    <block atomic="false" info="">
[08:10:09.376]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[08:10:09.376]        // -> [traceSWO <= 0x00000001]
[08:10:09.376]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[08:10:09.376]        // -> [traceTPIU <= 0x00000000]
[08:10:09.377]    </block>
[08:10:09.377]    <control if="traceSWO" while="" timeout="0" info="">
[08:10:09.377]      // if-block "traceSWO"
[08:10:09.377]        // =>  TRUE
[08:10:09.378]      <block atomic="false" info="">
[08:10:09.378]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[08:10:09.378]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[08:10:09.378]            <block atomic="false" info="">
[08:10:09.379]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[08:10:09.379]                // -> [dbgmcu_val <= 0x00000000]
[08:10:09.379]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[08:10:09.379]                // -> [dbgmcu_trace_val <= 0x00000000]
[08:10:09.379]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[08:10:09.381]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[08:10:09.382]                // -> [dbgmcu_val <= 0x00000007]
[08:10:09.382]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[08:10:09.382]                // -> [dbgmcu_trace_val <= 0x00000020]
[08:10:09.382]              Sequence("ConfigureTraceSWOPin");
[08:10:09.383]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[08:10:09.383]                  <block atomic="false" info="">
[08:10:09.383]                    __var pin     = 0;
[08:10:09.383]                      // -> [pin <= 0x00000000]
[08:10:09.384]                    __var port    = 0;
[08:10:09.384]                      // -> [port <= 0x00000000]
[08:10:09.384]                    __var portAdr = 0;
[08:10:09.384]                      // -> [portAdr <= 0x00000000]
[08:10:09.385]                    __var pos     = 0;
[08:10:09.385]                      // -> [pos <= 0x00000000]
[08:10:09.386]                    __var SWO_Pin = 0x00010003;          // PB3
[08:10:09.386]                      // -> [SWO_Pin <= 0x00010003]
[08:10:09.386]                  </block>
[08:10:09.386]                  <block atomic="false" info="configure SWO">
[08:10:09.387]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[08:10:09.387]                      // -> [pin <= 0x00000003]
[08:10:09.387]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[08:10:09.387]                      // -> [port <= 0x00000001]
[08:10:09.388]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[08:10:09.388]                      // -> [portAdr <= 0x40020400]
[08:10:09.388]                    pos = pin * 2;
[08:10:09.388]                      // -> [pos <= 0x00000006]
[08:10:09.389]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[08:10:09.390]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[08:10:09.391]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:09.392]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[08:10:09.393]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[08:10:09.395]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:09.395]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[08:10:09.396]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[08:10:09.398]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:09.398]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[08:10:09.399]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[08:10:09.400]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:09.401]                  </block>
[08:10:09.401]                  <control if="pin <  8" while="" timeout="0" info="">
[08:10:09.401]                    // if-block "pin <  8"
[08:10:09.402]                      // =>  TRUE
[08:10:09.402]                    <block atomic="false" info="">
[08:10:09.403]                      pos = ((pin    ) & 7) * 4;
[08:10:09.403]                        // -> [pos <= 0x0000000C]
[08:10:09.403]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[08:10:09.405]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[08:10:09.406]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:09.407]                    </block>
[08:10:09.407]                    // end if-block "pin <  8"
[08:10:09.407]                  </control>
[08:10:09.407]                  <control if="pin >= 8" while="" timeout="0" info="">
[08:10:09.408]                    // if-block "pin >= 8"
[08:10:09.408]                      // =>  FALSE
[08:10:09.408]                    // skip if-block "pin >= 8"
[08:10:09.408]                  </control>
[08:10:09.409]                </sequence>
[08:10:09.409]            </block>
[08:10:09.409]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[08:10:09.409]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[08:10:09.411]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[08:10:09.412]            </block>
[08:10:09.412]          </sequence>
[08:10:09.412]      </block>
[08:10:09.412]      // end if-block "traceSWO"
[08:10:09.413]    </control>
[08:10:09.413]    <control if="traceTPIU" while="" timeout="0" info="">
[08:10:09.413]      // if-block "traceTPIU"
[08:10:09.413]        // =>  FALSE
[08:10:09.414]      // skip if-block "traceTPIU"
[08:10:09.414]    </control>
[08:10:09.414]  </sequence>
[08:10:09.414]  
[08:16:06.841]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[08:16:06.841]  
[08:16:06.888]  <debugvars>
[08:16:06.889]    // Pre-defined
[08:16:06.889]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[08:16:06.889]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[08:16:06.889]    __dp=0x00000000
[08:16:06.889]    __ap=0x00000000
[08:16:06.889]    __traceout=0x00000001      (SWO Trace)
[08:16:06.889]    __errorcontrol=0x00000000  (Skip Errors="False")
[08:16:06.890]    __FlashAddr=0x00000000
[08:16:06.890]    __FlashLen=0x00000000
[08:16:06.890]    __FlashArg=0x00000000
[08:16:06.891]    __FlashOp=0x00000000
[08:16:06.891]    __Result=0x00000000
[08:16:06.891]    
[08:16:06.891]    // User-defined
[08:16:06.891]    DbgMCU_CR=0x00000007
[08:16:06.891]    DbgMCU_APB1_Fz=0x00000000
[08:16:06.891]    DbgMCU_APB2_Fz=0x00000000
[08:16:06.891]    TraceClk_Pin=0x00040002
[08:16:06.892]    TraceD0_Pin=0x00040003
[08:16:06.892]    TraceD1_Pin=0x00040004
[08:16:06.892]    TraceD2_Pin=0x00040005
[08:16:06.892]    TraceD3_Pin=0x00040006
[08:16:06.892]  </debugvars>
[08:16:06.892]  
[08:16:06.893]  <sequence name="TraceStop" Pname="" disable="false" info="">
[08:16:06.893]    <block atomic="false" info="">
[08:16:06.893]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[08:16:06.893]        // -> [traceSWO <= 0x00000001]
[08:16:06.894]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[08:16:06.894]        // -> [traceTPIU <= 0x00000000]
[08:16:06.894]    </block>
[08:16:06.894]    <control if="traceSWO" while="" timeout="0" info="">
[08:16:06.895]      // if-block "traceSWO"
[08:16:06.895]        // =>  TRUE
[08:16:06.895]      <block atomic="false" info="">
[08:16:06.896]        Sequence("DisableTraceSWO");
[08:16:06.896]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[08:16:06.896]            <block atomic="false" info="">
[08:16:06.896]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[08:16:06.896]                // -> [dbgmcu_val <= 0x00000000]
[08:16:06.897]            </block>
[08:16:06.897]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[08:16:06.897]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[08:16:06.898]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[08:16:06.898]                // -> [dbgmcu_val <= 0x00000007]
[08:16:06.898]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[08:16:06.899]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:06.899]            </block>
[08:16:06.899]          </sequence>
[08:16:06.900]      </block>
[08:16:06.900]      // end if-block "traceSWO"
[08:16:06.900]    </control>
[08:16:06.900]    <control if="traceTPIU" while="" timeout="0" info="">
[08:16:06.900]      // if-block "traceTPIU"
[08:16:06.900]        // =>  FALSE
[08:16:06.900]      // skip if-block "traceTPIU"
[08:16:06.901]    </control>
[08:16:06.901]  </sequence>
[08:16:06.901]  
[08:16:14.506]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[08:16:14.506]  
[08:16:14.554]  <debugvars>
[08:16:14.554]    // Pre-defined
[08:16:14.555]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[08:16:14.555]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[08:16:14.555]    __dp=0x00000000
[08:16:14.555]    __ap=0x00000000
[08:16:14.556]    __traceout=0x00000001      (SWO Trace)
[08:16:14.556]    __errorcontrol=0x00000000  (Skip Errors="False")
[08:16:14.556]    __FlashAddr=0x00000000
[08:16:14.557]    __FlashLen=0x00000000
[08:16:14.557]    __FlashArg=0x00000000
[08:16:14.557]    __FlashOp=0x00000000
[08:16:14.558]    __Result=0x00000000
[08:16:14.558]    
[08:16:14.558]    // User-defined
[08:16:14.558]    DbgMCU_CR=0x00000007
[08:16:14.559]    DbgMCU_APB1_Fz=0x00000000
[08:16:14.559]    DbgMCU_APB2_Fz=0x00000000
[08:16:14.559]    TraceClk_Pin=0x00040002
[08:16:14.560]    TraceD0_Pin=0x00040003
[08:16:14.560]    TraceD1_Pin=0x00040004
[08:16:14.561]    TraceD2_Pin=0x00040005
[08:16:14.561]    TraceD3_Pin=0x00040006
[08:16:14.561]  </debugvars>
[08:16:14.562]  
[08:16:14.562]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[08:16:14.562]    <block atomic="false" info="">
[08:16:14.562]      Sequence("CheckID");
[08:16:14.563]        <sequence name="CheckID" Pname="" disable="false" info="">
[08:16:14.563]          <block atomic="false" info="">
[08:16:14.564]            __var pidr1 = 0;
[08:16:14.564]              // -> [pidr1 <= 0x00000000]
[08:16:14.564]            __var pidr2 = 0;
[08:16:14.565]              // -> [pidr2 <= 0x00000000]
[08:16:14.565]            __var jep106id = 0;
[08:16:14.565]              // -> [jep106id <= 0x00000000]
[08:16:14.566]            __var ROMTableBase = 0;
[08:16:14.566]              // -> [ROMTableBase <= 0x00000000]
[08:16:14.567]            __ap = 0;      // AHB-AP
[08:16:14.567]              // -> [__ap <= 0x00000000]
[08:16:14.567]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[08:16:14.568]              // -> [ReadAP(0x000000F8) => 0xE00FF003]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.569]              // -> [ROMTableBase <= 0xE00FF000]
[08:16:14.569]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[08:16:14.570]              // -> [Read32(0xE00FFFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.571]              // -> [pidr1 <= 0x00000004]
[08:16:14.571]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[08:16:14.572]              // -> [Read32(0xE00FFFE8) => 0x0000000A]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.573]              // -> [pidr2 <= 0x0000000A]
[08:16:14.573]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[08:16:14.574]              // -> [jep106id <= 0x00000020]
[08:16:14.574]          </block>
[08:16:14.574]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[08:16:14.575]            // if-block "jep106id != 0x20"
[08:16:14.575]              // =>  FALSE
[08:16:14.575]            // skip if-block "jep106id != 0x20"
[08:16:14.575]          </control>
[08:16:14.576]        </sequence>
[08:16:14.576]    </block>
[08:16:14.577]  </sequence>
[08:16:14.577]  
[08:16:14.578]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[08:16:14.578]  
[08:16:14.578]  <debugvars>
[08:16:14.578]    // Pre-defined
[08:16:14.579]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[08:16:14.579]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[08:16:14.580]    __dp=0x00000000
[08:16:14.580]    __ap=0x00000000
[08:16:14.580]    __traceout=0x00000001      (SWO Trace)
[08:16:14.581]    __errorcontrol=0x00000000  (Skip Errors="False")
[08:16:14.581]    __FlashAddr=0x00000000
[08:16:14.581]    __FlashLen=0x00000000
[08:16:14.582]    __FlashArg=0x00000000
[08:16:14.582]    __FlashOp=0x00000000
[08:16:14.582]    __Result=0x00000000
[08:16:14.583]    
[08:16:14.583]    // User-defined
[08:16:14.583]    DbgMCU_CR=0x00000007
[08:16:14.584]    DbgMCU_APB1_Fz=0x00000000
[08:16:14.584]    DbgMCU_APB2_Fz=0x00000000
[08:16:14.584]    TraceClk_Pin=0x00040002
[08:16:14.585]    TraceD0_Pin=0x00040003
[08:16:14.585]    TraceD1_Pin=0x00040004
[08:16:14.586]    TraceD2_Pin=0x00040005
[08:16:14.586]    TraceD3_Pin=0x00040006
[08:16:14.586]  </debugvars>
[08:16:14.586]  
[08:16:14.586]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[08:16:14.587]    <block atomic="false" info="">
[08:16:14.587]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[08:16:14.588]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.589]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[08:16:14.590]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.590]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[08:16:14.592]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.592]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[08:16:14.594]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.594]    </block>
[08:16:14.595]  </sequence>
[08:16:14.595]  
[08:16:14.649]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[08:16:14.649]  
[08:16:14.649]  <debugvars>
[08:16:14.650]    // Pre-defined
[08:16:14.650]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[08:16:14.650]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[08:16:14.651]    __dp=0x00000000
[08:16:14.651]    __ap=0x00000000
[08:16:14.651]    __traceout=0x00000001      (SWO Trace)
[08:16:14.651]    __errorcontrol=0x00000000  (Skip Errors="False")
[08:16:14.652]    __FlashAddr=0x00000000
[08:16:14.652]    __FlashLen=0x00000000
[08:16:14.652]    __FlashArg=0x00000000
[08:16:14.652]    __FlashOp=0x00000000
[08:16:14.653]    __Result=0x00000000
[08:16:14.653]    
[08:16:14.653]    // User-defined
[08:16:14.653]    DbgMCU_CR=0x00000007
[08:16:14.653]    DbgMCU_APB1_Fz=0x00000000
[08:16:14.654]    DbgMCU_APB2_Fz=0x00000000
[08:16:14.654]    TraceClk_Pin=0x00040002
[08:16:14.654]    TraceD0_Pin=0x00040003
[08:16:14.654]    TraceD1_Pin=0x00040004
[08:16:14.655]    TraceD2_Pin=0x00040005
[08:16:14.655]    TraceD3_Pin=0x00040006
[08:16:14.656]  </debugvars>
[08:16:14.656]  
[08:16:14.656]  <sequence name="TraceStart" Pname="" disable="false" info="">
[08:16:14.657]    <block atomic="false" info="">
[08:16:14.657]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[08:16:14.657]        // -> [traceSWO <= 0x00000001]
[08:16:14.657]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[08:16:14.657]        // -> [traceTPIU <= 0x00000000]
[08:16:14.657]    </block>
[08:16:14.657]    <control if="traceSWO" while="" timeout="0" info="">
[08:16:14.658]      // if-block "traceSWO"
[08:16:14.658]        // =>  TRUE
[08:16:14.659]      <block atomic="false" info="">
[08:16:14.659]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[08:16:14.659]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[08:16:14.660]            <block atomic="false" info="">
[08:16:14.660]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[08:16:14.661]                // -> [dbgmcu_val <= 0x00000000]
[08:16:14.661]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[08:16:14.661]                // -> [dbgmcu_trace_val <= 0x00000000]
[08:16:14.662]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[08:16:14.664]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.664]                // -> [dbgmcu_val <= 0x00000007]
[08:16:14.664]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[08:16:14.665]                // -> [dbgmcu_trace_val <= 0x00000020]
[08:16:14.665]              Sequence("ConfigureTraceSWOPin");
[08:16:14.665]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[08:16:14.666]                  <block atomic="false" info="">
[08:16:14.666]                    __var pin     = 0;
[08:16:14.666]                      // -> [pin <= 0x00000000]
[08:16:14.666]                    __var port    = 0;
[08:16:14.666]                      // -> [port <= 0x00000000]
[08:16:14.667]                    __var portAdr = 0;
[08:16:14.667]                      // -> [portAdr <= 0x00000000]
[08:16:14.667]                    __var pos     = 0;
[08:16:14.667]                      // -> [pos <= 0x00000000]
[08:16:14.667]                    __var SWO_Pin = 0x00010003;          // PB3
[08:16:14.668]                      // -> [SWO_Pin <= 0x00010003]
[08:16:14.668]                  </block>
[08:16:14.668]                  <block atomic="false" info="configure SWO">
[08:16:14.668]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[08:16:14.669]                      // -> [pin <= 0x00000003]
[08:16:14.669]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[08:16:14.669]                      // -> [port <= 0x00000001]
[08:16:14.670]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[08:16:14.671]                      // -> [portAdr <= 0x40020400]
[08:16:14.671]                    pos = pin * 2;
[08:16:14.671]                      // -> [pos <= 0x00000006]
[08:16:14.671]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[08:16:14.673]                      // -> [Read32(0x40023830) => 0x00000007]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.675]                      // -> [Write32(0x40023830, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.675]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[08:16:14.676]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.677]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.678]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[08:16:14.679]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.681]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.682]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[08:16:14.683]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.684]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.685]                  </block>
[08:16:14.685]                  <control if="pin <  8" while="" timeout="0" info="">
[08:16:14.685]                    // if-block "pin <  8"
[08:16:14.685]                      // =>  TRUE
[08:16:14.686]                    <block atomic="false" info="">
[08:16:14.686]                      pos = ((pin    ) & 7) * 4;
[08:16:14.686]                        // -> [pos <= 0x0000000C]
[08:16:14.686]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[08:16:14.688]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.689]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.690]                    </block>
[08:16:14.690]                    // end if-block "pin <  8"
[08:16:14.690]                  </control>
[08:16:14.691]                  <control if="pin >= 8" while="" timeout="0" info="">
[08:16:14.691]                    // if-block "pin >= 8"
[08:16:14.691]                      // =>  FALSE
[08:16:14.692]                    // skip if-block "pin >= 8"
[08:16:14.692]                  </control>
[08:16:14.693]                </sequence>
[08:16:14.693]            </block>
[08:16:14.693]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[08:16:14.693]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[08:16:14.695]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.695]            </block>
[08:16:14.695]          </sequence>
[08:16:14.695]      </block>
[08:16:14.696]      // end if-block "traceSWO"
[08:16:14.696]    </control>
[08:16:14.697]    <control if="traceTPIU" while="" timeout="0" info="">
[08:16:14.697]      // if-block "traceTPIU"
[08:16:14.697]        // =>  FALSE
[08:16:14.697]      // skip if-block "traceTPIU"
[08:16:14.698]    </control>
[08:16:14.698]  </sequence>
[08:16:14.698]  
[08:16:14.716]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[08:16:14.716]  
[08:16:14.716]  <debugvars>
[08:16:14.718]    // Pre-defined
[08:16:14.718]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[08:16:14.718]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[08:16:14.718]    __dp=0x00000000
[08:16:14.719]    __ap=0x00000000
[08:16:14.719]    __traceout=0x00000001      (SWO Trace)
[08:16:14.719]    __errorcontrol=0x00000000  (Skip Errors="False")
[08:16:14.720]    __FlashAddr=0x00000000
[08:16:14.720]    __FlashLen=0x00000000
[08:16:14.720]    __FlashArg=0x00000000
[08:16:14.722]    __FlashOp=0x00000000
[08:16:14.722]    __Result=0x00000000
[08:16:14.722]    
[08:16:14.722]    // User-defined
[08:16:14.722]    DbgMCU_CR=0x00000007
[08:16:14.723]    DbgMCU_APB1_Fz=0x00000000
[08:16:14.723]    DbgMCU_APB2_Fz=0x00000000
[08:16:14.723]    TraceClk_Pin=0x00040002
[08:16:14.723]    TraceD0_Pin=0x00040003
[08:16:14.723]    TraceD1_Pin=0x00040004
[08:16:14.723]    TraceD2_Pin=0x00040005
[08:16:14.724]    TraceD3_Pin=0x00040006
[08:16:14.724]  </debugvars>
[08:16:14.725]  
[08:16:14.725]  <sequence name="TraceStart" Pname="" disable="false" info="">
[08:16:14.725]    <block atomic="false" info="">
[08:16:14.725]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[08:16:14.725]        // -> [traceSWO <= 0x00000001]
[08:16:14.726]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[08:16:14.726]        // -> [traceTPIU <= 0x00000000]
[08:16:14.726]    </block>
[08:16:14.726]    <control if="traceSWO" while="" timeout="0" info="">
[08:16:14.727]      // if-block "traceSWO"
[08:16:14.727]        // =>  TRUE
[08:16:14.727]      <block atomic="false" info="">
[08:16:14.728]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[08:16:14.729]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[08:16:14.729]            <block atomic="false" info="">
[08:16:14.729]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[08:16:14.730]                // -> [dbgmcu_val <= 0x00000000]
[08:16:14.730]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[08:16:14.730]                // -> [dbgmcu_trace_val <= 0x00000000]
[08:16:14.730]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[08:16:14.732]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.732]                // -> [dbgmcu_val <= 0x00000007]
[08:16:14.732]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[08:16:14.733]                // -> [dbgmcu_trace_val <= 0x00000020]
[08:16:14.733]              Sequence("ConfigureTraceSWOPin");
[08:16:14.733]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[08:16:14.734]                  <block atomic="false" info="">
[08:16:14.734]                    __var pin     = 0;
[08:16:14.734]                      // -> [pin <= 0x00000000]
[08:16:14.735]                    __var port    = 0;
[08:16:14.735]                      // -> [port <= 0x00000000]
[08:16:14.736]                    __var portAdr = 0;
[08:16:14.736]                      // -> [portAdr <= 0x00000000]
[08:16:14.736]                    __var pos     = 0;
[08:16:14.737]                      // -> [pos <= 0x00000000]
[08:16:14.737]                    __var SWO_Pin = 0x00010003;          // PB3
[08:16:14.738]                      // -> [SWO_Pin <= 0x00010003]
[08:16:14.738]                  </block>
[08:16:14.738]                  <block atomic="false" info="configure SWO">
[08:16:14.739]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[08:16:14.739]                      // -> [pin <= 0x00000003]
[08:16:14.739]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[08:16:14.740]                      // -> [port <= 0x00000001]
[08:16:14.740]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[08:16:14.740]                      // -> [portAdr <= 0x40020400]
[08:16:14.741]                    pos = pin * 2;
[08:16:14.741]                      // -> [pos <= 0x00000006]
[08:16:14.741]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[08:16:14.742]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.744]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.744]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[08:16:14.746]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.746]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.747]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[08:16:14.749]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.750]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.750]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[08:16:14.752]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.754]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.754]                  </block>
[08:16:14.754]                  <control if="pin <  8" while="" timeout="0" info="">
[08:16:14.754]                    // if-block "pin <  8"
[08:16:14.755]                      // =>  TRUE
[08:16:14.755]                    <block atomic="false" info="">
[08:16:14.755]                      pos = ((pin    ) & 7) * 4;
[08:16:14.756]                        // -> [pos <= 0x0000000C]
[08:16:14.756]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[08:16:14.758]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.759]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.759]                    </block>
[08:16:14.760]                    // end if-block "pin <  8"
[08:16:14.760]                  </control>
[08:16:14.761]                  <control if="pin >= 8" while="" timeout="0" info="">
[08:16:14.761]                    // if-block "pin >= 8"
[08:16:14.761]                      // =>  FALSE
[08:16:14.761]                    // skip if-block "pin >= 8"
[08:16:14.762]                  </control>
[08:16:14.762]                </sequence>
[08:16:14.762]            </block>
[08:16:14.762]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[08:16:14.763]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[08:16:14.764]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:14.765]            </block>
[08:16:14.765]          </sequence>
[08:16:14.766]      </block>
[08:16:14.766]      // end if-block "traceSWO"
[08:16:14.766]    </control>
[08:16:14.767]    <control if="traceTPIU" while="" timeout="0" info="">
[08:16:14.767]      // if-block "traceTPIU"
[08:16:14.767]        // =>  FALSE
[08:16:14.768]      // skip if-block "traceTPIU"
[08:16:14.768]    </control>
[08:16:14.769]  </sequence>
[08:16:14.769]  
[08:16:15.662]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[08:16:15.662]  
[08:16:15.709]  <debugvars>
[08:16:15.709]    // Pre-defined
[08:16:15.710]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[08:16:15.710]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[08:16:15.711]    __dp=0x00000000
[08:16:15.711]    __ap=0x00000000
[08:16:15.711]    __traceout=0x00000001      (SWO Trace)
[08:16:15.711]    __errorcontrol=0x00000000  (Skip Errors="False")
[08:16:15.712]    __FlashAddr=0x00000000
[08:16:15.712]    __FlashLen=0x00000000
[08:16:15.712]    __FlashArg=0x00000000
[08:16:15.713]    __FlashOp=0x00000000
[08:16:15.713]    __Result=0x00000000
[08:16:15.713]    
[08:16:15.713]    // User-defined
[08:16:15.714]    DbgMCU_CR=0x00000007
[08:16:15.714]    DbgMCU_APB1_Fz=0x00000000
[08:16:15.714]    DbgMCU_APB2_Fz=0x00000000
[08:16:15.715]    TraceClk_Pin=0x00040002
[08:16:15.715]    TraceD0_Pin=0x00040003
[08:16:15.715]    TraceD1_Pin=0x00040004
[08:16:15.715]    TraceD2_Pin=0x00040005
[08:16:15.716]    TraceD3_Pin=0x00040006
[08:16:15.716]  </debugvars>
[08:16:15.716]  
[08:16:15.716]  <sequence name="TraceStart" Pname="" disable="false" info="">
[08:16:15.717]    <block atomic="false" info="">
[08:16:15.717]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[08:16:15.717]        // -> [traceSWO <= 0x00000001]
[08:16:15.718]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[08:16:15.719]        // -> [traceTPIU <= 0x00000000]
[08:16:15.719]    </block>
[08:16:15.719]    <control if="traceSWO" while="" timeout="0" info="">
[08:16:15.719]      // if-block "traceSWO"
[08:16:15.720]        // =>  TRUE
[08:16:15.720]      <block atomic="false" info="">
[08:16:15.720]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[08:16:15.720]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[08:16:15.721]            <block atomic="false" info="">
[08:16:15.721]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[08:16:15.721]                // -> [dbgmcu_val <= 0x00000000]
[08:16:15.721]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[08:16:15.722]                // -> [dbgmcu_trace_val <= 0x00000000]
[08:16:15.722]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[08:16:15.724]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[08:16:15.724]                // -> [dbgmcu_val <= 0x00000007]
[08:16:15.725]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[08:16:15.725]                // -> [dbgmcu_trace_val <= 0x00000020]
[08:16:15.725]              Sequence("ConfigureTraceSWOPin");
[08:16:15.725]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[08:16:15.725]                  <block atomic="false" info="">
[08:16:15.726]                    __var pin     = 0;
[08:16:15.726]                      // -> [pin <= 0x00000000]
[08:16:15.726]                    __var port    = 0;
[08:16:15.727]                      // -> [port <= 0x00000000]
[08:16:15.727]                    __var portAdr = 0;
[08:16:15.727]                      // -> [portAdr <= 0x00000000]
[08:16:15.727]                    __var pos     = 0;
[08:16:15.728]                      // -> [pos <= 0x00000000]
[08:16:15.729]                    __var SWO_Pin = 0x00010003;          // PB3
[08:16:15.729]                      // -> [SWO_Pin <= 0x00010003]
[08:16:15.729]                  </block>
[08:16:15.729]                  <block atomic="false" info="configure SWO">
[08:16:15.730]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[08:16:15.730]                      // -> [pin <= 0x00000003]
[08:16:15.730]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[08:16:15.731]                      // -> [port <= 0x00000001]
[08:16:15.731]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[08:16:15.731]                      // -> [portAdr <= 0x40020400]
[08:16:15.731]                    pos = pin * 2;
[08:16:15.732]                      // -> [pos <= 0x00000006]
[08:16:15.732]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[08:16:15.733]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[08:16:15.735]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:15.735]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[08:16:15.737]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[08:16:15.738]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:15.739]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[08:16:15.740]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[08:16:15.742]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:15.742]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[08:16:15.744]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[08:16:15.746]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:15.746]                  </block>
[08:16:15.746]                  <control if="pin <  8" while="" timeout="0" info="">
[08:16:15.746]                    // if-block "pin <  8"
[08:16:15.746]                      // =>  TRUE
[08:16:15.746]                    <block atomic="false" info="">
[08:16:15.747]                      pos = ((pin    ) & 7) * 4;
[08:16:15.748]                        // -> [pos <= 0x0000000C]
[08:16:15.748]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[08:16:15.749]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[08:16:15.751]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:15.752]                    </block>
[08:16:15.752]                    // end if-block "pin <  8"
[08:16:15.752]                  </control>
[08:16:15.752]                  <control if="pin >= 8" while="" timeout="0" info="">
[08:16:15.753]                    // if-block "pin >= 8"
[08:16:15.753]                      // =>  FALSE
[08:16:15.753]                    // skip if-block "pin >= 8"
[08:16:15.753]                  </control>
[08:16:15.754]                </sequence>
[08:16:15.754]            </block>
[08:16:15.754]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[08:16:15.755]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[08:16:15.757]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[08:16:15.757]            </block>
[08:16:15.757]          </sequence>
[08:16:15.758]      </block>
[08:16:15.758]      // end if-block "traceSWO"
[08:16:15.758]    </control>
[08:16:15.758]    <control if="traceTPIU" while="" timeout="0" info="">
[08:16:15.759]      // if-block "traceTPIU"
[08:16:15.759]        // =>  FALSE
[08:16:15.760]      // skip if-block "traceTPIU"
[08:16:15.760]    </control>
[08:16:15.760]  </sequence>
[08:16:15.760]  
[08:39:46.389]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[08:39:46.389]  
[08:39:46.435]  <debugvars>
[08:39:46.436]    // Pre-defined
[08:39:46.436]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[08:39:46.437]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[08:39:46.437]    __dp=0x00000000
[08:39:46.437]    __ap=0x00000000
[08:39:46.438]    __traceout=0x00000001      (SWO Trace)
[08:39:46.438]    __errorcontrol=0x00000000  (Skip Errors="False")
[08:39:46.438]    __FlashAddr=0x00000000
[08:39:46.439]    __FlashLen=0x00000000
[08:39:46.439]    __FlashArg=0x00000000
[08:39:46.439]    __FlashOp=0x00000000
[08:39:46.440]    __Result=0x00000000
[08:39:46.440]    
[08:39:46.440]    // User-defined
[08:39:46.441]    DbgMCU_CR=0x00000007
[08:39:46.441]    DbgMCU_APB1_Fz=0x00000000
[08:39:46.441]    DbgMCU_APB2_Fz=0x00000000
[08:39:46.442]    TraceClk_Pin=0x00040002
[08:39:46.442]    TraceD0_Pin=0x00040003
[08:39:46.443]    TraceD1_Pin=0x00040004
[08:39:46.443]    TraceD2_Pin=0x00040005
[08:39:46.443]    TraceD3_Pin=0x00040006
[08:39:46.444]  </debugvars>
[08:39:46.444]  
[08:39:46.444]  <sequence name="TraceStop" Pname="" disable="false" info="">
[08:39:46.444]    <block atomic="false" info="">
[08:39:46.445]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[08:39:46.445]        // -> [traceSWO <= 0x00000001]
[08:39:46.445]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[08:39:46.445]        // -> [traceTPIU <= 0x00000000]
[08:39:46.446]    </block>
[08:39:46.446]    <control if="traceSWO" while="" timeout="0" info="">
[08:39:46.446]      // if-block "traceSWO"
[08:39:46.446]        // =>  TRUE
[08:39:46.447]      <block atomic="false" info="">
[08:39:46.447]        Sequence("DisableTraceSWO");
[08:39:46.447]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[08:39:46.447]            <block atomic="false" info="">
[08:39:46.448]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[08:39:46.448]                // -> [dbgmcu_val <= 0x00000000]
[08:39:46.448]            </block>
[08:39:46.449]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[08:39:46.449]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[08:39:46.451]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[08:39:46.451]                // -> [dbgmcu_val <= 0x00000007]
[08:39:46.451]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[08:39:46.453]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[08:39:46.453]            </block>
[08:39:46.453]          </sequence>
[08:39:46.454]      </block>
[08:39:46.454]      // end if-block "traceSWO"
[08:39:46.454]    </control>
[08:39:46.455]    <control if="traceTPIU" while="" timeout="0" info="">
[08:39:46.455]      // if-block "traceTPIU"
[08:39:46.456]        // =>  FALSE
[08:39:46.456]      // skip if-block "traceTPIU"
[08:39:46.456]    </control>
[08:39:46.456]  </sequence>
[08:39:46.457]  
[08:40:41.281]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[08:40:41.281]  
[08:40:41.329]  <debugvars>
[08:40:41.330]    // Pre-defined
[08:40:41.330]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[08:40:41.330]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[08:40:41.332]    __dp=0x00000000
[08:40:41.333]    __ap=0x00000000
[08:40:41.333]    __traceout=0x00000001      (SWO Trace)
[08:40:41.334]    __errorcontrol=0x00000000  (Skip Errors="False")
[08:40:41.334]    __FlashAddr=0x00000000
[08:40:41.335]    __FlashLen=0x00000000
[08:40:41.335]    __FlashArg=0x00000000
[08:40:41.335]    __FlashOp=0x00000000
[08:40:41.336]    __Result=0x00000000
[08:40:41.336]    
[08:40:41.336]    // User-defined
[08:40:41.337]    DbgMCU_CR=0x00000007
[08:40:41.337]    DbgMCU_APB1_Fz=0x00000000
[08:40:41.337]    DbgMCU_APB2_Fz=0x00000000
[08:40:41.337]    TraceClk_Pin=0x00040002
[08:40:41.338]    TraceD0_Pin=0x00040003
[08:40:41.338]    TraceD1_Pin=0x00040004
[08:40:41.338]    TraceD2_Pin=0x00040005
[08:40:41.339]    TraceD3_Pin=0x00040006
[08:40:41.339]  </debugvars>
[08:40:41.339]  
[08:40:41.339]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[08:40:41.340]    <block atomic="false" info="">
[08:40:41.340]      Sequence("CheckID");
[08:40:41.340]        <sequence name="CheckID" Pname="" disable="false" info="">
[08:40:41.340]          <block atomic="false" info="">
[08:40:41.341]            __var pidr1 = 0;
[08:40:41.341]              // -> [pidr1 <= 0x00000000]
[08:40:41.341]            __var pidr2 = 0;
[08:40:41.341]              // -> [pidr2 <= 0x00000000]
[08:40:41.342]            __var jep106id = 0;
[08:40:41.342]              // -> [jep106id <= 0x00000000]
[08:40:41.342]            __var ROMTableBase = 0;
[08:40:41.342]              // -> [ROMTableBase <= 0x00000000]
[08:40:41.343]            __ap = 0;      // AHB-AP
[08:40:41.343]              // -> [__ap <= 0x00000000]
[08:40:41.343]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[08:40:41.344]              // -> [ReadAP(0x000000F8) => 0xE00FF003]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.345]              // -> [ROMTableBase <= 0xE00FF000]
[08:40:41.345]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[08:40:41.346]              // -> [Read32(0xE00FFFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.347]              // -> [pidr1 <= 0x00000004]
[08:40:41.347]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[08:40:41.349]              // -> [Read32(0xE00FFFE8) => 0x0000000A]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.350]              // -> [pidr2 <= 0x0000000A]
[08:40:41.350]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[08:40:41.350]              // -> [jep106id <= 0x00000020]
[08:40:41.350]          </block>
[08:40:41.351]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[08:40:41.351]            // if-block "jep106id != 0x20"
[08:40:41.351]              // =>  FALSE
[08:40:41.352]            // skip if-block "jep106id != 0x20"
[08:40:41.352]          </control>
[08:40:41.352]        </sequence>
[08:40:41.353]    </block>
[08:40:41.353]  </sequence>
[08:40:41.353]  
[08:40:41.354]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[08:40:41.354]  
[08:40:41.354]  <debugvars>
[08:40:41.354]    // Pre-defined
[08:40:41.354]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[08:40:41.355]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[08:40:41.355]    __dp=0x00000000
[08:40:41.355]    __ap=0x00000000
[08:40:41.355]    __traceout=0x00000001      (SWO Trace)
[08:40:41.356]    __errorcontrol=0x00000000  (Skip Errors="False")
[08:40:41.356]    __FlashAddr=0x00000000
[08:40:41.356]    __FlashLen=0x00000000
[08:40:41.356]    __FlashArg=0x00000000
[08:40:41.357]    __FlashOp=0x00000000
[08:40:41.357]    __Result=0x00000000
[08:40:41.357]    
[08:40:41.357]    // User-defined
[08:40:41.357]    DbgMCU_CR=0x00000007
[08:40:41.357]    DbgMCU_APB1_Fz=0x00000000
[08:40:41.358]    DbgMCU_APB2_Fz=0x00000000
[08:40:41.358]    TraceClk_Pin=0x00040002
[08:40:41.358]    TraceD0_Pin=0x00040003
[08:40:41.358]    TraceD1_Pin=0x00040004
[08:40:41.359]    TraceD2_Pin=0x00040005
[08:40:41.359]    TraceD3_Pin=0x00040006
[08:40:41.359]  </debugvars>
[08:40:41.359]  
[08:40:41.359]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[08:40:41.359]    <block atomic="false" info="">
[08:40:41.359]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[08:40:41.360]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.361]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[08:40:41.362]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.362]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[08:40:41.362]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.362]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[08:40:41.364]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.364]    </block>
[08:40:41.364]  </sequence>
[08:40:41.364]  
[08:40:41.394]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[08:40:41.394]  
[08:40:41.394]  <debugvars>
[08:40:41.395]    // Pre-defined
[08:40:41.395]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[08:40:41.395]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[08:40:41.395]    __dp=0x00000000
[08:40:41.395]    __ap=0x00000000
[08:40:41.395]    __traceout=0x00000001      (SWO Trace)
[08:40:41.395]    __errorcontrol=0x00000000  (Skip Errors="False")
[08:40:41.395]    __FlashAddr=0x00000000
[08:40:41.395]    __FlashLen=0x00000000
[08:40:41.396]    __FlashArg=0x00000000
[08:40:41.396]    __FlashOp=0x00000000
[08:40:41.396]    __Result=0x00000000
[08:40:41.396]    
[08:40:41.396]    // User-defined
[08:40:41.396]    DbgMCU_CR=0x00000007
[08:40:41.396]    DbgMCU_APB1_Fz=0x00000000
[08:40:41.396]    DbgMCU_APB2_Fz=0x00000000
[08:40:41.396]    TraceClk_Pin=0x00040002
[08:40:41.396]    TraceD0_Pin=0x00040003
[08:40:41.397]    TraceD1_Pin=0x00040004
[08:40:41.397]    TraceD2_Pin=0x00040005
[08:40:41.397]    TraceD3_Pin=0x00040006
[08:40:41.397]  </debugvars>
[08:40:41.397]  
[08:40:41.397]  <sequence name="TraceStart" Pname="" disable="false" info="">
[08:40:41.397]    <block atomic="false" info="">
[08:40:41.397]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[08:40:41.397]        // -> [traceSWO <= 0x00000001]
[08:40:41.398]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[08:40:41.398]        // -> [traceTPIU <= 0x00000000]
[08:40:41.398]    </block>
[08:40:41.398]    <control if="traceSWO" while="" timeout="0" info="">
[08:40:41.398]      // if-block "traceSWO"
[08:40:41.398]        // =>  TRUE
[08:40:41.398]      <block atomic="false" info="">
[08:40:41.398]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[08:40:41.398]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[08:40:41.398]            <block atomic="false" info="">
[08:40:41.399]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[08:40:41.399]                // -> [dbgmcu_val <= 0x00000000]
[08:40:41.399]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[08:40:41.399]                // -> [dbgmcu_trace_val <= 0x00000000]
[08:40:41.399]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[08:40:41.399]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.400]                // -> [dbgmcu_val <= 0x00000007]
[08:40:41.400]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[08:40:41.400]                // -> [dbgmcu_trace_val <= 0x00000020]
[08:40:41.400]              Sequence("ConfigureTraceSWOPin");
[08:40:41.400]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[08:40:41.400]                  <block atomic="false" info="">
[08:40:41.400]                    __var pin     = 0;
[08:40:41.400]                      // -> [pin <= 0x00000000]
[08:40:41.400]                    __var port    = 0;
[08:40:41.401]                      // -> [port <= 0x00000000]
[08:40:41.401]                    __var portAdr = 0;
[08:40:41.401]                      // -> [portAdr <= 0x00000000]
[08:40:41.401]                    __var pos     = 0;
[08:40:41.401]                      // -> [pos <= 0x00000000]
[08:40:41.401]                    __var SWO_Pin = 0x00010003;          // PB3
[08:40:41.401]                      // -> [SWO_Pin <= 0x00010003]
[08:40:41.401]                  </block>
[08:40:41.401]                  <block atomic="false" info="configure SWO">
[08:40:41.401]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[08:40:41.402]                      // -> [pin <= 0x00000003]
[08:40:41.402]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[08:40:41.402]                      // -> [port <= 0x00000001]
[08:40:41.402]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[08:40:41.402]                      // -> [portAdr <= 0x40020400]
[08:40:41.402]                    pos = pin * 2;
[08:40:41.402]                      // -> [pos <= 0x00000006]
[08:40:41.402]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[08:40:41.404]                      // -> [Read32(0x40023830) => 0x00000007]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.404]                      // -> [Write32(0x40023830, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.404]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[08:40:41.405]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.405]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.405]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[08:40:41.406]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.406]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.407]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[08:40:41.407]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.408]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.408]                  </block>
[08:40:41.408]                  <control if="pin <  8" while="" timeout="0" info="">
[08:40:41.408]                    // if-block "pin <  8"
[08:40:41.409]                      // =>  TRUE
[08:40:41.409]                    <block atomic="false" info="">
[08:40:41.409]                      pos = ((pin    ) & 7) * 4;
[08:40:41.409]                        // -> [pos <= 0x0000000C]
[08:40:41.409]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[08:40:41.410]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.411]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.411]                    </block>
[08:40:41.411]                    // end if-block "pin <  8"
[08:40:41.411]                  </control>
[08:40:41.411]                  <control if="pin >= 8" while="" timeout="0" info="">
[08:40:41.411]                    // if-block "pin >= 8"
[08:40:41.411]                      // =>  FALSE
[08:40:41.411]                    // skip if-block "pin >= 8"
[08:40:41.411]                  </control>
[08:40:41.412]                </sequence>
[08:40:41.412]            </block>
[08:40:41.412]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[08:40:41.412]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[08:40:41.413]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.413]            </block>
[08:40:41.413]          </sequence>
[08:40:41.413]      </block>
[08:40:41.413]      // end if-block "traceSWO"
[08:40:41.413]    </control>
[08:40:41.413]    <control if="traceTPIU" while="" timeout="0" info="">
[08:40:41.413]      // if-block "traceTPIU"
[08:40:41.414]        // =>  FALSE
[08:40:41.414]      // skip if-block "traceTPIU"
[08:40:41.414]    </control>
[08:40:41.414]  </sequence>
[08:40:41.414]  
[08:40:41.430]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[08:40:41.430]  
[08:40:41.430]  <debugvars>
[08:40:41.430]    // Pre-defined
[08:40:41.430]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[08:40:41.430]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[08:40:41.431]    __dp=0x00000000
[08:40:41.431]    __ap=0x00000000
[08:40:41.431]    __traceout=0x00000001      (SWO Trace)
[08:40:41.431]    __errorcontrol=0x00000000  (Skip Errors="False")
[08:40:41.431]    __FlashAddr=0x00000000
[08:40:41.431]    __FlashLen=0x00000000
[08:40:41.431]    __FlashArg=0x00000000
[08:40:41.432]    __FlashOp=0x00000000
[08:40:41.432]    __Result=0x00000000
[08:40:41.432]    
[08:40:41.432]    // User-defined
[08:40:41.432]    DbgMCU_CR=0x00000007
[08:40:41.432]    DbgMCU_APB1_Fz=0x00000000
[08:40:41.432]    DbgMCU_APB2_Fz=0x00000000
[08:40:41.432]    TraceClk_Pin=0x00040002
[08:40:41.433]    TraceD0_Pin=0x00040003
[08:40:41.433]    TraceD1_Pin=0x00040004
[08:40:41.433]    TraceD2_Pin=0x00040005
[08:40:41.433]    TraceD3_Pin=0x00040006
[08:40:41.433]  </debugvars>
[08:40:41.433]  
[08:40:41.433]  <sequence name="TraceStart" Pname="" disable="false" info="">
[08:40:41.434]    <block atomic="false" info="">
[08:40:41.434]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[08:40:41.434]        // -> [traceSWO <= 0x00000001]
[08:40:41.434]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[08:40:41.434]        // -> [traceTPIU <= 0x00000000]
[08:40:41.435]    </block>
[08:40:41.435]    <control if="traceSWO" while="" timeout="0" info="">
[08:40:41.435]      // if-block "traceSWO"
[08:40:41.435]        // =>  TRUE
[08:40:41.436]      <block atomic="false" info="">
[08:40:41.436]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[08:40:41.436]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[08:40:41.436]            <block atomic="false" info="">
[08:40:41.436]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[08:40:41.436]                // -> [dbgmcu_val <= 0x00000000]
[08:40:41.436]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[08:40:41.437]                // -> [dbgmcu_trace_val <= 0x00000000]
[08:40:41.437]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[08:40:41.438]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.439]                // -> [dbgmcu_val <= 0x00000007]
[08:40:41.439]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[08:40:41.439]                // -> [dbgmcu_trace_val <= 0x00000020]
[08:40:41.439]              Sequence("ConfigureTraceSWOPin");
[08:40:41.439]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[08:40:41.439]                  <block atomic="false" info="">
[08:40:41.440]                    __var pin     = 0;
[08:40:41.440]                      // -> [pin <= 0x00000000]
[08:40:41.440]                    __var port    = 0;
[08:40:41.440]                      // -> [port <= 0x00000000]
[08:40:41.440]                    __var portAdr = 0;
[08:40:41.440]                      // -> [portAdr <= 0x00000000]
[08:40:41.440]                    __var pos     = 0;
[08:40:41.441]                      // -> [pos <= 0x00000000]
[08:40:41.441]                    __var SWO_Pin = 0x00010003;          // PB3
[08:40:41.441]                      // -> [SWO_Pin <= 0x00010003]
[08:40:41.441]                  </block>
[08:40:41.441]                  <block atomic="false" info="configure SWO">
[08:40:41.441]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[08:40:41.441]                      // -> [pin <= 0x00000003]
[08:40:41.442]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[08:40:41.442]                      // -> [port <= 0x00000001]
[08:40:41.442]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[08:40:41.442]                      // -> [portAdr <= 0x40020400]
[08:40:41.442]                    pos = pin * 2;
[08:40:41.442]                      // -> [pos <= 0x00000006]
[08:40:41.443]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[08:40:41.444]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.445]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.445]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[08:40:41.445]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.446]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.447]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[08:40:41.447]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.449]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.450]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[08:40:41.450]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.451]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.452]                  </block>
[08:40:41.452]                  <control if="pin <  8" while="" timeout="0" info="">
[08:40:41.452]                    // if-block "pin <  8"
[08:40:41.453]                      // =>  TRUE
[08:40:41.453]                    <block atomic="false" info="">
[08:40:41.453]                      pos = ((pin    ) & 7) * 4;
[08:40:41.453]                        // -> [pos <= 0x0000000C]
[08:40:41.454]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[08:40:41.455]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.456]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.456]                    </block>
[08:40:41.456]                    // end if-block "pin <  8"
[08:40:41.456]                  </control>
[08:40:41.456]                  <control if="pin >= 8" while="" timeout="0" info="">
[08:40:41.457]                    // if-block "pin >= 8"
[08:40:41.457]                      // =>  FALSE
[08:40:41.457]                    // skip if-block "pin >= 8"
[08:40:41.457]                  </control>
[08:40:41.457]                </sequence>
[08:40:41.458]            </block>
[08:40:41.458]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[08:40:41.458]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[08:40:41.459]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:41.459]            </block>
[08:40:41.459]          </sequence>
[08:40:41.459]      </block>
[08:40:41.459]      // end if-block "traceSWO"
[08:40:41.459]    </control>
[08:40:41.459]    <control if="traceTPIU" while="" timeout="0" info="">
[08:40:41.460]      // if-block "traceTPIU"
[08:40:41.460]        // =>  FALSE
[08:40:41.460]      // skip if-block "traceTPIU"
[08:40:41.460]    </control>
[08:40:41.460]  </sequence>
[08:40:41.460]  
[08:40:42.296]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[08:40:42.296]  
[08:40:42.343]  <debugvars>
[08:40:42.344]    // Pre-defined
[08:40:42.344]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[08:40:42.344]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[08:40:42.344]    __dp=0x00000000
[08:40:42.344]    __ap=0x00000000
[08:40:42.344]    __traceout=0x00000001      (SWO Trace)
[08:40:42.345]    __errorcontrol=0x00000000  (Skip Errors="False")
[08:40:42.346]    __FlashAddr=0x00000000
[08:40:42.346]    __FlashLen=0x00000000
[08:40:42.346]    __FlashArg=0x00000000
[08:40:42.346]    __FlashOp=0x00000000
[08:40:42.347]    __Result=0x00000000
[08:40:42.347]    
[08:40:42.347]    // User-defined
[08:40:42.347]    DbgMCU_CR=0x00000007
[08:40:42.347]    DbgMCU_APB1_Fz=0x00000000
[08:40:42.348]    DbgMCU_APB2_Fz=0x00000000
[08:40:42.348]    TraceClk_Pin=0x00040002
[08:40:42.348]    TraceD0_Pin=0x00040003
[08:40:42.348]    TraceD1_Pin=0x00040004
[08:40:42.349]    TraceD2_Pin=0x00040005
[08:40:42.349]    TraceD3_Pin=0x00040006
[08:40:42.349]  </debugvars>
[08:40:42.349]  
[08:40:42.350]  <sequence name="TraceStart" Pname="" disable="false" info="">
[08:40:42.350]    <block atomic="false" info="">
[08:40:42.351]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[08:40:42.351]        // -> [traceSWO <= 0x00000001]
[08:40:42.351]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[08:40:42.352]        // -> [traceTPIU <= 0x00000000]
[08:40:42.352]    </block>
[08:40:42.352]    <control if="traceSWO" while="" timeout="0" info="">
[08:40:42.353]      // if-block "traceSWO"
[08:40:42.353]        // =>  TRUE
[08:40:42.353]      <block atomic="false" info="">
[08:40:42.354]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[08:40:42.354]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[08:40:42.354]            <block atomic="false" info="">
[08:40:42.355]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[08:40:42.355]                // -> [dbgmcu_val <= 0x00000000]
[08:40:42.355]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[08:40:42.355]                // -> [dbgmcu_trace_val <= 0x00000000]
[08:40:42.356]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[08:40:42.357]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[08:40:42.357]                // -> [dbgmcu_val <= 0x00000007]
[08:40:42.358]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[08:40:42.358]                // -> [dbgmcu_trace_val <= 0x00000020]
[08:40:42.358]              Sequence("ConfigureTraceSWOPin");
[08:40:42.358]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[08:40:42.359]                  <block atomic="false" info="">
[08:40:42.359]                    __var pin     = 0;
[08:40:42.359]                      // -> [pin <= 0x00000000]
[08:40:42.359]                    __var port    = 0;
[08:40:42.359]                      // -> [port <= 0x00000000]
[08:40:42.360]                    __var portAdr = 0;
[08:40:42.360]                      // -> [portAdr <= 0x00000000]
[08:40:42.360]                    __var pos     = 0;
[08:40:42.360]                      // -> [pos <= 0x00000000]
[08:40:42.361]                    __var SWO_Pin = 0x00010003;          // PB3
[08:40:42.361]                      // -> [SWO_Pin <= 0x00010003]
[08:40:42.361]                  </block>
[08:40:42.361]                  <block atomic="false" info="configure SWO">
[08:40:42.362]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[08:40:42.362]                      // -> [pin <= 0x00000003]
[08:40:42.362]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[08:40:42.362]                      // -> [port <= 0x00000001]
[08:40:42.363]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[08:40:42.363]                      // -> [portAdr <= 0x40020400]
[08:40:42.363]                    pos = pin * 2;
[08:40:42.363]                      // -> [pos <= 0x00000006]
[08:40:42.363]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[08:40:42.365]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[08:40:42.366]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:42.367]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[08:40:42.368]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[08:40:42.369]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:42.370]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[08:40:42.371]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[08:40:42.372]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:42.373]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[08:40:42.374]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[08:40:42.375]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:42.375]                  </block>
[08:40:42.375]                  <control if="pin <  8" while="" timeout="0" info="">
[08:40:42.376]                    // if-block "pin <  8"
[08:40:42.376]                      // =>  TRUE
[08:40:42.376]                    <block atomic="false" info="">
[08:40:42.376]                      pos = ((pin    ) & 7) * 4;
[08:40:42.377]                        // -> [pos <= 0x0000000C]
[08:40:42.378]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[08:40:42.379]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[08:40:42.380]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:42.381]                    </block>
[08:40:42.381]                    // end if-block "pin <  8"
[08:40:42.381]                  </control>
[08:40:42.382]                  <control if="pin >= 8" while="" timeout="0" info="">
[08:40:42.382]                    // if-block "pin >= 8"
[08:40:42.382]                      // =>  FALSE
[08:40:42.383]                    // skip if-block "pin >= 8"
[08:40:42.383]                  </control>
[08:40:42.383]                </sequence>
[08:40:42.383]            </block>
[08:40:42.384]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[08:40:42.384]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[08:40:42.386]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[08:40:42.386]            </block>
[08:40:42.386]          </sequence>
[08:40:42.386]      </block>
[08:40:42.387]      // end if-block "traceSWO"
[08:40:42.387]    </control>
[08:40:42.387]    <control if="traceTPIU" while="" timeout="0" info="">
[08:40:42.387]      // if-block "traceTPIU"
[08:40:42.388]        // =>  FALSE
[08:40:42.388]      // skip if-block "traceTPIU"
[08:40:42.388]    </control>
[08:40:42.388]  </sequence>
[08:40:42.388]  
[09:05:58.014]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[09:05:58.014]  
[09:05:58.062]  <debugvars>
[09:05:58.062]    // Pre-defined
[09:05:58.063]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[09:05:58.064]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[09:05:58.064]    __dp=0x00000000
[09:05:58.064]    __ap=0x00000000
[09:05:58.064]    __traceout=0x00000001      (SWO Trace)
[09:05:58.065]    __errorcontrol=0x00000000  (Skip Errors="False")
[09:05:58.065]    __FlashAddr=0x00000000
[09:05:58.065]    __FlashLen=0x00000000
[09:05:58.065]    __FlashArg=0x00000000
[09:05:58.066]    __FlashOp=0x00000000
[09:05:58.066]    __Result=0x00000000
[09:05:58.066]    
[09:05:58.066]    // User-defined
[09:05:58.067]    DbgMCU_CR=0x00000007
[09:05:58.068]    DbgMCU_APB1_Fz=0x00000000
[09:05:58.068]    DbgMCU_APB2_Fz=0x00000000
[09:05:58.068]    TraceClk_Pin=0x00040002
[09:05:58.068]    TraceD0_Pin=0x00040003
[09:05:58.069]    TraceD1_Pin=0x00040004
[09:05:58.069]    TraceD2_Pin=0x00040005
[09:05:58.069]    TraceD3_Pin=0x00040006
[09:05:58.070]  </debugvars>
[09:05:58.070]  
[09:05:58.070]  <sequence name="TraceStop" Pname="" disable="false" info="">
[09:05:58.070]    <block atomic="false" info="">
[09:05:58.071]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[09:05:58.072]        // -> [traceSWO <= 0x00000001]
[09:05:58.072]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[09:05:58.072]        // -> [traceTPIU <= 0x00000000]
[09:05:58.073]    </block>
[09:05:58.073]    <control if="traceSWO" while="" timeout="0" info="">
[09:05:58.073]      // if-block "traceSWO"
[09:05:58.073]        // =>  TRUE
[09:05:58.074]      <block atomic="false" info="">
[09:05:58.074]        Sequence("DisableTraceSWO");
[09:05:58.074]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[09:05:58.074]            <block atomic="false" info="">
[09:05:58.075]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[09:05:58.075]                // -> [dbgmcu_val <= 0x00000000]
[09:05:58.075]            </block>
[09:05:58.075]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[09:05:58.076]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[09:05:58.077]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[09:05:58.077]                // -> [dbgmcu_val <= 0x00000007]
[09:05:58.078]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[09:05:58.079]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[09:05:58.079]            </block>
[09:05:58.080]          </sequence>
[09:05:58.080]      </block>
[09:05:58.080]      // end if-block "traceSWO"
[09:05:58.081]    </control>
[09:05:58.081]    <control if="traceTPIU" while="" timeout="0" info="">
[09:05:58.081]      // if-block "traceTPIU"
[09:05:58.082]        // =>  FALSE
[09:05:58.082]      // skip if-block "traceTPIU"
[09:05:58.083]    </control>
[09:05:58.083]  </sequence>
[09:05:58.083]  
[09:06:14.513]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[09:06:14.513]  
[09:06:14.560]  <debugvars>
[09:06:14.561]    // Pre-defined
[09:06:14.561]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[09:06:14.562]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[09:06:14.562]    __dp=0x00000000
[09:06:14.563]    __ap=0x00000000
[09:06:14.563]    __traceout=0x00000001      (SWO Trace)
[09:06:14.563]    __errorcontrol=0x00000000  (Skip Errors="False")
[09:06:14.563]    __FlashAddr=0x00000000
[09:06:14.564]    __FlashLen=0x00000000
[09:06:14.564]    __FlashArg=0x00000000
[09:06:14.564]    __FlashOp=0x00000000
[09:06:14.564]    __Result=0x00000000
[09:06:14.564]    
[09:06:14.564]    // User-defined
[09:06:14.565]    DbgMCU_CR=0x00000007
[09:06:14.565]    DbgMCU_APB1_Fz=0x00000000
[09:06:14.565]    DbgMCU_APB2_Fz=0x00000000
[09:06:14.567]    TraceClk_Pin=0x00040002
[09:06:14.567]    TraceD0_Pin=0x00040003
[09:06:14.567]    TraceD1_Pin=0x00040004
[09:06:14.567]    TraceD2_Pin=0x00040005
[09:06:14.567]    TraceD3_Pin=0x00040006
[09:06:14.568]  </debugvars>
[09:06:14.568]  
[09:06:14.570]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[09:06:14.570]    <block atomic="false" info="">
[09:06:14.570]      Sequence("CheckID");
[09:06:14.570]        <sequence name="CheckID" Pname="" disable="false" info="">
[09:06:14.571]          <block atomic="false" info="">
[09:06:14.572]            __var pidr1 = 0;
[09:06:14.572]              // -> [pidr1 <= 0x00000000]
[09:06:14.572]            __var pidr2 = 0;
[09:06:14.572]              // -> [pidr2 <= 0x00000000]
[09:06:14.572]            __var jep106id = 0;
[09:06:14.573]              // -> [jep106id <= 0x00000000]
[09:06:14.574]            __var ROMTableBase = 0;
[09:06:14.574]              // -> [ROMTableBase <= 0x00000000]
[09:06:14.574]            __ap = 0;      // AHB-AP
[09:06:14.574]              // -> [__ap <= 0x00000000]
[09:06:14.575]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[09:06:14.575]              // -> [ReadAP(0x000000F8) => 0xE00FF003]   (__dp=0x00000000, __ap=0x00000000)
[09:06:14.575]              // -> [ROMTableBase <= 0xE00FF000]
[09:06:14.576]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[09:06:14.577]              // -> [Read32(0xE00FFFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[09:06:14.579]              // -> [pidr1 <= 0x00000004]
[09:06:14.579]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[09:06:14.579]              // -> [Read32(0xE00FFFE8) => 0x0000000A]   (__dp=0x00000000, __ap=0x00000000)
[09:06:14.580]              // -> [pidr2 <= 0x0000000A]
[09:06:14.580]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[09:06:14.581]              // -> [jep106id <= 0x00000020]
[09:06:14.581]          </block>
[09:06:14.581]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[09:06:14.582]            // if-block "jep106id != 0x20"
[09:06:14.582]              // =>  FALSE
[09:06:14.582]            // skip if-block "jep106id != 0x20"
[09:06:14.582]          </control>
[09:06:14.583]        </sequence>
[09:06:14.584]    </block>
[09:06:14.584]  </sequence>
[09:06:14.584]  
[09:06:14.585]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[09:06:14.585]  
[09:06:14.586]  <debugvars>
[09:06:14.586]    // Pre-defined
[09:06:14.586]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[09:06:14.587]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[09:06:14.587]    __dp=0x00000000
[09:06:14.587]    __ap=0x00000000
[09:06:14.587]    __traceout=0x00000001      (SWO Trace)
[09:06:14.588]    __errorcontrol=0x00000000  (Skip Errors="False")
[09:06:14.588]    __FlashAddr=0x00000000
[09:06:14.588]    __FlashLen=0x00000000
[09:06:14.588]    __FlashArg=0x00000000
[09:06:14.589]    __FlashOp=0x00000000
[09:06:14.589]    __Result=0x00000000
[09:06:14.589]    
[09:06:14.589]    // User-defined
[09:06:14.590]    DbgMCU_CR=0x00000007
[09:06:14.590]    DbgMCU_APB1_Fz=0x00000000
[09:06:14.590]    DbgMCU_APB2_Fz=0x00000000
[09:06:14.590]    TraceClk_Pin=0x00040002
[09:06:14.591]    TraceD0_Pin=0x00040003
[09:06:14.591]    TraceD1_Pin=0x00040004
[09:06:14.591]    TraceD2_Pin=0x00040005
[09:06:14.591]    TraceD3_Pin=0x00040006
[09:06:14.592]  </debugvars>
[09:06:14.592]  
[09:06:14.592]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[09:06:14.592]    <block atomic="false" info="">
[09:06:14.593]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[09:06:14.595]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:14.595]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[09:06:14.597]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:14.598]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[09:06:14.599]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:14.600]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[09:06:14.601]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:14.602]    </block>
[09:06:14.602]  </sequence>
[09:06:14.602]  
[09:06:16.548]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[09:06:16.548]  
[09:06:16.596]  <debugvars>
[09:06:16.596]    // Pre-defined
[09:06:16.597]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[09:06:16.597]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[09:06:16.598]    __dp=0x00000000
[09:06:16.598]    __ap=0x00000000
[09:06:16.599]    __traceout=0x00000001      (SWO Trace)
[09:06:16.599]    __errorcontrol=0x00000000  (Skip Errors="False")
[09:06:16.599]    __FlashAddr=0x00000000
[09:06:16.600]    __FlashLen=0x00000000
[09:06:16.600]    __FlashArg=0x00000000
[09:06:16.600]    __FlashOp=0x00000000
[09:06:16.601]    __Result=0x00000000
[09:06:16.601]    
[09:06:16.601]    // User-defined
[09:06:16.601]    DbgMCU_CR=0x00000007
[09:06:16.602]    DbgMCU_APB1_Fz=0x00000000
[09:06:16.603]    DbgMCU_APB2_Fz=0x00000000
[09:06:16.603]    TraceClk_Pin=0x00040002
[09:06:16.603]    TraceD0_Pin=0x00040003
[09:06:16.604]    TraceD1_Pin=0x00040004
[09:06:16.604]    TraceD2_Pin=0x00040005
[09:06:16.605]    TraceD3_Pin=0x00040006
[09:06:16.605]  </debugvars>
[09:06:16.606]  
[09:06:16.606]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[09:06:16.606]    <block atomic="false" info="">
[09:06:16.607]      Sequence("CheckID");
[09:06:16.607]        <sequence name="CheckID" Pname="" disable="false" info="">
[09:06:16.607]          <block atomic="false" info="">
[09:06:16.607]            __var pidr1 = 0;
[09:06:16.608]              // -> [pidr1 <= 0x00000000]
[09:06:16.608]            __var pidr2 = 0;
[09:06:16.608]              // -> [pidr2 <= 0x00000000]
[09:06:16.608]            __var jep106id = 0;
[09:06:16.609]              // -> [jep106id <= 0x00000000]
[09:06:16.609]            __var ROMTableBase = 0;
[09:06:16.609]              // -> [ROMTableBase <= 0x00000000]
[09:06:16.610]            __ap = 0;      // AHB-AP
[09:06:16.610]              // -> [__ap <= 0x00000000]
[09:06:16.610]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[09:06:16.612]              // -> [ReadAP(0x000000F8) => 0xE00FF003]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.612]              // -> [ROMTableBase <= 0xE00FF000]
[09:06:16.612]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[09:06:16.614]              // -> [Read32(0xE00FFFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.614]              // -> [pidr1 <= 0x00000004]
[09:06:16.615]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[09:06:16.616]              // -> [Read32(0xE00FFFE8) => 0x0000000A]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.616]              // -> [pidr2 <= 0x0000000A]
[09:06:16.617]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[09:06:16.617]              // -> [jep106id <= 0x00000020]
[09:06:16.618]          </block>
[09:06:16.618]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[09:06:16.618]            // if-block "jep106id != 0x20"
[09:06:16.619]              // =>  FALSE
[09:06:16.619]            // skip if-block "jep106id != 0x20"
[09:06:16.619]          </control>
[09:06:16.619]        </sequence>
[09:06:16.620]    </block>
[09:06:16.620]  </sequence>
[09:06:16.620]  
[09:06:16.620]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[09:06:16.621]  
[09:06:16.621]  <debugvars>
[09:06:16.621]    // Pre-defined
[09:06:16.621]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[09:06:16.622]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[09:06:16.622]    __dp=0x00000000
[09:06:16.622]    __ap=0x00000000
[09:06:16.622]    __traceout=0x00000001      (SWO Trace)
[09:06:16.623]    __errorcontrol=0x00000000  (Skip Errors="False")
[09:06:16.623]    __FlashAddr=0x00000000
[09:06:16.623]    __FlashLen=0x00000000
[09:06:16.623]    __FlashArg=0x00000000
[09:06:16.624]    __FlashOp=0x00000000
[09:06:16.624]    __Result=0x00000000
[09:06:16.624]    
[09:06:16.624]    // User-defined
[09:06:16.624]    DbgMCU_CR=0x00000007
[09:06:16.625]    DbgMCU_APB1_Fz=0x00000000
[09:06:16.625]    DbgMCU_APB2_Fz=0x00000000
[09:06:16.625]    TraceClk_Pin=0x00040002
[09:06:16.625]    TraceD0_Pin=0x00040003
[09:06:16.626]    TraceD1_Pin=0x00040004
[09:06:16.626]    TraceD2_Pin=0x00040005
[09:06:16.626]    TraceD3_Pin=0x00040006
[09:06:16.626]  </debugvars>
[09:06:16.627]  
[09:06:16.627]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[09:06:16.627]    <block atomic="false" info="">
[09:06:16.628]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[09:06:16.629]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.630]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[09:06:16.632]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.632]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[09:06:16.633]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.634]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[09:06:16.635]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.635]    </block>
[09:06:16.636]  </sequence>
[09:06:16.636]  
[09:06:16.685]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[09:06:16.685]  
[09:06:16.686]  <debugvars>
[09:06:16.686]    // Pre-defined
[09:06:16.686]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[09:06:16.686]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[09:06:16.686]    __dp=0x00000000
[09:06:16.687]    __ap=0x00000000
[09:06:16.687]    __traceout=0x00000001      (SWO Trace)
[09:06:16.687]    __errorcontrol=0x00000000  (Skip Errors="False")
[09:06:16.687]    __FlashAddr=0x00000000
[09:06:16.688]    __FlashLen=0x00000000
[09:06:16.688]    __FlashArg=0x00000000
[09:06:16.689]    __FlashOp=0x00000000
[09:06:16.689]    __Result=0x00000000
[09:06:16.689]    
[09:06:16.689]    // User-defined
[09:06:16.690]    DbgMCU_CR=0x00000007
[09:06:16.690]    DbgMCU_APB1_Fz=0x00000000
[09:06:16.691]    DbgMCU_APB2_Fz=0x00000000
[09:06:16.691]    TraceClk_Pin=0x00040002
[09:06:16.691]    TraceD0_Pin=0x00040003
[09:06:16.692]    TraceD1_Pin=0x00040004
[09:06:16.692]    TraceD2_Pin=0x00040005
[09:06:16.693]    TraceD3_Pin=0x00040006
[09:06:16.693]  </debugvars>
[09:06:16.693]  
[09:06:16.694]  <sequence name="TraceStart" Pname="" disable="false" info="">
[09:06:16.694]    <block atomic="false" info="">
[09:06:16.694]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[09:06:16.694]        // -> [traceSWO <= 0x00000001]
[09:06:16.695]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[09:06:16.695]        // -> [traceTPIU <= 0x00000000]
[09:06:16.695]    </block>
[09:06:16.695]    <control if="traceSWO" while="" timeout="0" info="">
[09:06:16.696]      // if-block "traceSWO"
[09:06:16.696]        // =>  TRUE
[09:06:16.696]      <block atomic="false" info="">
[09:06:16.696]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[09:06:16.697]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[09:06:16.697]            <block atomic="false" info="">
[09:06:16.697]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[09:06:16.697]                // -> [dbgmcu_val <= 0x00000000]
[09:06:16.697]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[09:06:16.698]                // -> [dbgmcu_trace_val <= 0x00000000]
[09:06:16.698]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[09:06:16.700]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.700]                // -> [dbgmcu_val <= 0x00000007]
[09:06:16.700]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[09:06:16.701]                // -> [dbgmcu_trace_val <= 0x00000020]
[09:06:16.701]              Sequence("ConfigureTraceSWOPin");
[09:06:16.701]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[09:06:16.701]                  <block atomic="false" info="">
[09:06:16.702]                    __var pin     = 0;
[09:06:16.702]                      // -> [pin <= 0x00000000]
[09:06:16.702]                    __var port    = 0;
[09:06:16.702]                      // -> [port <= 0x00000000]
[09:06:16.703]                    __var portAdr = 0;
[09:06:16.703]                      // -> [portAdr <= 0x00000000]
[09:06:16.703]                    __var pos     = 0;
[09:06:16.703]                      // -> [pos <= 0x00000000]
[09:06:16.704]                    __var SWO_Pin = 0x00010003;          // PB3
[09:06:16.704]                      // -> [SWO_Pin <= 0x00010003]
[09:06:16.704]                  </block>
[09:06:16.704]                  <block atomic="false" info="configure SWO">
[09:06:16.705]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[09:06:16.705]                      // -> [pin <= 0x00000003]
[09:06:16.705]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[09:06:16.705]                      // -> [port <= 0x00000001]
[09:06:16.706]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[09:06:16.706]                      // -> [portAdr <= 0x40020400]
[09:06:16.706]                    pos = pin * 2;
[09:06:16.706]                      // -> [pos <= 0x00000006]
[09:06:16.707]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[09:06:16.708]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.709]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.710]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[09:06:16.711]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.713]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.713]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[09:06:16.714]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.716]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.716]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[09:06:16.717]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.719]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.719]                  </block>
[09:06:16.719]                  <control if="pin <  8" while="" timeout="0" info="">
[09:06:16.720]                    // if-block "pin <  8"
[09:06:16.720]                      // =>  TRUE
[09:06:16.720]                    <block atomic="false" info="">
[09:06:16.721]                      pos = ((pin    ) & 7) * 4;
[09:06:16.721]                        // -> [pos <= 0x0000000C]
[09:06:16.721]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[09:06:16.723]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.724]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.724]                    </block>
[09:06:16.724]                    // end if-block "pin <  8"
[09:06:16.724]                  </control>
[09:06:16.725]                  <control if="pin >= 8" while="" timeout="0" info="">
[09:06:16.725]                    // if-block "pin >= 8"
[09:06:16.725]                      // =>  FALSE
[09:06:16.725]                    // skip if-block "pin >= 8"
[09:06:16.726]                  </control>
[09:06:16.726]                </sequence>
[09:06:16.727]            </block>
[09:06:16.727]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[09:06:16.727]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[09:06:16.729]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.729]            </block>
[09:06:16.729]          </sequence>
[09:06:16.730]      </block>
[09:06:16.730]      // end if-block "traceSWO"
[09:06:16.730]    </control>
[09:06:16.730]    <control if="traceTPIU" while="" timeout="0" info="">
[09:06:16.731]      // if-block "traceTPIU"
[09:06:16.731]        // =>  FALSE
[09:06:16.731]      // skip if-block "traceTPIU"
[09:06:16.731]    </control>
[09:06:16.732]  </sequence>
[09:06:16.732]  
[09:06:16.748]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[09:06:16.748]  
[09:06:16.748]  <debugvars>
[09:06:16.749]    // Pre-defined
[09:06:16.749]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[09:06:16.749]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[09:06:16.750]    __dp=0x00000000
[09:06:16.750]    __ap=0x00000000
[09:06:16.750]    __traceout=0x00000001      (SWO Trace)
[09:06:16.751]    __errorcontrol=0x00000000  (Skip Errors="False")
[09:06:16.751]    __FlashAddr=0x00000000
[09:06:16.751]    __FlashLen=0x00000000
[09:06:16.752]    __FlashArg=0x00000000
[09:06:16.752]    __FlashOp=0x00000000
[09:06:16.753]    __Result=0x00000000
[09:06:16.753]    
[09:06:16.753]    // User-defined
[09:06:16.753]    DbgMCU_CR=0x00000007
[09:06:16.753]    DbgMCU_APB1_Fz=0x00000000
[09:06:16.753]    DbgMCU_APB2_Fz=0x00000000
[09:06:16.754]    TraceClk_Pin=0x00040002
[09:06:16.754]    TraceD0_Pin=0x00040003
[09:06:16.754]    TraceD1_Pin=0x00040004
[09:06:16.754]    TraceD2_Pin=0x00040005
[09:06:16.755]    TraceD3_Pin=0x00040006
[09:06:16.755]  </debugvars>
[09:06:16.755]  
[09:06:16.755]  <sequence name="TraceStart" Pname="" disable="false" info="">
[09:06:16.755]    <block atomic="false" info="">
[09:06:16.756]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[09:06:16.756]        // -> [traceSWO <= 0x00000001]
[09:06:16.756]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[09:06:16.756]        // -> [traceTPIU <= 0x00000000]
[09:06:16.757]    </block>
[09:06:16.757]    <control if="traceSWO" while="" timeout="0" info="">
[09:06:16.757]      // if-block "traceSWO"
[09:06:16.757]        // =>  TRUE
[09:06:16.758]      <block atomic="false" info="">
[09:06:16.758]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[09:06:16.758]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[09:06:16.758]            <block atomic="false" info="">
[09:06:16.759]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[09:06:16.759]                // -> [dbgmcu_val <= 0x00000000]
[09:06:16.759]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[09:06:16.759]                // -> [dbgmcu_trace_val <= 0x00000000]
[09:06:16.760]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[09:06:16.762]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.762]                // -> [dbgmcu_val <= 0x00000007]
[09:06:16.762]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[09:06:16.763]                // -> [dbgmcu_trace_val <= 0x00000020]
[09:06:16.763]              Sequence("ConfigureTraceSWOPin");
[09:06:16.764]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[09:06:16.764]                  <block atomic="false" info="">
[09:06:16.764]                    __var pin     = 0;
[09:06:16.765]                      // -> [pin <= 0x00000000]
[09:06:16.765]                    __var port    = 0;
[09:06:16.766]                      // -> [port <= 0x00000000]
[09:06:16.766]                    __var portAdr = 0;
[09:06:16.766]                      // -> [portAdr <= 0x00000000]
[09:06:16.767]                    __var pos     = 0;
[09:06:16.767]                      // -> [pos <= 0x00000000]
[09:06:16.767]                    __var SWO_Pin = 0x00010003;          // PB3
[09:06:16.768]                      // -> [SWO_Pin <= 0x00010003]
[09:06:16.768]                  </block>
[09:06:16.768]                  <block atomic="false" info="configure SWO">
[09:06:16.768]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[09:06:16.769]                      // -> [pin <= 0x00000003]
[09:06:16.769]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[09:06:16.769]                      // -> [port <= 0x00000001]
[09:06:16.770]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[09:06:16.770]                      // -> [portAdr <= 0x40020400]
[09:06:16.770]                    pos = pin * 2;
[09:06:16.770]                      // -> [pos <= 0x00000006]
[09:06:16.770]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[09:06:16.772]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.773]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.773]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[09:06:16.775]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.775]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.776]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[09:06:16.777]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.778]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.779]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[09:06:16.780]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.782]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.782]                  </block>
[09:06:16.783]                  <control if="pin <  8" while="" timeout="0" info="">
[09:06:16.783]                    // if-block "pin <  8"
[09:06:16.783]                      // =>  TRUE
[09:06:16.784]                    <block atomic="false" info="">
[09:06:16.784]                      pos = ((pin    ) & 7) * 4;
[09:06:16.784]                        // -> [pos <= 0x0000000C]
[09:06:16.784]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[09:06:16.786]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.788]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.788]                    </block>
[09:06:16.788]                    // end if-block "pin <  8"
[09:06:16.788]                  </control>
[09:06:16.789]                  <control if="pin >= 8" while="" timeout="0" info="">
[09:06:16.789]                    // if-block "pin >= 8"
[09:06:16.789]                      // =>  FALSE
[09:06:16.789]                    // skip if-block "pin >= 8"
[09:06:16.790]                  </control>
[09:06:16.790]                </sequence>
[09:06:16.790]            </block>
[09:06:16.790]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[09:06:16.791]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[09:06:16.792]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:16.792]            </block>
[09:06:16.792]          </sequence>
[09:06:16.793]      </block>
[09:06:16.793]      // end if-block "traceSWO"
[09:06:16.794]    </control>
[09:06:16.794]    <control if="traceTPIU" while="" timeout="0" info="">
[09:06:16.794]      // if-block "traceTPIU"
[09:06:16.795]        // =>  FALSE
[09:06:16.796]      // skip if-block "traceTPIU"
[09:06:16.796]    </control>
[09:06:16.796]  </sequence>
[09:06:16.796]  
[09:06:17.737]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[09:06:17.737]  
[09:06:17.741]  <debugvars>
[09:06:17.741]    // Pre-defined
[09:06:17.741]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[09:06:17.741]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[09:06:17.742]    __dp=0x00000000
[09:06:17.742]    __ap=0x00000000
[09:06:17.742]    __traceout=0x00000001      (SWO Trace)
[09:06:17.742]    __errorcontrol=0x00000000  (Skip Errors="False")
[09:06:17.742]    __FlashAddr=0x00000000
[09:06:17.743]    __FlashLen=0x00000000
[09:06:17.743]    __FlashArg=0x00000000
[09:06:17.743]    __FlashOp=0x00000000
[09:06:17.743]    __Result=0x00000000
[09:06:17.743]    
[09:06:17.743]    // User-defined
[09:06:17.743]    DbgMCU_CR=0x00000007
[09:06:17.744]    DbgMCU_APB1_Fz=0x00000000
[09:06:17.744]    DbgMCU_APB2_Fz=0x00000000
[09:06:17.744]    TraceClk_Pin=0x00040002
[09:06:17.744]    TraceD0_Pin=0x00040003
[09:06:17.744]    TraceD1_Pin=0x00040004
[09:06:17.744]    TraceD2_Pin=0x00040005
[09:06:17.744]    TraceD3_Pin=0x00040006
[09:06:17.744]  </debugvars>
[09:06:17.745]  
[09:06:17.745]  <sequence name="TraceStart" Pname="" disable="false" info="">
[09:06:17.745]    <block atomic="false" info="">
[09:06:17.745]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[09:06:17.745]        // -> [traceSWO <= 0x00000001]
[09:06:17.745]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[09:06:17.745]        // -> [traceTPIU <= 0x00000000]
[09:06:17.745]    </block>
[09:06:17.746]    <control if="traceSWO" while="" timeout="0" info="">
[09:06:17.746]      // if-block "traceSWO"
[09:06:17.746]        // =>  TRUE
[09:06:17.746]      <block atomic="false" info="">
[09:06:17.746]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[09:06:17.746]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[09:06:17.746]            <block atomic="false" info="">
[09:06:17.746]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[09:06:17.747]                // -> [dbgmcu_val <= 0x00000000]
[09:06:17.747]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[09:06:17.747]                // -> [dbgmcu_trace_val <= 0x00000000]
[09:06:17.747]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[09:06:17.748]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[09:06:17.748]                // -> [dbgmcu_val <= 0x00000007]
[09:06:17.748]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[09:06:17.748]                // -> [dbgmcu_trace_val <= 0x00000020]
[09:06:17.748]              Sequence("ConfigureTraceSWOPin");
[09:06:17.748]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[09:06:17.749]                  <block atomic="false" info="">
[09:06:17.749]                    __var pin     = 0;
[09:06:17.749]                      // -> [pin <= 0x00000000]
[09:06:17.749]                    __var port    = 0;
[09:06:17.749]                      // -> [port <= 0x00000000]
[09:06:17.749]                    __var portAdr = 0;
[09:06:17.749]                      // -> [portAdr <= 0x00000000]
[09:06:17.749]                    __var pos     = 0;
[09:06:17.750]                      // -> [pos <= 0x00000000]
[09:06:17.750]                    __var SWO_Pin = 0x00010003;          // PB3
[09:06:17.750]                      // -> [SWO_Pin <= 0x00010003]
[09:06:17.750]                  </block>
[09:06:17.750]                  <block atomic="false" info="configure SWO">
[09:06:17.751]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[09:06:17.751]                      // -> [pin <= 0x00000003]
[09:06:17.751]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[09:06:17.751]                      // -> [port <= 0x00000001]
[09:06:17.751]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[09:06:17.752]                      // -> [portAdr <= 0x40020400]
[09:06:17.752]                    pos = pin * 2;
[09:06:17.752]                      // -> [pos <= 0x00000006]
[09:06:17.752]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[09:06:17.753]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[09:06:17.754]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:17.754]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[09:06:17.755]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[09:06:17.755]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:17.756]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[09:06:17.756]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[09:06:17.757]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:17.757]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[09:06:17.759]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[09:06:17.760]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:17.760]                  </block>
[09:06:17.760]                  <control if="pin <  8" while="" timeout="0" info="">
[09:06:17.760]                    // if-block "pin <  8"
[09:06:17.761]                      // =>  TRUE
[09:06:17.761]                    <block atomic="false" info="">
[09:06:17.761]                      pos = ((pin    ) & 7) * 4;
[09:06:17.761]                        // -> [pos <= 0x0000000C]
[09:06:17.761]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[09:06:17.762]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[09:06:17.763]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:17.764]                    </block>
[09:06:17.764]                    // end if-block "pin <  8"
[09:06:17.764]                  </control>
[09:06:17.764]                  <control if="pin >= 8" while="" timeout="0" info="">
[09:06:17.764]                    // if-block "pin >= 8"
[09:06:17.764]                      // =>  FALSE
[09:06:17.764]                    // skip if-block "pin >= 8"
[09:06:17.764]                  </control>
[09:06:17.764]                </sequence>
[09:06:17.765]            </block>
[09:06:17.765]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[09:06:17.765]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[09:06:17.766]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[09:06:17.766]            </block>
[09:06:17.766]          </sequence>
[09:06:17.766]      </block>
[09:06:17.766]      // end if-block "traceSWO"
[09:06:17.766]    </control>
[09:06:17.766]    <control if="traceTPIU" while="" timeout="0" info="">
[09:06:17.766]      // if-block "traceTPIU"
[09:06:17.767]        // =>  FALSE
[09:06:17.767]      // skip if-block "traceTPIU"
[09:06:17.767]    </control>
[09:06:17.767]  </sequence>
[09:06:17.767]  
[09:09:11.160]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[09:09:11.160]  
[09:09:11.207]  <debugvars>
[09:09:11.207]    // Pre-defined
[09:09:11.208]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[09:09:11.208]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[09:09:11.209]    __dp=0x00000000
[09:09:11.209]    __ap=0x00000000
[09:09:11.209]    __traceout=0x00000001      (SWO Trace)
[09:09:11.209]    __errorcontrol=0x00000000  (Skip Errors="False")
[09:09:11.209]    __FlashAddr=0x00000000
[09:09:11.210]    __FlashLen=0x00000000
[09:09:11.210]    __FlashArg=0x00000000
[09:09:11.210]    __FlashOp=0x00000000
[09:09:11.211]    __Result=0x00000000
[09:09:11.211]    
[09:09:11.211]    // User-defined
[09:09:11.211]    DbgMCU_CR=0x00000007
[09:09:11.211]    DbgMCU_APB1_Fz=0x00000000
[09:09:11.212]    DbgMCU_APB2_Fz=0x00000000
[09:09:11.212]    TraceClk_Pin=0x00040002
[09:09:11.212]    TraceD0_Pin=0x00040003
[09:09:11.213]    TraceD1_Pin=0x00040004
[09:09:11.213]    TraceD2_Pin=0x00040005
[09:09:11.213]    TraceD3_Pin=0x00040006
[09:09:11.213]  </debugvars>
[09:09:11.214]  
[09:09:11.214]  <sequence name="TraceStop" Pname="" disable="false" info="">
[09:09:11.214]    <block atomic="false" info="">
[09:09:11.215]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[09:09:11.215]        // -> [traceSWO <= 0x00000001]
[09:09:11.215]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[09:09:11.216]        // -> [traceTPIU <= 0x00000000]
[09:09:11.216]    </block>
[09:09:11.216]    <control if="traceSWO" while="" timeout="0" info="">
[09:09:11.216]      // if-block "traceSWO"
[09:09:11.217]        // =>  TRUE
[09:09:11.217]      <block atomic="false" info="">
[09:09:11.218]        Sequence("DisableTraceSWO");
[09:09:11.218]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[09:09:11.218]            <block atomic="false" info="">
[09:09:11.219]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[09:09:11.219]                // -> [dbgmcu_val <= 0x00000000]
[09:09:11.219]            </block>
[09:09:11.220]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[09:09:11.220]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[09:09:11.221]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[09:09:11.222]                // -> [dbgmcu_val <= 0x00000007]
[09:09:11.222]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[09:09:11.224]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[09:09:11.224]            </block>
[09:09:11.225]          </sequence>
[09:09:11.225]      </block>
[09:09:11.225]      // end if-block "traceSWO"
[09:09:11.226]    </control>
[09:09:11.226]    <control if="traceTPIU" while="" timeout="0" info="">
[09:09:11.227]      // if-block "traceTPIU"
[09:09:11.227]        // =>  FALSE
[09:09:11.228]      // skip if-block "traceTPIU"
[09:09:11.228]    </control>
[09:09:11.229]  </sequence>
[09:09:11.229]  
[10:22:46.120]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[10:22:46.120]  
[10:22:46.166]  <debugvars>
[10:22:46.166]    // Pre-defined
[10:22:46.167]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:22:46.167]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[10:22:46.167]    __dp=0x00000000
[10:22:46.168]    __ap=0x00000000
[10:22:46.169]    __traceout=0x00000001      (SWO Trace)
[10:22:46.169]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:22:46.169]    __FlashAddr=0x00000000
[10:22:46.169]    __FlashLen=0x00000000
[10:22:46.169]    __FlashArg=0x00000000
[10:22:46.170]    __FlashOp=0x00000000
[10:22:46.170]    __Result=0x00000000
[10:22:46.170]    
[10:22:46.170]    // User-defined
[10:22:46.171]    DbgMCU_CR=0x00000007
[10:22:46.171]    DbgMCU_APB1_Fz=0x00000000
[10:22:46.171]    DbgMCU_APB2_Fz=0x00000000
[10:22:46.172]    TraceClk_Pin=0x00040002
[10:22:46.172]    TraceD0_Pin=0x00040003
[10:22:46.172]    TraceD1_Pin=0x00040004
[10:22:46.173]    TraceD2_Pin=0x00040005
[10:22:46.174]    TraceD3_Pin=0x00040006
[10:22:46.174]  </debugvars>
[10:22:46.174]  
[10:22:46.174]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[10:22:46.174]    <block atomic="false" info="">
[10:22:46.175]      Sequence("CheckID");
[10:22:46.175]        <sequence name="CheckID" Pname="" disable="false" info="">
[10:22:46.175]          <block atomic="false" info="">
[10:22:46.175]            __var pidr1 = 0;
[10:22:46.176]              // -> [pidr1 <= 0x00000000]
[10:22:46.176]            __var pidr2 = 0;
[10:22:46.177]              // -> [pidr2 <= 0x00000000]
[10:22:46.177]            __var jep106id = 0;
[10:22:46.177]              // -> [jep106id <= 0x00000000]
[10:22:46.178]            __var ROMTableBase = 0;
[10:22:46.178]              // -> [ROMTableBase <= 0x00000000]
[10:22:46.178]            __ap = 0;      // AHB-AP
[10:22:46.178]              // -> [__ap <= 0x00000000]
[10:22:46.178]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[10:22:46.179]              // -> [ReadAP(0x000000F8) => 0xE00FF003]   (__dp=0x00000000, __ap=0x00000000)
[10:22:46.180]              // -> [ROMTableBase <= 0xE00FF000]
[10:22:46.180]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[10:22:46.181]              // -> [Read32(0xE00FFFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[10:22:46.182]              // -> [pidr1 <= 0x00000004]
[10:22:46.182]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[10:22:46.183]              // -> [Read32(0xE00FFFE8) => 0x0000000A]   (__dp=0x00000000, __ap=0x00000000)
[10:22:46.184]              // -> [pidr2 <= 0x0000000A]
[10:22:46.184]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[10:22:46.185]              // -> [jep106id <= 0x00000020]
[10:22:46.185]          </block>
[10:22:46.185]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[10:22:46.186]            // if-block "jep106id != 0x20"
[10:22:46.187]              // =>  FALSE
[10:22:46.187]            // skip if-block "jep106id != 0x20"
[10:22:46.187]          </control>
[10:22:46.187]        </sequence>
[10:22:46.188]    </block>
[10:22:46.188]  </sequence>
[10:22:46.189]  
[10:22:46.190]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[10:22:46.190]  
[10:22:46.190]  <debugvars>
[10:22:46.190]    // Pre-defined
[10:22:46.190]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:22:46.191]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[10:22:46.191]    __dp=0x00000000
[10:22:46.191]    __ap=0x00000000
[10:22:46.191]    __traceout=0x00000001      (SWO Trace)
[10:22:46.192]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:22:46.192]    __FlashAddr=0x00000000
[10:22:46.192]    __FlashLen=0x00000000
[10:22:46.192]    __FlashArg=0x00000000
[10:22:46.193]    __FlashOp=0x00000000
[10:22:46.193]    __Result=0x00000000
[10:22:46.194]    
[10:22:46.194]    // User-defined
[10:22:46.194]    DbgMCU_CR=0x00000007
[10:22:46.194]    DbgMCU_APB1_Fz=0x00000000
[10:22:46.194]    DbgMCU_APB2_Fz=0x00000000
[10:22:46.195]    TraceClk_Pin=0x00040002
[10:22:46.195]    TraceD0_Pin=0x00040003
[10:22:46.195]    TraceD1_Pin=0x00040004
[10:22:46.195]    TraceD2_Pin=0x00040005
[10:22:46.196]    TraceD3_Pin=0x00040006
[10:22:46.196]  </debugvars>
[10:22:46.196]  
[10:22:46.196]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[10:22:46.196]    <block atomic="false" info="">
[10:22:46.197]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[10:22:46.198]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:46.198]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[10:22:46.200]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:46.201]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[10:22:46.202]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:46.202]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[10:22:46.204]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:46.204]    </block>
[10:22:46.204]  </sequence>
[10:22:46.205]  
[10:22:48.257]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[10:22:48.257]  
[10:22:48.258]  <debugvars>
[10:22:48.258]    // Pre-defined
[10:22:48.259]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:22:48.259]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:22:48.259]    __dp=0x00000000
[10:22:48.259]    __ap=0x00000000
[10:22:48.259]    __traceout=0x00000001      (SWO Trace)
[10:22:48.259]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:22:48.260]    __FlashAddr=0x00000000
[10:22:48.260]    __FlashLen=0x00000000
[10:22:48.260]    __FlashArg=0x00000000
[10:22:48.260]    __FlashOp=0x00000000
[10:22:48.261]    __Result=0x00000000
[10:22:48.261]    
[10:22:48.261]    // User-defined
[10:22:48.261]    DbgMCU_CR=0x00000007
[10:22:48.261]    DbgMCU_APB1_Fz=0x00000000
[10:22:48.262]    DbgMCU_APB2_Fz=0x00000000
[10:22:48.262]    TraceClk_Pin=0x00040002
[10:22:48.262]    TraceD0_Pin=0x00040003
[10:22:48.262]    TraceD1_Pin=0x00040004
[10:22:48.263]    TraceD2_Pin=0x00040005
[10:22:48.264]    TraceD3_Pin=0x00040006
[10:22:48.264]  </debugvars>
[10:22:48.264]  
[10:22:48.264]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[10:22:48.264]    <block atomic="false" info="">
[10:22:48.265]      Sequence("CheckID");
[10:22:48.265]        <sequence name="CheckID" Pname="" disable="false" info="">
[10:22:48.265]          <block atomic="false" info="">
[10:22:48.266]            __var pidr1 = 0;
[10:22:48.266]              // -> [pidr1 <= 0x00000000]
[10:22:48.266]            __var pidr2 = 0;
[10:22:48.266]              // -> [pidr2 <= 0x00000000]
[10:22:48.267]            __var jep106id = 0;
[10:22:48.267]              // -> [jep106id <= 0x00000000]
[10:22:48.267]            __var ROMTableBase = 0;
[10:22:48.267]              // -> [ROMTableBase <= 0x00000000]
[10:22:48.268]            __ap = 0;      // AHB-AP
[10:22:48.268]              // -> [__ap <= 0x00000000]
[10:22:48.268]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[10:22:48.269]              // -> [ReadAP(0x000000F8) => 0xE00FF003]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.270]              // -> [ROMTableBase <= 0xE00FF000]
[10:22:48.270]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[10:22:48.271]              // -> [Read32(0xE00FFFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.271]              // -> [pidr1 <= 0x00000004]
[10:22:48.272]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[10:22:48.273]              // -> [Read32(0xE00FFFE8) => 0x0000000A]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.274]              // -> [pidr2 <= 0x0000000A]
[10:22:48.274]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[10:22:48.274]              // -> [jep106id <= 0x00000020]
[10:22:48.274]          </block>
[10:22:48.275]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[10:22:48.275]            // if-block "jep106id != 0x20"
[10:22:48.275]              // =>  FALSE
[10:22:48.276]            // skip if-block "jep106id != 0x20"
[10:22:48.276]          </control>
[10:22:48.276]        </sequence>
[10:22:48.276]    </block>
[10:22:48.278]  </sequence>
[10:22:48.278]  
[10:22:48.278]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[10:22:48.278]  
[10:22:48.278]  <debugvars>
[10:22:48.279]    // Pre-defined
[10:22:48.279]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:22:48.279]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:22:48.279]    __dp=0x00000000
[10:22:48.280]    __ap=0x00000000
[10:22:48.280]    __traceout=0x00000001      (SWO Trace)
[10:22:48.280]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:22:48.281]    __FlashAddr=0x00000000
[10:22:48.281]    __FlashLen=0x00000000
[10:22:48.281]    __FlashArg=0x00000000
[10:22:48.281]    __FlashOp=0x00000000
[10:22:48.282]    __Result=0x00000000
[10:22:48.282]    
[10:22:48.282]    // User-defined
[10:22:48.282]    DbgMCU_CR=0x00000007
[10:22:48.282]    DbgMCU_APB1_Fz=0x00000000
[10:22:48.282]    DbgMCU_APB2_Fz=0x00000000
[10:22:48.282]    TraceClk_Pin=0x00040002
[10:22:48.283]    TraceD0_Pin=0x00040003
[10:22:48.283]    TraceD1_Pin=0x00040004
[10:22:48.283]    TraceD2_Pin=0x00040005
[10:22:48.283]    TraceD3_Pin=0x00040006
[10:22:48.284]  </debugvars>
[10:22:48.284]  
[10:22:48.284]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[10:22:48.284]    <block atomic="false" info="">
[10:22:48.284]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[10:22:48.286]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.286]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[10:22:48.288]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.288]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[10:22:48.290]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.290]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[10:22:48.292]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.292]    </block>
[10:22:48.293]  </sequence>
[10:22:48.293]  
[10:22:48.341]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[10:22:48.341]  
[10:22:48.342]  <debugvars>
[10:22:48.343]    // Pre-defined
[10:22:48.343]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:22:48.343]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:22:48.343]    __dp=0x00000000
[10:22:48.344]    __ap=0x00000000
[10:22:48.344]    __traceout=0x00000001      (SWO Trace)
[10:22:48.344]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:22:48.344]    __FlashAddr=0x00000000
[10:22:48.344]    __FlashLen=0x00000000
[10:22:48.345]    __FlashArg=0x00000000
[10:22:48.345]    __FlashOp=0x00000000
[10:22:48.345]    __Result=0x00000000
[10:22:48.345]    
[10:22:48.345]    // User-defined
[10:22:48.346]    DbgMCU_CR=0x00000007
[10:22:48.346]    DbgMCU_APB1_Fz=0x00000000
[10:22:48.346]    DbgMCU_APB2_Fz=0x00000000
[10:22:48.346]    TraceClk_Pin=0x00040002
[10:22:48.347]    TraceD0_Pin=0x00040003
[10:22:48.347]    TraceD1_Pin=0x00040004
[10:22:48.347]    TraceD2_Pin=0x00040005
[10:22:48.347]    TraceD3_Pin=0x00040006
[10:22:48.348]  </debugvars>
[10:22:48.348]  
[10:22:48.348]  <sequence name="TraceStart" Pname="" disable="false" info="">
[10:22:48.348]    <block atomic="false" info="">
[10:22:48.349]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[10:22:48.349]        // -> [traceSWO <= 0x00000001]
[10:22:48.349]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[10:22:48.350]        // -> [traceTPIU <= 0x00000000]
[10:22:48.350]    </block>
[10:22:48.350]    <control if="traceSWO" while="" timeout="0" info="">
[10:22:48.350]      // if-block "traceSWO"
[10:22:48.351]        // =>  TRUE
[10:22:48.351]      <block atomic="false" info="">
[10:22:48.351]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[10:22:48.351]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[10:22:48.352]            <block atomic="false" info="">
[10:22:48.352]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[10:22:48.352]                // -> [dbgmcu_val <= 0x00000000]
[10:22:48.353]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[10:22:48.353]                // -> [dbgmcu_trace_val <= 0x00000000]
[10:22:48.353]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[10:22:48.354]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.354]                // -> [dbgmcu_val <= 0x00000007]
[10:22:48.355]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[10:22:48.355]                // -> [dbgmcu_trace_val <= 0x00000020]
[10:22:48.355]              Sequence("ConfigureTraceSWOPin");
[10:22:48.356]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[10:22:48.356]                  <block atomic="false" info="">
[10:22:48.356]                    __var pin     = 0;
[10:22:48.356]                      // -> [pin <= 0x00000000]
[10:22:48.357]                    __var port    = 0;
[10:22:48.357]                      // -> [port <= 0x00000000]
[10:22:48.357]                    __var portAdr = 0;
[10:22:48.357]                      // -> [portAdr <= 0x00000000]
[10:22:48.357]                    __var pos     = 0;
[10:22:48.358]                      // -> [pos <= 0x00000000]
[10:22:48.358]                    __var SWO_Pin = 0x00010003;          // PB3
[10:22:48.358]                      // -> [SWO_Pin <= 0x00010003]
[10:22:48.358]                  </block>
[10:22:48.358]                  <block atomic="false" info="configure SWO">
[10:22:48.359]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[10:22:48.360]                      // -> [pin <= 0x00000003]
[10:22:48.360]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[10:22:48.360]                      // -> [port <= 0x00000001]
[10:22:48.361]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[10:22:48.361]                      // -> [portAdr <= 0x40020400]
[10:22:48.361]                    pos = pin * 2;
[10:22:48.361]                      // -> [pos <= 0x00000006]
[10:22:48.362]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[10:22:48.363]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.364]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.365]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[10:22:48.366]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.368]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.368]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[10:22:48.369]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.371]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.371]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[10:22:48.372]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.374]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.374]                  </block>
[10:22:48.374]                  <control if="pin <  8" while="" timeout="0" info="">
[10:22:48.374]                    // if-block "pin <  8"
[10:22:48.375]                      // =>  TRUE
[10:22:48.375]                    <block atomic="false" info="">
[10:22:48.375]                      pos = ((pin    ) & 7) * 4;
[10:22:48.375]                        // -> [pos <= 0x0000000C]
[10:22:48.376]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[10:22:48.377]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.378]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.379]                    </block>
[10:22:48.379]                    // end if-block "pin <  8"
[10:22:48.379]                  </control>
[10:22:48.380]                  <control if="pin >= 8" while="" timeout="0" info="">
[10:22:48.380]                    // if-block "pin >= 8"
[10:22:48.381]                      // =>  FALSE
[10:22:48.381]                    // skip if-block "pin >= 8"
[10:22:48.381]                  </control>
[10:22:48.381]                </sequence>
[10:22:48.382]            </block>
[10:22:48.382]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[10:22:48.382]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[10:22:48.383]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.383]            </block>
[10:22:48.383]          </sequence>
[10:22:48.384]      </block>
[10:22:48.385]      // end if-block "traceSWO"
[10:22:48.385]    </control>
[10:22:48.385]    <control if="traceTPIU" while="" timeout="0" info="">
[10:22:48.385]      // if-block "traceTPIU"
[10:22:48.386]        // =>  FALSE
[10:22:48.386]      // skip if-block "traceTPIU"
[10:22:48.386]    </control>
[10:22:48.386]  </sequence>
[10:22:48.386]  
[10:22:48.405]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[10:22:48.405]  
[10:22:48.405]  <debugvars>
[10:22:48.406]    // Pre-defined
[10:22:48.406]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:22:48.406]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:22:48.407]    __dp=0x00000000
[10:22:48.407]    __ap=0x00000000
[10:22:48.407]    __traceout=0x00000001      (SWO Trace)
[10:22:48.408]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:22:48.408]    __FlashAddr=0x00000000
[10:22:48.408]    __FlashLen=0x00000000
[10:22:48.409]    __FlashArg=0x00000000
[10:22:48.409]    __FlashOp=0x00000000
[10:22:48.409]    __Result=0x00000000
[10:22:48.409]    
[10:22:48.410]    // User-defined
[10:22:48.410]    DbgMCU_CR=0x00000007
[10:22:48.410]    DbgMCU_APB1_Fz=0x00000000
[10:22:48.410]    DbgMCU_APB2_Fz=0x00000000
[10:22:48.411]    TraceClk_Pin=0x00040002
[10:22:48.411]    TraceD0_Pin=0x00040003
[10:22:48.411]    TraceD1_Pin=0x00040004
[10:22:48.411]    TraceD2_Pin=0x00040005
[10:22:48.412]    TraceD3_Pin=0x00040006
[10:22:48.412]  </debugvars>
[10:22:48.412]  
[10:22:48.412]  <sequence name="TraceStart" Pname="" disable="false" info="">
[10:22:48.413]    <block atomic="false" info="">
[10:22:48.413]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[10:22:48.413]        // -> [traceSWO <= 0x00000001]
[10:22:48.413]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[10:22:48.414]        // -> [traceTPIU <= 0x00000000]
[10:22:48.414]    </block>
[10:22:48.414]    <control if="traceSWO" while="" timeout="0" info="">
[10:22:48.414]      // if-block "traceSWO"
[10:22:48.415]        // =>  TRUE
[10:22:48.415]      <block atomic="false" info="">
[10:22:48.415]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[10:22:48.415]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[10:22:48.416]            <block atomic="false" info="">
[10:22:48.416]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[10:22:48.416]                // -> [dbgmcu_val <= 0x00000000]
[10:22:48.416]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[10:22:48.417]                // -> [dbgmcu_trace_val <= 0x00000000]
[10:22:48.417]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[10:22:48.418]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.418]                // -> [dbgmcu_val <= 0x00000007]
[10:22:48.418]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[10:22:48.419]                // -> [dbgmcu_trace_val <= 0x00000020]
[10:22:48.419]              Sequence("ConfigureTraceSWOPin");
[10:22:48.419]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[10:22:48.419]                  <block atomic="false" info="">
[10:22:48.420]                    __var pin     = 0;
[10:22:48.420]                      // -> [pin <= 0x00000000]
[10:22:48.420]                    __var port    = 0;
[10:22:48.420]                      // -> [port <= 0x00000000]
[10:22:48.421]                    __var portAdr = 0;
[10:22:48.421]                      // -> [portAdr <= 0x00000000]
[10:22:48.421]                    __var pos     = 0;
[10:22:48.421]                      // -> [pos <= 0x00000000]
[10:22:48.421]                    __var SWO_Pin = 0x00010003;          // PB3
[10:22:48.422]                      // -> [SWO_Pin <= 0x00010003]
[10:22:48.422]                  </block>
[10:22:48.422]                  <block atomic="false" info="configure SWO">
[10:22:48.423]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[10:22:48.423]                      // -> [pin <= 0x00000003]
[10:22:48.424]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[10:22:48.424]                      // -> [port <= 0x00000001]
[10:22:48.424]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[10:22:48.425]                      // -> [portAdr <= 0x40020400]
[10:22:48.425]                    pos = pin * 2;
[10:22:48.425]                      // -> [pos <= 0x00000006]
[10:22:48.426]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[10:22:48.427]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.429]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.429]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[10:22:48.430]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.432]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.432]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[10:22:48.433]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.434]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.434]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[10:22:48.436]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.438]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.438]                  </block>
[10:22:48.439]                  <control if="pin <  8" while="" timeout="0" info="">
[10:22:48.439]                    // if-block "pin <  8"
[10:22:48.439]                      // =>  TRUE
[10:22:48.440]                    <block atomic="false" info="">
[10:22:48.440]                      pos = ((pin    ) & 7) * 4;
[10:22:48.440]                        // -> [pos <= 0x0000000C]
[10:22:48.441]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[10:22:48.442]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.443]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.444]                    </block>
[10:22:48.444]                    // end if-block "pin <  8"
[10:22:48.444]                  </control>
[10:22:48.445]                  <control if="pin >= 8" while="" timeout="0" info="">
[10:22:48.445]                    // if-block "pin >= 8"
[10:22:48.445]                      // =>  FALSE
[10:22:48.445]                    // skip if-block "pin >= 8"
[10:22:48.446]                  </control>
[10:22:48.446]                </sequence>
[10:22:48.446]            </block>
[10:22:48.446]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[10:22:48.446]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[10:22:48.448]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:48.448]            </block>
[10:22:48.449]          </sequence>
[10:22:48.449]      </block>
[10:22:48.449]      // end if-block "traceSWO"
[10:22:48.449]    </control>
[10:22:48.450]    <control if="traceTPIU" while="" timeout="0" info="">
[10:22:48.450]      // if-block "traceTPIU"
[10:22:48.450]        // =>  FALSE
[10:22:48.450]      // skip if-block "traceTPIU"
[10:22:48.451]    </control>
[10:22:48.451]  </sequence>
[10:22:48.451]  
[10:22:49.549]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[10:22:49.550]  
[10:22:49.556]  <debugvars>
[10:22:49.556]    // Pre-defined
[10:22:49.556]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:22:49.556]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:22:49.557]    __dp=0x00000000
[10:22:49.558]    __ap=0x00000000
[10:22:49.558]    __traceout=0x00000001      (SWO Trace)
[10:22:49.558]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:22:49.558]    __FlashAddr=0x00000000
[10:22:49.558]    __FlashLen=0x00000000
[10:22:49.558]    __FlashArg=0x00000000
[10:22:49.559]    __FlashOp=0x00000000
[10:22:49.559]    __Result=0x00000000
[10:22:49.559]    
[10:22:49.559]    // User-defined
[10:22:49.559]    DbgMCU_CR=0x00000007
[10:22:49.559]    DbgMCU_APB1_Fz=0x00000000
[10:22:49.559]    DbgMCU_APB2_Fz=0x00000000
[10:22:49.559]    TraceClk_Pin=0x00040002
[10:22:49.560]    TraceD0_Pin=0x00040003
[10:22:49.560]    TraceD1_Pin=0x00040004
[10:22:49.560]    TraceD2_Pin=0x00040005
[10:22:49.560]    TraceD3_Pin=0x00040006
[10:22:49.560]  </debugvars>
[10:22:49.560]  
[10:22:49.560]  <sequence name="TraceStart" Pname="" disable="false" info="">
[10:22:49.561]    <block atomic="false" info="">
[10:22:49.561]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[10:22:49.561]        // -> [traceSWO <= 0x00000001]
[10:22:49.561]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[10:22:49.561]        // -> [traceTPIU <= 0x00000000]
[10:22:49.561]    </block>
[10:22:49.561]    <control if="traceSWO" while="" timeout="0" info="">
[10:22:49.562]      // if-block "traceSWO"
[10:22:49.562]        // =>  TRUE
[10:22:49.562]      <block atomic="false" info="">
[10:22:49.562]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[10:22:49.562]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[10:22:49.562]            <block atomic="false" info="">
[10:22:49.563]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[10:22:49.563]                // -> [dbgmcu_val <= 0x00000000]
[10:22:49.563]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[10:22:49.563]                // -> [dbgmcu_trace_val <= 0x00000000]
[10:22:49.563]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[10:22:49.564]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[10:22:49.564]                // -> [dbgmcu_val <= 0x00000007]
[10:22:49.564]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[10:22:49.564]                // -> [dbgmcu_trace_val <= 0x00000020]
[10:22:49.565]              Sequence("ConfigureTraceSWOPin");
[10:22:49.565]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[10:22:49.565]                  <block atomic="false" info="">
[10:22:49.565]                    __var pin     = 0;
[10:22:49.565]                      // -> [pin <= 0x00000000]
[10:22:49.565]                    __var port    = 0;
[10:22:49.566]                      // -> [port <= 0x00000000]
[10:22:49.566]                    __var portAdr = 0;
[10:22:49.566]                      // -> [portAdr <= 0x00000000]
[10:22:49.566]                    __var pos     = 0;
[10:22:49.566]                      // -> [pos <= 0x00000000]
[10:22:49.566]                    __var SWO_Pin = 0x00010003;          // PB3
[10:22:49.566]                      // -> [SWO_Pin <= 0x00010003]
[10:22:49.567]                  </block>
[10:22:49.567]                  <block atomic="false" info="configure SWO">
[10:22:49.567]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[10:22:49.567]                      // -> [pin <= 0x00000003]
[10:22:49.567]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[10:22:49.567]                      // -> [port <= 0x00000001]
[10:22:49.567]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[10:22:49.567]                      // -> [portAdr <= 0x40020400]
[10:22:49.569]                    pos = pin * 2;
[10:22:49.569]                      // -> [pos <= 0x00000006]
[10:22:49.569]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[10:22:49.570]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:22:49.571]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:49.571]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[10:22:49.571]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[10:22:49.573]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:49.573]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[10:22:49.574]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[10:22:49.575]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:49.575]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[10:22:49.576]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[10:22:49.577]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:49.577]                  </block>
[10:22:49.577]                  <control if="pin <  8" while="" timeout="0" info="">
[10:22:49.577]                    // if-block "pin <  8"
[10:22:49.577]                      // =>  TRUE
[10:22:49.577]                    <block atomic="false" info="">
[10:22:49.577]                      pos = ((pin    ) & 7) * 4;
[10:22:49.578]                        // -> [pos <= 0x0000000C]
[10:22:49.579]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[10:22:49.579]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:22:49.580]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:49.581]                    </block>
[10:22:49.581]                    // end if-block "pin <  8"
[10:22:49.581]                  </control>
[10:22:49.581]                  <control if="pin >= 8" while="" timeout="0" info="">
[10:22:49.581]                    // if-block "pin >= 8"
[10:22:49.581]                      // =>  FALSE
[10:22:49.582]                    // skip if-block "pin >= 8"
[10:22:49.582]                  </control>
[10:22:49.582]                </sequence>
[10:22:49.582]            </block>
[10:22:49.582]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[10:22:49.582]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[10:22:49.583]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[10:22:49.583]            </block>
[10:22:49.583]          </sequence>
[10:22:49.583]      </block>
[10:22:49.584]      // end if-block "traceSWO"
[10:22:49.584]    </control>
[10:22:49.584]    <control if="traceTPIU" while="" timeout="0" info="">
[10:22:49.584]      // if-block "traceTPIU"
[10:22:49.584]        // =>  FALSE
[10:22:49.584]      // skip if-block "traceTPIU"
[10:22:49.584]    </control>
[10:22:49.585]  </sequence>
[10:22:49.585]  
[10:29:42.584]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[10:29:42.584]  
[10:29:42.631]  <debugvars>
[10:29:42.632]    // Pre-defined
[10:29:42.632]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:29:42.633]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:29:42.633]    __dp=0x00000000
[10:29:42.633]    __ap=0x00000000
[10:29:42.634]    __traceout=0x00000001      (SWO Trace)
[10:29:42.634]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:29:42.634]    __FlashAddr=0x00000000
[10:29:42.635]    __FlashLen=0x00000000
[10:29:42.635]    __FlashArg=0x00000000
[10:29:42.636]    __FlashOp=0x00000000
[10:29:42.636]    __Result=0x00000000
[10:29:42.636]    
[10:29:42.636]    // User-defined
[10:29:42.637]    DbgMCU_CR=0x00000007
[10:29:42.638]    DbgMCU_APB1_Fz=0x00000000
[10:29:42.638]    DbgMCU_APB2_Fz=0x00000000
[10:29:42.638]    TraceClk_Pin=0x00040002
[10:29:42.639]    TraceD0_Pin=0x00040003
[10:29:42.640]    TraceD1_Pin=0x00040004
[10:29:42.640]    TraceD2_Pin=0x00040005
[10:29:42.640]    TraceD3_Pin=0x00040006
[10:29:42.640]  </debugvars>
[10:29:42.641]  
[10:29:42.641]  <sequence name="TraceStop" Pname="" disable="false" info="">
[10:29:42.641]    <block atomic="false" info="">
[10:29:42.642]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[10:29:42.642]        // -> [traceSWO <= 0x00000001]
[10:29:42.642]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[10:29:42.642]        // -> [traceTPIU <= 0x00000000]
[10:29:42.643]    </block>
[10:29:42.644]    <control if="traceSWO" while="" timeout="0" info="">
[10:29:42.644]      // if-block "traceSWO"
[10:29:42.644]        // =>  TRUE
[10:29:42.645]      <block atomic="false" info="">
[10:29:42.645]        Sequence("DisableTraceSWO");
[10:29:42.645]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[10:29:42.646]            <block atomic="false" info="">
[10:29:42.646]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[10:29:42.646]                // -> [dbgmcu_val <= 0x00000000]
[10:29:42.647]            </block>
[10:29:42.647]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[10:29:42.647]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[10:29:42.648]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[10:29:42.648]                // -> [dbgmcu_val <= 0x00000007]
[10:29:42.650]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[10:29:42.651]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:42.651]            </block>
[10:29:42.651]          </sequence>
[10:29:42.652]      </block>
[10:29:42.652]      // end if-block "traceSWO"
[10:29:42.652]    </control>
[10:29:42.652]    <control if="traceTPIU" while="" timeout="0" info="">
[10:29:42.653]      // if-block "traceTPIU"
[10:29:42.653]        // =>  FALSE
[10:29:42.653]      // skip if-block "traceTPIU"
[10:29:42.653]    </control>
[10:29:42.655]  </sequence>
[10:29:42.655]  
[10:29:56.552]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[10:29:56.552]  
[10:29:56.552]  <debugvars>
[10:29:56.552]    // Pre-defined
[10:29:56.552]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:29:56.552]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[10:29:56.553]    __dp=0x00000000
[10:29:56.553]    __ap=0x00000000
[10:29:56.553]    __traceout=0x00000001      (SWO Trace)
[10:29:56.553]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:29:56.553]    __FlashAddr=0x00000000
[10:29:56.553]    __FlashLen=0x00000000
[10:29:56.553]    __FlashArg=0x00000000
[10:29:56.554]    __FlashOp=0x00000000
[10:29:56.554]    __Result=0x00000000
[10:29:56.554]    
[10:29:56.554]    // User-defined
[10:29:56.554]    DbgMCU_CR=0x00000007
[10:29:56.554]    DbgMCU_APB1_Fz=0x00000000
[10:29:56.554]    DbgMCU_APB2_Fz=0x00000000
[10:29:56.554]    TraceClk_Pin=0x00040002
[10:29:56.555]    TraceD0_Pin=0x00040003
[10:29:56.555]    TraceD1_Pin=0x00040004
[10:29:56.555]    TraceD2_Pin=0x00040005
[10:29:56.555]    TraceD3_Pin=0x00040006
[10:29:56.555]  </debugvars>
[10:29:56.555]  
[10:29:56.555]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[10:29:56.556]    <block atomic="false" info="">
[10:29:56.556]      Sequence("CheckID");
[10:29:56.556]        <sequence name="CheckID" Pname="" disable="false" info="">
[10:29:56.556]          <block atomic="false" info="">
[10:29:56.556]            __var pidr1 = 0;
[10:29:56.556]              // -> [pidr1 <= 0x00000000]
[10:29:56.556]            __var pidr2 = 0;
[10:29:56.557]              // -> [pidr2 <= 0x00000000]
[10:29:56.557]            __var jep106id = 0;
[10:29:56.557]              // -> [jep106id <= 0x00000000]
[10:29:56.557]            __var ROMTableBase = 0;
[10:29:56.557]              // -> [ROMTableBase <= 0x00000000]
[10:29:56.557]            __ap = 0;      // AHB-AP
[10:29:56.558]              // -> [__ap <= 0x00000000]
[10:29:56.558]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[10:29:56.558]              // -> [ReadAP(0x000000F8) => 0xE00FF003]   (__dp=0x00000000, __ap=0x00000000)
[10:29:56.558]              // -> [ROMTableBase <= 0xE00FF000]
[10:29:56.558]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[10:29:56.560]              // -> [Read32(0xE00FFFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[10:29:56.561]              // -> [pidr1 <= 0x00000004]
[10:29:56.561]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[10:29:56.562]              // -> [Read32(0xE00FFFE8) => 0x0000000A]   (__dp=0x00000000, __ap=0x00000000)
[10:29:56.562]              // -> [pidr2 <= 0x0000000A]
[10:29:56.562]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[10:29:56.562]              // -> [jep106id <= 0x00000020]
[10:29:56.562]          </block>
[10:29:56.563]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[10:29:56.563]            // if-block "jep106id != 0x20"
[10:29:56.563]              // =>  FALSE
[10:29:56.563]            // skip if-block "jep106id != 0x20"
[10:29:56.563]          </control>
[10:29:56.564]        </sequence>
[10:29:56.564]    </block>
[10:29:56.564]  </sequence>
[10:29:56.564]  
[10:29:56.564]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[10:29:56.564]  
[10:29:56.564]  <debugvars>
[10:29:56.565]    // Pre-defined
[10:29:56.565]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:29:56.565]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[10:29:56.565]    __dp=0x00000000
[10:29:56.565]    __ap=0x00000000
[10:29:56.565]    __traceout=0x00000001      (SWO Trace)
[10:29:56.566]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:29:56.566]    __FlashAddr=0x00000000
[10:29:56.566]    __FlashLen=0x00000000
[10:29:56.566]    __FlashArg=0x00000000
[10:29:56.566]    __FlashOp=0x00000000
[10:29:56.566]    __Result=0x00000000
[10:29:56.566]    
[10:29:56.566]    // User-defined
[10:29:56.567]    DbgMCU_CR=0x00000007
[10:29:56.567]    DbgMCU_APB1_Fz=0x00000000
[10:29:56.567]    DbgMCU_APB2_Fz=0x00000000
[10:29:56.567]    TraceClk_Pin=0x00040002
[10:29:56.567]    TraceD0_Pin=0x00040003
[10:29:56.567]    TraceD1_Pin=0x00040004
[10:29:56.568]    TraceD2_Pin=0x00040005
[10:29:56.568]    TraceD3_Pin=0x00040006
[10:29:56.568]  </debugvars>
[10:29:56.569]  
[10:29:56.569]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[10:29:56.569]    <block atomic="false" info="">
[10:29:56.569]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[10:29:56.570]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:56.571]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[10:29:56.572]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:56.572]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[10:29:56.573]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:56.573]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[10:29:56.574]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:56.574]    </block>
[10:29:56.574]  </sequence>
[10:29:56.575]  
[10:29:58.405]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[10:29:58.405]  
[10:29:58.452]  <debugvars>
[10:29:58.453]    // Pre-defined
[10:29:58.453]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:29:58.453]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:29:58.454]    __dp=0x00000000
[10:29:58.455]    __ap=0x00000000
[10:29:58.455]    __traceout=0x00000001      (SWO Trace)
[10:29:58.456]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:29:58.456]    __FlashAddr=0x00000000
[10:29:58.456]    __FlashLen=0x00000000
[10:29:58.457]    __FlashArg=0x00000000
[10:29:58.457]    __FlashOp=0x00000000
[10:29:58.458]    __Result=0x00000000
[10:29:58.459]    
[10:29:58.459]    // User-defined
[10:29:58.459]    DbgMCU_CR=0x00000007
[10:29:58.459]    DbgMCU_APB1_Fz=0x00000000
[10:29:58.459]    DbgMCU_APB2_Fz=0x00000000
[10:29:58.459]    TraceClk_Pin=0x00040002
[10:29:58.459]    TraceD0_Pin=0x00040003
[10:29:58.459]    TraceD1_Pin=0x00040004
[10:29:58.460]    TraceD2_Pin=0x00040005
[10:29:58.460]    TraceD3_Pin=0x00040006
[10:29:58.460]  </debugvars>
[10:29:58.461]  
[10:29:58.462]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[10:29:58.462]    <block atomic="false" info="">
[10:29:58.462]      Sequence("CheckID");
[10:29:58.462]        <sequence name="CheckID" Pname="" disable="false" info="">
[10:29:58.463]          <block atomic="false" info="">
[10:29:58.463]            __var pidr1 = 0;
[10:29:58.463]              // -> [pidr1 <= 0x00000000]
[10:29:58.463]            __var pidr2 = 0;
[10:29:58.464]              // -> [pidr2 <= 0x00000000]
[10:29:58.464]            __var jep106id = 0;
[10:29:58.464]              // -> [jep106id <= 0x00000000]
[10:29:58.464]            __var ROMTableBase = 0;
[10:29:58.465]              // -> [ROMTableBase <= 0x00000000]
[10:29:58.465]            __ap = 0;      // AHB-AP
[10:29:58.465]              // -> [__ap <= 0x00000000]
[10:29:58.466]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[10:29:58.466]              // -> [ReadAP(0x000000F8) => 0xE00FF003]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.467]              // -> [ROMTableBase <= 0xE00FF000]
[10:29:58.467]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[10:29:58.469]              // -> [Read32(0xE00FFFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.470]              // -> [pidr1 <= 0x00000004]
[10:29:58.470]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[10:29:58.471]              // -> [Read32(0xE00FFFE8) => 0x0000000A]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.472]              // -> [pidr2 <= 0x0000000A]
[10:29:58.472]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[10:29:58.472]              // -> [jep106id <= 0x00000020]
[10:29:58.473]          </block>
[10:29:58.473]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[10:29:58.473]            // if-block "jep106id != 0x20"
[10:29:58.473]              // =>  FALSE
[10:29:58.474]            // skip if-block "jep106id != 0x20"
[10:29:58.474]          </control>
[10:29:58.474]        </sequence>
[10:29:58.474]    </block>
[10:29:58.475]  </sequence>
[10:29:58.475]  
[10:29:58.475]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[10:29:58.475]  
[10:29:58.476]  <debugvars>
[10:29:58.476]    // Pre-defined
[10:29:58.476]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:29:58.477]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:29:58.477]    __dp=0x00000000
[10:29:58.477]    __ap=0x00000000
[10:29:58.477]    __traceout=0x00000001      (SWO Trace)
[10:29:58.478]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:29:58.478]    __FlashAddr=0x00000000
[10:29:58.478]    __FlashLen=0x00000000
[10:29:58.478]    __FlashArg=0x00000000
[10:29:58.479]    __FlashOp=0x00000000
[10:29:58.479]    __Result=0x00000000
[10:29:58.479]    
[10:29:58.479]    // User-defined
[10:29:58.480]    DbgMCU_CR=0x00000007
[10:29:58.480]    DbgMCU_APB1_Fz=0x00000000
[10:29:58.480]    DbgMCU_APB2_Fz=0x00000000
[10:29:58.480]    TraceClk_Pin=0x00040002
[10:29:58.481]    TraceD0_Pin=0x00040003
[10:29:58.481]    TraceD1_Pin=0x00040004
[10:29:58.481]    TraceD2_Pin=0x00040005
[10:29:58.481]    TraceD3_Pin=0x00040006
[10:29:58.482]  </debugvars>
[10:29:58.482]  
[10:29:58.482]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[10:29:58.482]    <block atomic="false" info="">
[10:29:58.483]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[10:29:58.485]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.485]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[10:29:58.487]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.488]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[10:29:58.489]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.489]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[10:29:58.490]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.491]    </block>
[10:29:58.491]  </sequence>
[10:29:58.491]  
[10:29:58.546]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[10:29:58.546]  
[10:29:58.547]  <debugvars>
[10:29:58.547]    // Pre-defined
[10:29:58.548]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:29:58.548]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:29:58.548]    __dp=0x00000000
[10:29:58.548]    __ap=0x00000000
[10:29:58.549]    __traceout=0x00000001      (SWO Trace)
[10:29:58.549]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:29:58.549]    __FlashAddr=0x00000000
[10:29:58.549]    __FlashLen=0x00000000
[10:29:58.550]    __FlashArg=0x00000000
[10:29:58.550]    __FlashOp=0x00000000
[10:29:58.550]    __Result=0x00000000
[10:29:58.551]    
[10:29:58.551]    // User-defined
[10:29:58.551]    DbgMCU_CR=0x00000007
[10:29:58.551]    DbgMCU_APB1_Fz=0x00000000
[10:29:58.552]    DbgMCU_APB2_Fz=0x00000000
[10:29:58.552]    TraceClk_Pin=0x00040002
[10:29:58.552]    TraceD0_Pin=0x00040003
[10:29:58.553]    TraceD1_Pin=0x00040004
[10:29:58.553]    TraceD2_Pin=0x00040005
[10:29:58.553]    TraceD3_Pin=0x00040006
[10:29:58.553]  </debugvars>
[10:29:58.554]  
[10:29:58.554]  <sequence name="TraceStart" Pname="" disable="false" info="">
[10:29:58.554]    <block atomic="false" info="">
[10:29:58.554]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[10:29:58.555]        // -> [traceSWO <= 0x00000001]
[10:29:58.555]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[10:29:58.555]        // -> [traceTPIU <= 0x00000000]
[10:29:58.556]    </block>
[10:29:58.556]    <control if="traceSWO" while="" timeout="0" info="">
[10:29:58.556]      // if-block "traceSWO"
[10:29:58.556]        // =>  TRUE
[10:29:58.556]      <block atomic="false" info="">
[10:29:58.557]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[10:29:58.557]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[10:29:58.558]            <block atomic="false" info="">
[10:29:58.558]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[10:29:58.558]                // -> [dbgmcu_val <= 0x00000000]
[10:29:58.559]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[10:29:58.559]                // -> [dbgmcu_trace_val <= 0x00000000]
[10:29:58.559]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[10:29:58.561]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.561]                // -> [dbgmcu_val <= 0x00000007]
[10:29:58.561]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[10:29:58.562]                // -> [dbgmcu_trace_val <= 0x00000020]
[10:29:58.562]              Sequence("ConfigureTraceSWOPin");
[10:29:58.562]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[10:29:58.563]                  <block atomic="false" info="">
[10:29:58.563]                    __var pin     = 0;
[10:29:58.563]                      // -> [pin <= 0x00000000]
[10:29:58.563]                    __var port    = 0;
[10:29:58.564]                      // -> [port <= 0x00000000]
[10:29:58.564]                    __var portAdr = 0;
[10:29:58.565]                      // -> [portAdr <= 0x00000000]
[10:29:58.565]                    __var pos     = 0;
[10:29:58.565]                      // -> [pos <= 0x00000000]
[10:29:58.565]                    __var SWO_Pin = 0x00010003;          // PB3
[10:29:58.565]                      // -> [SWO_Pin <= 0x00010003]
[10:29:58.566]                  </block>
[10:29:58.566]                  <block atomic="false" info="configure SWO">
[10:29:58.566]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[10:29:58.567]                      // -> [pin <= 0x00000003]
[10:29:58.567]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[10:29:58.567]                      // -> [port <= 0x00000001]
[10:29:58.568]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[10:29:58.568]                      // -> [portAdr <= 0x40020400]
[10:29:58.569]                    pos = pin * 2;
[10:29:58.569]                      // -> [pos <= 0x00000006]
[10:29:58.569]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[10:29:58.571]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.572]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.573]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[10:29:58.575]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.576]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.577]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[10:29:58.578]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.580]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.580]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[10:29:58.582]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.583]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.584]                  </block>
[10:29:58.584]                  <control if="pin <  8" while="" timeout="0" info="">
[10:29:58.584]                    // if-block "pin <  8"
[10:29:58.585]                      // =>  TRUE
[10:29:58.586]                    <block atomic="false" info="">
[10:29:58.586]                      pos = ((pin    ) & 7) * 4;
[10:29:58.586]                        // -> [pos <= 0x0000000C]
[10:29:58.586]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[10:29:58.588]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.589]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.590]                    </block>
[10:29:58.590]                    // end if-block "pin <  8"
[10:29:58.590]                  </control>
[10:29:58.591]                  <control if="pin >= 8" while="" timeout="0" info="">
[10:29:58.591]                    // if-block "pin >= 8"
[10:29:58.591]                      // =>  FALSE
[10:29:58.591]                    // skip if-block "pin >= 8"
[10:29:58.592]                  </control>
[10:29:58.592]                </sequence>
[10:29:58.592]            </block>
[10:29:58.592]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[10:29:58.593]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[10:29:58.594]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.594]            </block>
[10:29:58.595]          </sequence>
[10:29:58.595]      </block>
[10:29:58.595]      // end if-block "traceSWO"
[10:29:58.596]    </control>
[10:29:58.596]    <control if="traceTPIU" while="" timeout="0" info="">
[10:29:58.596]      // if-block "traceTPIU"
[10:29:58.596]        // =>  FALSE
[10:29:58.597]      // skip if-block "traceTPIU"
[10:29:58.597]    </control>
[10:29:58.597]  </sequence>
[10:29:58.597]  
[10:29:58.615]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[10:29:58.615]  
[10:29:58.615]  <debugvars>
[10:29:58.616]    // Pre-defined
[10:29:58.616]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:29:58.617]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:29:58.617]    __dp=0x00000000
[10:29:58.618]    __ap=0x00000000
[10:29:58.618]    __traceout=0x00000001      (SWO Trace)
[10:29:58.618]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:29:58.619]    __FlashAddr=0x00000000
[10:29:58.619]    __FlashLen=0x00000000
[10:29:58.620]    __FlashArg=0x00000000
[10:29:58.620]    __FlashOp=0x00000000
[10:29:58.620]    __Result=0x00000000
[10:29:58.621]    
[10:29:58.621]    // User-defined
[10:29:58.621]    DbgMCU_CR=0x00000007
[10:29:58.621]    DbgMCU_APB1_Fz=0x00000000
[10:29:58.621]    DbgMCU_APB2_Fz=0x00000000
[10:29:58.622]    TraceClk_Pin=0x00040002
[10:29:58.622]    TraceD0_Pin=0x00040003
[10:29:58.622]    TraceD1_Pin=0x00040004
[10:29:58.622]    TraceD2_Pin=0x00040005
[10:29:58.623]    TraceD3_Pin=0x00040006
[10:29:58.623]  </debugvars>
[10:29:58.623]  
[10:29:58.624]  <sequence name="TraceStart" Pname="" disable="false" info="">
[10:29:58.624]    <block atomic="false" info="">
[10:29:58.624]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[10:29:58.624]        // -> [traceSWO <= 0x00000001]
[10:29:58.625]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[10:29:58.625]        // -> [traceTPIU <= 0x00000000]
[10:29:58.625]    </block>
[10:29:58.626]    <control if="traceSWO" while="" timeout="0" info="">
[10:29:58.626]      // if-block "traceSWO"
[10:29:58.626]        // =>  TRUE
[10:29:58.626]      <block atomic="false" info="">
[10:29:58.627]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[10:29:58.627]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[10:29:58.627]            <block atomic="false" info="">
[10:29:58.628]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[10:29:58.628]                // -> [dbgmcu_val <= 0x00000000]
[10:29:58.628]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[10:29:58.628]                // -> [dbgmcu_trace_val <= 0x00000000]
[10:29:58.628]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[10:29:58.630]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.630]                // -> [dbgmcu_val <= 0x00000007]
[10:29:58.630]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[10:29:58.631]                // -> [dbgmcu_trace_val <= 0x00000020]
[10:29:58.631]              Sequence("ConfigureTraceSWOPin");
[10:29:58.631]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[10:29:58.631]                  <block atomic="false" info="">
[10:29:58.632]                    __var pin     = 0;
[10:29:58.632]                      // -> [pin <= 0x00000000]
[10:29:58.632]                    __var port    = 0;
[10:29:58.632]                      // -> [port <= 0x00000000]
[10:29:58.633]                    __var portAdr = 0;
[10:29:58.633]                      // -> [portAdr <= 0x00000000]
[10:29:58.634]                    __var pos     = 0;
[10:29:58.634]                      // -> [pos <= 0x00000000]
[10:29:58.634]                    __var SWO_Pin = 0x00010003;          // PB3
[10:29:58.635]                      // -> [SWO_Pin <= 0x00010003]
[10:29:58.635]                  </block>
[10:29:58.635]                  <block atomic="false" info="configure SWO">
[10:29:58.636]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[10:29:58.636]                      // -> [pin <= 0x00000003]
[10:29:58.636]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[10:29:58.636]                      // -> [port <= 0x00000001]
[10:29:58.637]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[10:29:58.637]                      // -> [portAdr <= 0x40020400]
[10:29:58.638]                    pos = pin * 2;
[10:29:58.638]                      // -> [pos <= 0x00000006]
[10:29:58.638]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[10:29:58.639]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.641]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.641]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[10:29:58.643]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.644]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.644]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[10:29:58.646]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.647]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.648]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[10:29:58.649]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.651]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.651]                  </block>
[10:29:58.651]                  <control if="pin <  8" while="" timeout="0" info="">
[10:29:58.652]                    // if-block "pin <  8"
[10:29:58.652]                      // =>  TRUE
[10:29:58.652]                    <block atomic="false" info="">
[10:29:58.654]                      pos = ((pin    ) & 7) * 4;
[10:29:58.654]                        // -> [pos <= 0x0000000C]
[10:29:58.654]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[10:29:58.655]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.657]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.658]                    </block>
[10:29:58.658]                    // end if-block "pin <  8"
[10:29:58.658]                  </control>
[10:29:58.658]                  <control if="pin >= 8" while="" timeout="0" info="">
[10:29:58.659]                    // if-block "pin >= 8"
[10:29:58.659]                      // =>  FALSE
[10:29:58.659]                    // skip if-block "pin >= 8"
[10:29:58.660]                  </control>
[10:29:58.660]                </sequence>
[10:29:58.660]            </block>
[10:29:58.660]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[10:29:58.661]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[10:29:58.662]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:58.662]            </block>
[10:29:58.663]          </sequence>
[10:29:58.663]      </block>
[10:29:58.663]      // end if-block "traceSWO"
[10:29:58.664]    </control>
[10:29:58.664]    <control if="traceTPIU" while="" timeout="0" info="">
[10:29:58.665]      // if-block "traceTPIU"
[10:29:58.665]        // =>  FALSE
[10:29:58.665]      // skip if-block "traceTPIU"
[10:29:58.666]    </control>
[10:29:58.666]  </sequence>
[10:29:58.666]  
[10:29:59.530]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[10:29:59.530]  
[10:29:59.577]  <debugvars>
[10:29:59.577]    // Pre-defined
[10:29:59.578]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:29:59.578]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:29:59.578]    __dp=0x00000000
[10:29:59.579]    __ap=0x00000000
[10:29:59.579]    __traceout=0x00000001      (SWO Trace)
[10:29:59.580]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:29:59.580]    __FlashAddr=0x00000000
[10:29:59.580]    __FlashLen=0x00000000
[10:29:59.580]    __FlashArg=0x00000000
[10:29:59.581]    __FlashOp=0x00000000
[10:29:59.581]    __Result=0x00000000
[10:29:59.581]    
[10:29:59.581]    // User-defined
[10:29:59.581]    DbgMCU_CR=0x00000007
[10:29:59.582]    DbgMCU_APB1_Fz=0x00000000
[10:29:59.582]    DbgMCU_APB2_Fz=0x00000000
[10:29:59.582]    TraceClk_Pin=0x00040002
[10:29:59.582]    TraceD0_Pin=0x00040003
[10:29:59.583]    TraceD1_Pin=0x00040004
[10:29:59.583]    TraceD2_Pin=0x00040005
[10:29:59.584]    TraceD3_Pin=0x00040006
[10:29:59.584]  </debugvars>
[10:29:59.585]  
[10:29:59.585]  <sequence name="TraceStart" Pname="" disable="false" info="">
[10:29:59.585]    <block atomic="false" info="">
[10:29:59.586]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[10:29:59.586]        // -> [traceSWO <= 0x00000001]
[10:29:59.586]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[10:29:59.587]        // -> [traceTPIU <= 0x00000000]
[10:29:59.587]    </block>
[10:29:59.587]    <control if="traceSWO" while="" timeout="0" info="">
[10:29:59.588]      // if-block "traceSWO"
[10:29:59.588]        // =>  TRUE
[10:29:59.588]      <block atomic="false" info="">
[10:29:59.588]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[10:29:59.589]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[10:29:59.589]            <block atomic="false" info="">
[10:29:59.589]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[10:29:59.590]                // -> [dbgmcu_val <= 0x00000000]
[10:29:59.590]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[10:29:59.590]                // -> [dbgmcu_trace_val <= 0x00000000]
[10:29:59.591]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[10:29:59.592]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[10:29:59.592]                // -> [dbgmcu_val <= 0x00000007]
[10:29:59.592]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[10:29:59.593]                // -> [dbgmcu_trace_val <= 0x00000020]
[10:29:59.593]              Sequence("ConfigureTraceSWOPin");
[10:29:59.593]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[10:29:59.594]                  <block atomic="false" info="">
[10:29:59.594]                    __var pin     = 0;
[10:29:59.594]                      // -> [pin <= 0x00000000]
[10:29:59.594]                    __var port    = 0;
[10:29:59.595]                      // -> [port <= 0x00000000]
[10:29:59.595]                    __var portAdr = 0;
[10:29:59.595]                      // -> [portAdr <= 0x00000000]
[10:29:59.595]                    __var pos     = 0;
[10:29:59.596]                      // -> [pos <= 0x00000000]
[10:29:59.596]                    __var SWO_Pin = 0x00010003;          // PB3
[10:29:59.596]                      // -> [SWO_Pin <= 0x00010003]
[10:29:59.596]                  </block>
[10:29:59.597]                  <block atomic="false" info="configure SWO">
[10:29:59.597]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[10:29:59.597]                      // -> [pin <= 0x00000003]
[10:29:59.597]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[10:29:59.598]                      // -> [port <= 0x00000001]
[10:29:59.598]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[10:29:59.599]                      // -> [portAdr <= 0x40020400]
[10:29:59.599]                    pos = pin * 2;
[10:29:59.599]                      // -> [pos <= 0x00000006]
[10:29:59.600]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[10:29:59.601]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:29:59.603]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:59.603]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[10:29:59.605]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[10:29:59.606]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:59.606]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[10:29:59.608]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[10:29:59.610]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:59.610]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[10:29:59.611]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[10:29:59.613]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:59.613]                  </block>
[10:29:59.613]                  <control if="pin <  8" while="" timeout="0" info="">
[10:29:59.614]                    // if-block "pin <  8"
[10:29:59.614]                      // =>  TRUE
[10:29:59.615]                    <block atomic="false" info="">
[10:29:59.615]                      pos = ((pin    ) & 7) * 4;
[10:29:59.615]                        // -> [pos <= 0x0000000C]
[10:29:59.615]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[10:29:59.617]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:29:59.619]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:59.619]                    </block>
[10:29:59.619]                    // end if-block "pin <  8"
[10:29:59.619]                  </control>
[10:29:59.620]                  <control if="pin >= 8" while="" timeout="0" info="">
[10:29:59.620]                    // if-block "pin >= 8"
[10:29:59.620]                      // =>  FALSE
[10:29:59.620]                    // skip if-block "pin >= 8"
[10:29:59.621]                  </control>
[10:29:59.621]                </sequence>
[10:29:59.621]            </block>
[10:29:59.622]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[10:29:59.622]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[10:29:59.623]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[10:29:59.623]            </block>
[10:29:59.624]          </sequence>
[10:29:59.625]      </block>
[10:29:59.625]      // end if-block "traceSWO"
[10:29:59.625]    </control>
[10:29:59.625]    <control if="traceTPIU" while="" timeout="0" info="">
[10:29:59.626]      // if-block "traceTPIU"
[10:29:59.626]        // =>  FALSE
[10:29:59.626]      // skip if-block "traceTPIU"
[10:29:59.626]    </control>
[10:29:59.627]  </sequence>
[10:29:59.627]  
[10:46:47.504]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[10:46:47.504]  
[10:46:47.538]  <debugvars>
[10:46:47.538]    // Pre-defined
[10:46:47.539]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:46:47.539]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:46:47.539]    __dp=0x00000000
[10:46:47.540]    __ap=0x00000000
[10:46:47.540]    __traceout=0x00000001      (SWO Trace)
[10:46:47.541]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:46:47.541]    __FlashAddr=0x00000000
[10:46:47.541]    __FlashLen=0x00000000
[10:46:47.542]    __FlashArg=0x00000000
[10:46:47.542]    __FlashOp=0x00000000
[10:46:47.542]    __Result=0x00000000
[10:46:47.543]    
[10:46:47.543]    // User-defined
[10:46:47.543]    DbgMCU_CR=0x00000007
[10:46:47.543]    DbgMCU_APB1_Fz=0x00000000
[10:46:47.543]    DbgMCU_APB2_Fz=0x00000000
[10:46:47.544]    TraceClk_Pin=0x00040002
[10:46:47.544]    TraceD0_Pin=0x00040003
[10:46:47.544]    TraceD1_Pin=0x00040004
[10:46:47.544]    TraceD2_Pin=0x00040005
[10:46:47.545]    TraceD3_Pin=0x00040006
[10:46:47.545]  </debugvars>
[10:46:47.545]  
[10:46:47.545]  <sequence name="TraceStop" Pname="" disable="false" info="">
[10:46:47.546]    <block atomic="false" info="">
[10:46:47.546]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[10:46:47.546]        // -> [traceSWO <= 0x00000001]
[10:46:47.547]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[10:46:47.547]        // -> [traceTPIU <= 0x00000000]
[10:46:47.547]    </block>
[10:46:47.547]    <control if="traceSWO" while="" timeout="0" info="">
[10:46:47.548]      // if-block "traceSWO"
[10:46:47.548]        // =>  TRUE
[10:46:47.548]      <block atomic="false" info="">
[10:46:47.549]        Sequence("DisableTraceSWO");
[10:46:47.549]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[10:46:47.549]            <block atomic="false" info="">
[10:46:47.549]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[10:46:47.550]                // -> [dbgmcu_val <= 0x00000000]
[10:46:47.550]            </block>
[10:46:47.550]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[10:46:47.550]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[10:46:47.552]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[10:46:47.552]                // -> [dbgmcu_val <= 0x00000007]
[10:46:47.552]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[10:46:47.554]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:47.554]            </block>
[10:46:47.554]          </sequence>
[10:46:47.555]      </block>
[10:46:47.556]      // end if-block "traceSWO"
[10:46:47.556]    </control>
[10:46:47.556]    <control if="traceTPIU" while="" timeout="0" info="">
[10:46:47.557]      // if-block "traceTPIU"
[10:46:47.557]        // =>  FALSE
[10:46:47.558]      // skip if-block "traceTPIU"
[10:46:47.558]    </control>
[10:46:47.559]  </sequence>
[10:46:47.559]  
[10:46:53.557]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[10:46:53.557]  
[10:46:53.604]  <debugvars>
[10:46:53.604]    // Pre-defined
[10:46:53.604]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:46:53.605]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:46:53.605]    __dp=0x00000000
[10:46:53.605]    __ap=0x00000000
[10:46:53.605]    __traceout=0x00000001      (SWO Trace)
[10:46:53.606]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:46:53.606]    __FlashAddr=0x00000000
[10:46:53.606]    __FlashLen=0x00000000
[10:46:53.606]    __FlashArg=0x00000000
[10:46:53.607]    __FlashOp=0x00000000
[10:46:53.607]    __Result=0x00000000
[10:46:53.607]    
[10:46:53.607]    // User-defined
[10:46:53.607]    DbgMCU_CR=0x00000007
[10:46:53.608]    DbgMCU_APB1_Fz=0x00000000
[10:46:53.608]    DbgMCU_APB2_Fz=0x00000000
[10:46:53.609]    TraceClk_Pin=0x00040002
[10:46:53.609]    TraceD0_Pin=0x00040003
[10:46:53.609]    TraceD1_Pin=0x00040004
[10:46:53.609]    TraceD2_Pin=0x00040005
[10:46:53.609]    TraceD3_Pin=0x00040006
[10:46:53.610]  </debugvars>
[10:46:53.611]  
[10:46:53.611]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[10:46:53.611]    <block atomic="false" info="">
[10:46:53.611]      Sequence("CheckID");
[10:46:53.612]        <sequence name="CheckID" Pname="" disable="false" info="">
[10:46:53.612]          <block atomic="false" info="">
[10:46:53.612]            __var pidr1 = 0;
[10:46:53.612]              // -> [pidr1 <= 0x00000000]
[10:46:53.613]            __var pidr2 = 0;
[10:46:53.613]              // -> [pidr2 <= 0x00000000]
[10:46:53.613]            __var jep106id = 0;
[10:46:53.613]              // -> [jep106id <= 0x00000000]
[10:46:53.614]            __var ROMTableBase = 0;
[10:46:53.614]              // -> [ROMTableBase <= 0x00000000]
[10:46:53.614]            __ap = 0;      // AHB-AP
[10:46:53.614]              // -> [__ap <= 0x00000000]
[10:46:53.615]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[10:46:53.616]              // -> [ReadAP(0x000000F8) => 0xE00FF003]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.617]              // -> [ROMTableBase <= 0xE00FF000]
[10:46:53.617]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[10:46:53.619]              // -> [Read32(0xE00FFFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.619]              // -> [pidr1 <= 0x00000004]
[10:46:53.619]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[10:46:53.621]              // -> [Read32(0xE00FFFE8) => 0x0000000A]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.621]              // -> [pidr2 <= 0x0000000A]
[10:46:53.621]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[10:46:53.621]              // -> [jep106id <= 0x00000020]
[10:46:53.622]          </block>
[10:46:53.622]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[10:46:53.622]            // if-block "jep106id != 0x20"
[10:46:53.623]              // =>  FALSE
[10:46:53.623]            // skip if-block "jep106id != 0x20"
[10:46:53.624]          </control>
[10:46:53.624]        </sequence>
[10:46:53.624]    </block>
[10:46:53.625]  </sequence>
[10:46:53.625]  
[10:46:53.626]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[10:46:53.626]  
[10:46:53.626]  <debugvars>
[10:46:53.627]    // Pre-defined
[10:46:53.627]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:46:53.627]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:46:53.628]    __dp=0x00000000
[10:46:53.628]    __ap=0x00000000
[10:46:53.628]    __traceout=0x00000001      (SWO Trace)
[10:46:53.628]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:46:53.629]    __FlashAddr=0x00000000
[10:46:53.629]    __FlashLen=0x00000000
[10:46:53.629]    __FlashArg=0x00000000
[10:46:53.630]    __FlashOp=0x00000000
[10:46:53.630]    __Result=0x00000000
[10:46:53.630]    
[10:46:53.630]    // User-defined
[10:46:53.630]    DbgMCU_CR=0x00000007
[10:46:53.631]    DbgMCU_APB1_Fz=0x00000000
[10:46:53.631]    DbgMCU_APB2_Fz=0x00000000
[10:46:53.631]    TraceClk_Pin=0x00040002
[10:46:53.631]    TraceD0_Pin=0x00040003
[10:46:53.632]    TraceD1_Pin=0x00040004
[10:46:53.632]    TraceD2_Pin=0x00040005
[10:46:53.632]    TraceD3_Pin=0x00040006
[10:46:53.632]  </debugvars>
[10:46:53.633]  
[10:46:53.633]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[10:46:53.633]    <block atomic="false" info="">
[10:46:53.633]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[10:46:53.635]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.636]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[10:46:53.637]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.637]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[10:46:53.639]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.640]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[10:46:53.641]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.641]    </block>
[10:46:53.641]  </sequence>
[10:46:53.642]  
[10:46:53.692]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[10:46:53.692]  
[10:46:53.692]  <debugvars>
[10:46:53.693]    // Pre-defined
[10:46:53.693]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:46:53.693]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:46:53.693]    __dp=0x00000000
[10:46:53.694]    __ap=0x00000000
[10:46:53.694]    __traceout=0x00000001      (SWO Trace)
[10:46:53.694]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:46:53.694]    __FlashAddr=0x00000000
[10:46:53.695]    __FlashLen=0x00000000
[10:46:53.695]    __FlashArg=0x00000000
[10:46:53.695]    __FlashOp=0x00000000
[10:46:53.695]    __Result=0x00000000
[10:46:53.695]    
[10:46:53.695]    // User-defined
[10:46:53.696]    DbgMCU_CR=0x00000007
[10:46:53.696]    DbgMCU_APB1_Fz=0x00000000
[10:46:53.696]    DbgMCU_APB2_Fz=0x00000000
[10:46:53.696]    TraceClk_Pin=0x00040002
[10:46:53.697]    TraceD0_Pin=0x00040003
[10:46:53.698]    TraceD1_Pin=0x00040004
[10:46:53.698]    TraceD2_Pin=0x00040005
[10:46:53.698]    TraceD3_Pin=0x00040006
[10:46:53.698]  </debugvars>
[10:46:53.698]  
[10:46:53.699]  <sequence name="TraceStart" Pname="" disable="false" info="">
[10:46:53.699]    <block atomic="false" info="">
[10:46:53.699]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[10:46:53.699]        // -> [traceSWO <= 0x00000001]
[10:46:53.700]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[10:46:53.700]        // -> [traceTPIU <= 0x00000000]
[10:46:53.700]    </block>
[10:46:53.701]    <control if="traceSWO" while="" timeout="0" info="">
[10:46:53.701]      // if-block "traceSWO"
[10:46:53.701]        // =>  TRUE
[10:46:53.702]      <block atomic="false" info="">
[10:46:53.702]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[10:46:53.702]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[10:46:53.702]            <block atomic="false" info="">
[10:46:53.703]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[10:46:53.703]                // -> [dbgmcu_val <= 0x00000000]
[10:46:53.703]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[10:46:53.703]                // -> [dbgmcu_trace_val <= 0x00000000]
[10:46:53.703]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[10:46:53.704]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.705]                // -> [dbgmcu_val <= 0x00000007]
[10:46:53.705]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[10:46:53.705]                // -> [dbgmcu_trace_val <= 0x00000020]
[10:46:53.706]              Sequence("ConfigureTraceSWOPin");
[10:46:53.706]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[10:46:53.706]                  <block atomic="false" info="">
[10:46:53.706]                    __var pin     = 0;
[10:46:53.707]                      // -> [pin <= 0x00000000]
[10:46:53.707]                    __var port    = 0;
[10:46:53.707]                      // -> [port <= 0x00000000]
[10:46:53.708]                    __var portAdr = 0;
[10:46:53.708]                      // -> [portAdr <= 0x00000000]
[10:46:53.708]                    __var pos     = 0;
[10:46:53.708]                      // -> [pos <= 0x00000000]
[10:46:53.709]                    __var SWO_Pin = 0x00010003;          // PB3
[10:46:53.709]                      // -> [SWO_Pin <= 0x00010003]
[10:46:53.709]                  </block>
[10:46:53.710]                  <block atomic="false" info="configure SWO">
[10:46:53.710]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[10:46:53.710]                      // -> [pin <= 0x00000003]
[10:46:53.710]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[10:46:53.711]                      // -> [port <= 0x00000001]
[10:46:53.711]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[10:46:53.711]                      // -> [portAdr <= 0x40020400]
[10:46:53.712]                    pos = pin * 2;
[10:46:53.712]                      // -> [pos <= 0x00000006]
[10:46:53.712]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[10:46:53.713]                      // -> [Read32(0x40023830) => 0x00000007]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.715]                      // -> [Write32(0x40023830, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.715]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[10:46:53.717]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.718]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.718]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[10:46:53.720]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.721]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.722]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[10:46:53.723]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.725]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.725]                  </block>
[10:46:53.725]                  <control if="pin <  8" while="" timeout="0" info="">
[10:46:53.726]                    // if-block "pin <  8"
[10:46:53.726]                      // =>  TRUE
[10:46:53.726]                    <block atomic="false" info="">
[10:46:53.727]                      pos = ((pin    ) & 7) * 4;
[10:46:53.727]                        // -> [pos <= 0x0000000C]
[10:46:53.728]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[10:46:53.729]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.730]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.731]                    </block>
[10:46:53.731]                    // end if-block "pin <  8"
[10:46:53.731]                  </control>
[10:46:53.732]                  <control if="pin >= 8" while="" timeout="0" info="">
[10:46:53.732]                    // if-block "pin >= 8"
[10:46:53.732]                      // =>  FALSE
[10:46:53.733]                    // skip if-block "pin >= 8"
[10:46:53.733]                  </control>
[10:46:53.733]                </sequence>
[10:46:53.733]            </block>
[10:46:53.734]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[10:46:53.734]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[10:46:53.735]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.736]            </block>
[10:46:53.736]          </sequence>
[10:46:53.736]      </block>
[10:46:53.737]      // end if-block "traceSWO"
[10:46:53.737]    </control>
[10:46:53.737]    <control if="traceTPIU" while="" timeout="0" info="">
[10:46:53.737]      // if-block "traceTPIU"
[10:46:53.738]        // =>  FALSE
[10:46:53.738]      // skip if-block "traceTPIU"
[10:46:53.739]    </control>
[10:46:53.739]  </sequence>
[10:46:53.739]  
[10:46:53.758]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[10:46:53.758]  
[10:46:53.758]  <debugvars>
[10:46:53.759]    // Pre-defined
[10:46:53.759]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:46:53.759]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:46:53.759]    __dp=0x00000000
[10:46:53.760]    __ap=0x00000000
[10:46:53.760]    __traceout=0x00000001      (SWO Trace)
[10:46:53.760]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:46:53.760]    __FlashAddr=0x00000000
[10:46:53.761]    __FlashLen=0x00000000
[10:46:53.761]    __FlashArg=0x00000000
[10:46:53.761]    __FlashOp=0x00000000
[10:46:53.761]    __Result=0x00000000
[10:46:53.762]    
[10:46:53.762]    // User-defined
[10:46:53.762]    DbgMCU_CR=0x00000007
[10:46:53.762]    DbgMCU_APB1_Fz=0x00000000
[10:46:53.763]    DbgMCU_APB2_Fz=0x00000000
[10:46:53.763]    TraceClk_Pin=0x00040002
[10:46:53.763]    TraceD0_Pin=0x00040003
[10:46:53.763]    TraceD1_Pin=0x00040004
[10:46:53.764]    TraceD2_Pin=0x00040005
[10:46:53.764]    TraceD3_Pin=0x00040006
[10:46:53.764]  </debugvars>
[10:46:53.764]  
[10:46:53.765]  <sequence name="TraceStart" Pname="" disable="false" info="">
[10:46:53.765]    <block atomic="false" info="">
[10:46:53.765]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[10:46:53.766]        // -> [traceSWO <= 0x00000001]
[10:46:53.766]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[10:46:53.766]        // -> [traceTPIU <= 0x00000000]
[10:46:53.766]    </block>
[10:46:53.767]    <control if="traceSWO" while="" timeout="0" info="">
[10:46:53.767]      // if-block "traceSWO"
[10:46:53.767]        // =>  TRUE
[10:46:53.767]      <block atomic="false" info="">
[10:46:53.768]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[10:46:53.768]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[10:46:53.768]            <block atomic="false" info="">
[10:46:53.768]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[10:46:53.769]                // -> [dbgmcu_val <= 0x00000000]
[10:46:53.769]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[10:46:53.769]                // -> [dbgmcu_trace_val <= 0x00000000]
[10:46:53.769]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[10:46:53.771]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.771]                // -> [dbgmcu_val <= 0x00000007]
[10:46:53.771]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[10:46:53.772]                // -> [dbgmcu_trace_val <= 0x00000020]
[10:46:53.772]              Sequence("ConfigureTraceSWOPin");
[10:46:53.772]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[10:46:53.772]                  <block atomic="false" info="">
[10:46:53.773]                    __var pin     = 0;
[10:46:53.773]                      // -> [pin <= 0x00000000]
[10:46:53.773]                    __var port    = 0;
[10:46:53.773]                      // -> [port <= 0x00000000]
[10:46:53.773]                    __var portAdr = 0;
[10:46:53.774]                      // -> [portAdr <= 0x00000000]
[10:46:53.774]                    __var pos     = 0;
[10:46:53.775]                      // -> [pos <= 0x00000000]
[10:46:53.775]                    __var SWO_Pin = 0x00010003;          // PB3
[10:46:53.775]                      // -> [SWO_Pin <= 0x00010003]
[10:46:53.775]                  </block>
[10:46:53.776]                  <block atomic="false" info="configure SWO">
[10:46:53.776]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[10:46:53.776]                      // -> [pin <= 0x00000003]
[10:46:53.776]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[10:46:53.777]                      // -> [port <= 0x00000001]
[10:46:53.777]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[10:46:53.777]                      // -> [portAdr <= 0x40020400]
[10:46:53.777]                    pos = pin * 2;
[10:46:53.777]                      // -> [pos <= 0x00000006]
[10:46:53.778]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[10:46:53.779]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.781]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.781]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[10:46:53.783]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.784]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.784]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[10:46:53.786]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.787]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.787]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[10:46:53.788]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.790]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.790]                  </block>
[10:46:53.791]                  <control if="pin <  8" while="" timeout="0" info="">
[10:46:53.791]                    // if-block "pin <  8"
[10:46:53.791]                      // =>  TRUE
[10:46:53.792]                    <block atomic="false" info="">
[10:46:53.792]                      pos = ((pin    ) & 7) * 4;
[10:46:53.793]                        // -> [pos <= 0x0000000C]
[10:46:53.793]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[10:46:53.794]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.796]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.796]                    </block>
[10:46:53.796]                    // end if-block "pin <  8"
[10:46:53.796]                  </control>
[10:46:53.797]                  <control if="pin >= 8" while="" timeout="0" info="">
[10:46:53.797]                    // if-block "pin >= 8"
[10:46:53.797]                      // =>  FALSE
[10:46:53.797]                    // skip if-block "pin >= 8"
[10:46:53.797]                  </control>
[10:46:53.798]                </sequence>
[10:46:53.798]            </block>
[10:46:53.798]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[10:46:53.798]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[10:46:53.800]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:53.800]            </block>
[10:46:53.801]          </sequence>
[10:46:53.801]      </block>
[10:46:53.801]      // end if-block "traceSWO"
[10:46:53.801]    </control>
[10:46:53.801]    <control if="traceTPIU" while="" timeout="0" info="">
[10:46:53.802]      // if-block "traceTPIU"
[10:46:53.802]        // =>  FALSE
[10:46:53.802]      // skip if-block "traceTPIU"
[10:46:53.802]    </control>
[10:46:53.803]  </sequence>
[10:46:53.803]  
[10:46:54.804]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[10:46:54.804]  
[10:46:54.852]  <debugvars>
[10:46:54.852]    // Pre-defined
[10:46:54.852]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:46:54.853]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:46:54.853]    __dp=0x00000000
[10:46:54.853]    __ap=0x00000000
[10:46:54.854]    __traceout=0x00000001      (SWO Trace)
[10:46:54.854]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:46:54.854]    __FlashAddr=0x00000000
[10:46:54.854]    __FlashLen=0x00000000
[10:46:54.855]    __FlashArg=0x00000000
[10:46:54.855]    __FlashOp=0x00000000
[10:46:54.855]    __Result=0x00000000
[10:46:54.855]    
[10:46:54.855]    // User-defined
[10:46:54.855]    DbgMCU_CR=0x00000007
[10:46:54.856]    DbgMCU_APB1_Fz=0x00000000
[10:46:54.856]    DbgMCU_APB2_Fz=0x00000000
[10:46:54.856]    TraceClk_Pin=0x00040002
[10:46:54.857]    TraceD0_Pin=0x00040003
[10:46:54.857]    TraceD1_Pin=0x00040004
[10:46:54.857]    TraceD2_Pin=0x00040005
[10:46:54.857]    TraceD3_Pin=0x00040006
[10:46:54.858]  </debugvars>
[10:46:54.858]  
[10:46:54.858]  <sequence name="TraceStart" Pname="" disable="false" info="">
[10:46:54.858]    <block atomic="false" info="">
[10:46:54.859]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[10:46:54.859]        // -> [traceSWO <= 0x00000001]
[10:46:54.859]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[10:46:54.860]        // -> [traceTPIU <= 0x00000000]
[10:46:54.860]    </block>
[10:46:54.861]    <control if="traceSWO" while="" timeout="0" info="">
[10:46:54.861]      // if-block "traceSWO"
[10:46:54.861]        // =>  TRUE
[10:46:54.862]      <block atomic="false" info="">
[10:46:54.862]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[10:46:54.862]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[10:46:54.862]            <block atomic="false" info="">
[10:46:54.862]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[10:46:54.863]                // -> [dbgmcu_val <= 0x00000000]
[10:46:54.863]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[10:46:54.863]                // -> [dbgmcu_trace_val <= 0x00000000]
[10:46:54.864]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[10:46:54.865]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[10:46:54.865]                // -> [dbgmcu_val <= 0x00000007]
[10:46:54.866]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[10:46:54.866]                // -> [dbgmcu_trace_val <= 0x00000020]
[10:46:54.866]              Sequence("ConfigureTraceSWOPin");
[10:46:54.867]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[10:46:54.867]                  <block atomic="false" info="">
[10:46:54.867]                    __var pin     = 0;
[10:46:54.867]                      // -> [pin <= 0x00000000]
[10:46:54.868]                    __var port    = 0;
[10:46:54.868]                      // -> [port <= 0x00000000]
[10:46:54.868]                    __var portAdr = 0;
[10:46:54.868]                      // -> [portAdr <= 0x00000000]
[10:46:54.869]                    __var pos     = 0;
[10:46:54.869]                      // -> [pos <= 0x00000000]
[10:46:54.869]                    __var SWO_Pin = 0x00010003;          // PB3
[10:46:54.870]                      // -> [SWO_Pin <= 0x00010003]
[10:46:54.870]                  </block>
[10:46:54.870]                  <block atomic="false" info="configure SWO">
[10:46:54.870]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[10:46:54.871]                      // -> [pin <= 0x00000003]
[10:46:54.871]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[10:46:54.871]                      // -> [port <= 0x00000001]
[10:46:54.871]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[10:46:54.872]                      // -> [portAdr <= 0x40020400]
[10:46:54.872]                    pos = pin * 2;
[10:46:54.872]                      // -> [pos <= 0x00000006]
[10:46:54.872]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[10:46:54.874]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:46:54.875]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:54.876]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[10:46:54.877]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[10:46:54.879]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:54.879]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[10:46:54.881]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[10:46:54.882]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:54.883]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[10:46:54.884]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[10:46:54.886]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:54.886]                  </block>
[10:46:54.886]                  <control if="pin <  8" while="" timeout="0" info="">
[10:46:54.886]                    // if-block "pin <  8"
[10:46:54.886]                      // =>  TRUE
[10:46:54.887]                    <block atomic="false" info="">
[10:46:54.888]                      pos = ((pin    ) & 7) * 4;
[10:46:54.888]                        // -> [pos <= 0x0000000C]
[10:46:54.888]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[10:46:54.889]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:46:54.890]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:54.891]                    </block>
[10:46:54.892]                    // end if-block "pin <  8"
[10:46:54.892]                  </control>
[10:46:54.892]                  <control if="pin >= 8" while="" timeout="0" info="">
[10:46:54.892]                    // if-block "pin >= 8"
[10:46:54.893]                      // =>  FALSE
[10:46:54.893]                    // skip if-block "pin >= 8"
[10:46:54.893]                  </control>
[10:46:54.893]                </sequence>
[10:46:54.894]            </block>
[10:46:54.894]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[10:46:54.894]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[10:46:54.895]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[10:46:54.896]            </block>
[10:46:54.896]          </sequence>
[10:46:54.897]      </block>
[10:46:54.897]      // end if-block "traceSWO"
[10:46:54.897]    </control>
[10:46:54.897]    <control if="traceTPIU" while="" timeout="0" info="">
[10:46:54.898]      // if-block "traceTPIU"
[10:46:54.898]        // =>  FALSE
[10:46:54.898]      // skip if-block "traceTPIU"
[10:46:54.899]    </control>
[10:46:54.899]  </sequence>
[10:46:54.899]  
[10:49:41.103]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[10:49:41.103]  
[10:49:41.151]  <debugvars>
[10:49:41.151]    // Pre-defined
[10:49:41.152]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:49:41.153]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:49:41.153]    __dp=0x00000000
[10:49:41.153]    __ap=0x00000000
[10:49:41.154]    __traceout=0x00000001      (SWO Trace)
[10:49:41.154]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:49:41.155]    __FlashAddr=0x00000000
[10:49:41.155]    __FlashLen=0x00000000
[10:49:41.156]    __FlashArg=0x00000000
[10:49:41.156]    __FlashOp=0x00000000
[10:49:41.156]    __Result=0x00000000
[10:49:41.157]    
[10:49:41.157]    // User-defined
[10:49:41.158]    DbgMCU_CR=0x00000007
[10:49:41.158]    DbgMCU_APB1_Fz=0x00000000
[10:49:41.158]    DbgMCU_APB2_Fz=0x00000000
[10:49:41.159]    TraceClk_Pin=0x00040002
[10:49:41.159]    TraceD0_Pin=0x00040003
[10:49:41.159]    TraceD1_Pin=0x00040004
[10:49:41.159]    TraceD2_Pin=0x00040005
[10:49:41.160]    TraceD3_Pin=0x00040006
[10:49:41.160]  </debugvars>
[10:49:41.160]  
[10:49:41.160]  <sequence name="TraceStop" Pname="" disable="false" info="">
[10:49:41.161]    <block atomic="false" info="">
[10:49:41.161]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[10:49:41.162]        // -> [traceSWO <= 0x00000001]
[10:49:41.162]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[10:49:41.163]        // -> [traceTPIU <= 0x00000000]
[10:49:41.163]    </block>
[10:49:41.163]    <control if="traceSWO" while="" timeout="0" info="">
[10:49:41.163]      // if-block "traceSWO"
[10:49:41.163]        // =>  TRUE
[10:49:41.164]      <block atomic="false" info="">
[10:49:41.165]        Sequence("DisableTraceSWO");
[10:49:41.165]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[10:49:41.165]            <block atomic="false" info="">
[10:49:41.165]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[10:49:41.166]                // -> [dbgmcu_val <= 0x00000000]
[10:49:41.166]            </block>
[10:49:41.166]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[10:49:41.166]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[10:49:41.167]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[10:49:41.168]                // -> [dbgmcu_val <= 0x00000007]
[10:49:41.168]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[10:49:41.170]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[10:49:41.170]            </block>
[10:49:41.170]          </sequence>
[10:49:41.171]      </block>
[10:49:41.172]      // end if-block "traceSWO"
[10:49:41.172]    </control>
[10:49:41.172]    <control if="traceTPIU" while="" timeout="0" info="">
[10:49:41.173]      // if-block "traceTPIU"
[10:49:41.173]        // =>  FALSE
[10:49:41.173]      // skip if-block "traceTPIU"
[10:49:41.174]    </control>
[10:49:41.174]  </sequence>
[10:49:41.174]  
[10:50:05.776]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[10:50:05.776]  
[10:50:05.824]  <debugvars>
[10:50:05.824]    // Pre-defined
[10:50:05.825]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:50:05.825]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[10:50:05.825]    __dp=0x00000000
[10:50:05.826]    __ap=0x00000000
[10:50:05.826]    __traceout=0x00000001      (SWO Trace)
[10:50:05.826]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:50:05.826]    __FlashAddr=0x00000000
[10:50:05.827]    __FlashLen=0x00000000
[10:50:05.827]    __FlashArg=0x00000000
[10:50:05.827]    __FlashOp=0x00000000
[10:50:05.827]    __Result=0x00000000
[10:50:05.828]    
[10:50:05.828]    // User-defined
[10:50:05.828]    DbgMCU_CR=0x00000007
[10:50:05.828]    DbgMCU_APB1_Fz=0x00000000
[10:50:05.829]    DbgMCU_APB2_Fz=0x00000000
[10:50:05.829]    TraceClk_Pin=0x00040002
[10:50:05.829]    TraceD0_Pin=0x00040003
[10:50:05.829]    TraceD1_Pin=0x00040004
[10:50:05.830]    TraceD2_Pin=0x00040005
[10:50:05.830]    TraceD3_Pin=0x00040006
[10:50:05.830]  </debugvars>
[10:50:05.830]  
[10:50:05.831]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[10:50:05.831]    <block atomic="false" info="">
[10:50:05.831]      Sequence("CheckID");
[10:50:05.831]        <sequence name="CheckID" Pname="" disable="false" info="">
[10:50:05.832]          <block atomic="false" info="">
[10:50:05.832]            __var pidr1 = 0;
[10:50:05.832]              // -> [pidr1 <= 0x00000000]
[10:50:05.833]            __var pidr2 = 0;
[10:50:05.833]              // -> [pidr2 <= 0x00000000]
[10:50:05.834]            __var jep106id = 0;
[10:50:05.834]              // -> [jep106id <= 0x00000000]
[10:50:05.834]            __var ROMTableBase = 0;
[10:50:05.835]              // -> [ROMTableBase <= 0x00000000]
[10:50:05.835]            __ap = 0;      // AHB-AP
[10:50:05.835]              // -> [__ap <= 0x00000000]
[10:50:05.835]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[10:50:05.836]              // -> [ReadAP(0x000000F8) => 0xE00FF003]   (__dp=0x00000000, __ap=0x00000000)
[10:50:05.837]              // -> [ROMTableBase <= 0xE00FF000]
[10:50:05.837]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[10:50:05.839]              // -> [Read32(0xE00FFFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[10:50:05.839]              // -> [pidr1 <= 0x00000004]
[10:50:05.839]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[10:50:05.840]              // -> [Read32(0xE00FFFE8) => 0x0000000A]   (__dp=0x00000000, __ap=0x00000000)
[10:50:05.841]              // -> [pidr2 <= 0x0000000A]
[10:50:05.842]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[10:50:05.842]              // -> [jep106id <= 0x00000020]
[10:50:05.842]          </block>
[10:50:05.842]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[10:50:05.843]            // if-block "jep106id != 0x20"
[10:50:05.843]              // =>  FALSE
[10:50:05.843]            // skip if-block "jep106id != 0x20"
[10:50:05.844]          </control>
[10:50:05.844]        </sequence>
[10:50:05.844]    </block>
[10:50:05.844]  </sequence>
[10:50:05.845]  
[10:50:05.845]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[10:50:05.845]  
[10:50:05.845]  <debugvars>
[10:50:05.846]    // Pre-defined
[10:50:05.846]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:50:05.846]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[10:50:05.846]    __dp=0x00000000
[10:50:05.846]    __ap=0x00000000
[10:50:05.847]    __traceout=0x00000001      (SWO Trace)
[10:50:05.847]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:50:05.847]    __FlashAddr=0x00000000
[10:50:05.847]    __FlashLen=0x00000000
[10:50:05.848]    __FlashArg=0x00000000
[10:50:05.848]    __FlashOp=0x00000000
[10:50:05.849]    __Result=0x00000000
[10:50:05.849]    
[10:50:05.849]    // User-defined
[10:50:05.849]    DbgMCU_CR=0x00000007
[10:50:05.850]    DbgMCU_APB1_Fz=0x00000000
[10:50:05.850]    DbgMCU_APB2_Fz=0x00000000
[10:50:05.850]    TraceClk_Pin=0x00040002
[10:50:05.851]    TraceD0_Pin=0x00040003
[10:50:05.851]    TraceD1_Pin=0x00040004
[10:50:05.851]    TraceD2_Pin=0x00040005
[10:50:05.852]    TraceD3_Pin=0x00040006
[10:50:05.852]  </debugvars>
[10:50:05.852]  
[10:50:05.853]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[10:50:05.853]    <block atomic="false" info="">
[10:50:05.853]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[10:50:05.855]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:05.855]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[10:50:05.857]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:05.857]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[10:50:05.859]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:05.859]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[10:50:05.860]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:05.861]    </block>
[10:50:05.862]  </sequence>
[10:50:05.862]  
[10:50:07.796]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[10:50:07.796]  
[10:50:07.843]  <debugvars>
[10:50:07.844]    // Pre-defined
[10:50:07.844]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:50:07.844]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:50:07.844]    __dp=0x00000000
[10:50:07.845]    __ap=0x00000000
[10:50:07.846]    __traceout=0x00000001      (SWO Trace)
[10:50:07.846]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:50:07.846]    __FlashAddr=0x00000000
[10:50:07.846]    __FlashLen=0x00000000
[10:50:07.847]    __FlashArg=0x00000000
[10:50:07.847]    __FlashOp=0x00000000
[10:50:07.847]    __Result=0x00000000
[10:50:07.847]    
[10:50:07.847]    // User-defined
[10:50:07.848]    DbgMCU_CR=0x00000007
[10:50:07.848]    DbgMCU_APB1_Fz=0x00000000
[10:50:07.848]    DbgMCU_APB2_Fz=0x00000000
[10:50:07.849]    TraceClk_Pin=0x00040002
[10:50:07.849]    TraceD0_Pin=0x00040003
[10:50:07.849]    TraceD1_Pin=0x00040004
[10:50:07.849]    TraceD2_Pin=0x00040005
[10:50:07.849]    TraceD3_Pin=0x00040006
[10:50:07.850]  </debugvars>
[10:50:07.850]  
[10:50:07.850]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[10:50:07.851]    <block atomic="false" info="">
[10:50:07.851]      Sequence("CheckID");
[10:50:07.851]        <sequence name="CheckID" Pname="" disable="false" info="">
[10:50:07.851]          <block atomic="false" info="">
[10:50:07.852]            __var pidr1 = 0;
[10:50:07.852]              // -> [pidr1 <= 0x00000000]
[10:50:07.852]            __var pidr2 = 0;
[10:50:07.852]              // -> [pidr2 <= 0x00000000]
[10:50:07.853]            __var jep106id = 0;
[10:50:07.853]              // -> [jep106id <= 0x00000000]
[10:50:07.853]            __var ROMTableBase = 0;
[10:50:07.853]              // -> [ROMTableBase <= 0x00000000]
[10:50:07.854]            __ap = 0;      // AHB-AP
[10:50:07.854]              // -> [__ap <= 0x00000000]
[10:50:07.854]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[10:50:07.855]              // -> [ReadAP(0x000000F8) => 0xE00FF003]   (__dp=0x00000000, __ap=0x00000000)
[10:50:07.855]              // -> [ROMTableBase <= 0xE00FF000]
[10:50:07.855]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[10:50:07.857]              // -> [Read32(0xE00FFFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[10:50:07.857]              // -> [pidr1 <= 0x00000004]
[10:50:07.858]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[10:50:07.859]              // -> [Read32(0xE00FFFE8) => 0x0000000A]   (__dp=0x00000000, __ap=0x00000000)
[10:50:07.860]              // -> [pidr2 <= 0x0000000A]
[10:50:07.860]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[10:50:07.861]              // -> [jep106id <= 0x00000020]
[10:50:07.861]          </block>
[10:50:07.861]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[10:50:07.862]            // if-block "jep106id != 0x20"
[10:50:07.862]              // =>  FALSE
[10:50:07.863]            // skip if-block "jep106id != 0x20"
[10:50:07.863]          </control>
[10:50:07.863]        </sequence>
[10:50:07.863]    </block>
[10:50:07.864]  </sequence>
[10:50:07.864]  
[10:50:07.864]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[10:50:07.864]  
[10:50:07.864]  <debugvars>
[10:50:07.865]    // Pre-defined
[10:50:07.865]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:50:07.865]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:50:07.865]    __dp=0x00000000
[10:50:07.866]    __ap=0x00000000
[10:50:07.866]    __traceout=0x00000001      (SWO Trace)
[10:50:07.867]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:50:07.867]    __FlashAddr=0x00000000
[10:50:07.867]    __FlashLen=0x00000000
[10:50:07.867]    __FlashArg=0x00000000
[10:50:07.868]    __FlashOp=0x00000000
[10:50:07.868]    __Result=0x00000000
[10:50:07.868]    
[10:50:07.868]    // User-defined
[10:50:07.868]    DbgMCU_CR=0x00000007
[10:50:07.869]    DbgMCU_APB1_Fz=0x00000000
[10:50:07.869]    DbgMCU_APB2_Fz=0x00000000
[10:50:07.869]    TraceClk_Pin=0x00040002
[10:50:07.869]    TraceD0_Pin=0x00040003
[10:50:07.869]    TraceD1_Pin=0x00040004
[10:50:07.870]    TraceD2_Pin=0x00040005
[10:50:07.870]    TraceD3_Pin=0x00040006
[10:50:07.870]  </debugvars>
[10:50:07.871]  
[10:50:07.871]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[10:50:07.871]    <block atomic="false" info="">
[10:50:07.871]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[10:50:07.872]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:07.873]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[10:50:07.875]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:07.875]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[10:50:07.877]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:07.878]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[10:50:07.878]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:07.879]    </block>
[10:50:07.879]  </sequence>
[10:50:07.880]  
[10:50:07.934]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[10:50:07.934]  
[10:50:07.935]  <debugvars>
[10:50:07.935]    // Pre-defined
[10:50:07.936]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:50:07.936]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:50:07.937]    __dp=0x00000000
[10:50:07.937]    __ap=0x00000000
[10:50:07.937]    __traceout=0x00000001      (SWO Trace)
[10:50:07.937]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:50:07.938]    __FlashAddr=0x00000000
[10:50:07.938]    __FlashLen=0x00000000
[10:50:07.938]    __FlashArg=0x00000000
[10:50:07.938]    __FlashOp=0x00000000
[10:50:07.939]    __Result=0x00000000
[10:50:07.939]    
[10:50:07.939]    // User-defined
[10:50:07.939]    DbgMCU_CR=0x00000007
[10:50:07.939]    DbgMCU_APB1_Fz=0x00000000
[10:50:07.939]    DbgMCU_APB2_Fz=0x00000000
[10:50:07.940]    TraceClk_Pin=0x00040002
[10:50:07.940]    TraceD0_Pin=0x00040003
[10:50:07.940]    TraceD1_Pin=0x00040004
[10:50:07.940]    TraceD2_Pin=0x00040005
[10:50:07.940]    TraceD3_Pin=0x00040006
[10:50:07.941]  </debugvars>
[10:50:07.942]  
[10:50:07.942]  <sequence name="TraceStart" Pname="" disable="false" info="">
[10:50:07.942]    <block atomic="false" info="">
[10:50:07.942]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[10:50:07.943]        // -> [traceSWO <= 0x00000001]
[10:50:07.943]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[10:50:07.943]        // -> [traceTPIU <= 0x00000000]
[10:50:07.943]    </block>
[10:50:07.943]    <control if="traceSWO" while="" timeout="0" info="">
[10:50:07.944]      // if-block "traceSWO"
[10:50:07.944]        // =>  TRUE
[10:50:07.944]      <block atomic="false" info="">
[10:50:07.944]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[10:50:07.945]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[10:50:07.945]            <block atomic="false" info="">
[10:50:07.946]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[10:50:07.946]                // -> [dbgmcu_val <= 0x00000000]
[10:50:07.946]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[10:50:07.946]                // -> [dbgmcu_trace_val <= 0x00000000]
[10:50:07.946]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[10:50:07.947]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[10:50:07.948]                // -> [dbgmcu_val <= 0x00000007]
[10:50:07.948]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[10:50:07.949]                // -> [dbgmcu_trace_val <= 0x00000020]
[10:50:07.949]              Sequence("ConfigureTraceSWOPin");
[10:50:07.950]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[10:50:07.950]                  <block atomic="false" info="">
[10:50:07.950]                    __var pin     = 0;
[10:50:07.951]                      // -> [pin <= 0x00000000]
[10:50:07.951]                    __var port    = 0;
[10:50:07.952]                      // -> [port <= 0x00000000]
[10:50:07.952]                    __var portAdr = 0;
[10:50:07.952]                      // -> [portAdr <= 0x00000000]
[10:50:07.953]                    __var pos     = 0;
[10:50:07.953]                      // -> [pos <= 0x00000000]
[10:50:07.953]                    __var SWO_Pin = 0x00010003;          // PB3
[10:50:07.954]                      // -> [SWO_Pin <= 0x00010003]
[10:50:07.954]                  </block>
[10:50:07.954]                  <block atomic="false" info="configure SWO">
[10:50:07.954]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[10:50:07.955]                      // -> [pin <= 0x00000003]
[10:50:07.955]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[10:50:07.955]                      // -> [port <= 0x00000001]
[10:50:07.955]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[10:50:07.956]                      // -> [portAdr <= 0x40020400]
[10:50:07.956]                    pos = pin * 2;
[10:50:07.957]                      // -> [pos <= 0x00000006]
[10:50:07.957]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[10:50:07.958]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:50:07.960]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:07.960]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[10:50:07.962]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[10:50:07.963]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:07.964]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[10:50:07.966]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[10:50:07.967]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:07.968]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[10:50:07.969]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[10:50:07.971]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:07.971]                  </block>
[10:50:07.971]                  <control if="pin <  8" while="" timeout="0" info="">
[10:50:07.972]                    // if-block "pin <  8"
[10:50:07.972]                      // =>  TRUE
[10:50:07.972]                    <block atomic="false" info="">
[10:50:07.973]                      pos = ((pin    ) & 7) * 4;
[10:50:07.973]                        // -> [pos <= 0x0000000C]
[10:50:07.973]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[10:50:07.974]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:50:07.976]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:07.976]                    </block>
[10:50:07.977]                    // end if-block "pin <  8"
[10:50:07.977]                  </control>
[10:50:07.977]                  <control if="pin >= 8" while="" timeout="0" info="">
[10:50:07.977]                    // if-block "pin >= 8"
[10:50:07.977]                      // =>  FALSE
[10:50:07.977]                    // skip if-block "pin >= 8"
[10:50:07.978]                  </control>
[10:50:07.979]                </sequence>
[10:50:07.979]            </block>
[10:50:07.979]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[10:50:07.979]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[10:50:07.981]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:07.981]            </block>
[10:50:07.981]          </sequence>
[10:50:07.982]      </block>
[10:50:07.983]      // end if-block "traceSWO"
[10:50:07.983]    </control>
[10:50:07.983]    <control if="traceTPIU" while="" timeout="0" info="">
[10:50:07.983]      // if-block "traceTPIU"
[10:50:07.983]        // =>  FALSE
[10:50:07.984]      // skip if-block "traceTPIU"
[10:50:07.985]    </control>
[10:50:07.985]  </sequence>
[10:50:07.985]  
[10:50:08.003]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[10:50:08.003]  
[10:50:08.004]  <debugvars>
[10:50:08.004]    // Pre-defined
[10:50:08.005]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:50:08.005]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:50:08.005]    __dp=0x00000000
[10:50:08.005]    __ap=0x00000000
[10:50:08.006]    __traceout=0x00000001      (SWO Trace)
[10:50:08.006]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:50:08.006]    __FlashAddr=0x00000000
[10:50:08.006]    __FlashLen=0x00000000
[10:50:08.007]    __FlashArg=0x00000000
[10:50:08.007]    __FlashOp=0x00000000
[10:50:08.007]    __Result=0x00000000
[10:50:08.007]    
[10:50:08.007]    // User-defined
[10:50:08.008]    DbgMCU_CR=0x00000007
[10:50:08.008]    DbgMCU_APB1_Fz=0x00000000
[10:50:08.008]    DbgMCU_APB2_Fz=0x00000000
[10:50:08.009]    TraceClk_Pin=0x00040002
[10:50:08.009]    TraceD0_Pin=0x00040003
[10:50:08.010]    TraceD1_Pin=0x00040004
[10:50:08.010]    TraceD2_Pin=0x00040005
[10:50:08.010]    TraceD3_Pin=0x00040006
[10:50:08.010]  </debugvars>
[10:50:08.011]  
[10:50:08.011]  <sequence name="TraceStart" Pname="" disable="false" info="">
[10:50:08.011]    <block atomic="false" info="">
[10:50:08.011]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[10:50:08.012]        // -> [traceSWO <= 0x00000001]
[10:50:08.012]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[10:50:08.012]        // -> [traceTPIU <= 0x00000000]
[10:50:08.013]    </block>
[10:50:08.013]    <control if="traceSWO" while="" timeout="0" info="">
[10:50:08.013]      // if-block "traceSWO"
[10:50:08.013]        // =>  TRUE
[10:50:08.014]      <block atomic="false" info="">
[10:50:08.014]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[10:50:08.014]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[10:50:08.014]            <block atomic="false" info="">
[10:50:08.015]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[10:50:08.015]                // -> [dbgmcu_val <= 0x00000000]
[10:50:08.015]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[10:50:08.016]                // -> [dbgmcu_trace_val <= 0x00000000]
[10:50:08.016]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[10:50:08.017]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[10:50:08.017]                // -> [dbgmcu_val <= 0x00000007]
[10:50:08.017]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[10:50:08.018]                // -> [dbgmcu_trace_val <= 0x00000020]
[10:50:08.019]              Sequence("ConfigureTraceSWOPin");
[10:50:08.019]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[10:50:08.019]                  <block atomic="false" info="">
[10:50:08.019]                    __var pin     = 0;
[10:50:08.020]                      // -> [pin <= 0x00000000]
[10:50:08.020]                    __var port    = 0;
[10:50:08.020]                      // -> [port <= 0x00000000]
[10:50:08.020]                    __var portAdr = 0;
[10:50:08.021]                      // -> [portAdr <= 0x00000000]
[10:50:08.021]                    __var pos     = 0;
[10:50:08.021]                      // -> [pos <= 0x00000000]
[10:50:08.022]                    __var SWO_Pin = 0x00010003;          // PB3
[10:50:08.022]                      // -> [SWO_Pin <= 0x00010003]
[10:50:08.022]                  </block>
[10:50:08.022]                  <block atomic="false" info="configure SWO">
[10:50:08.023]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[10:50:08.023]                      // -> [pin <= 0x00000003]
[10:50:08.023]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[10:50:08.023]                      // -> [port <= 0x00000001]
[10:50:08.024]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[10:50:08.024]                      // -> [portAdr <= 0x40020400]
[10:50:08.025]                    pos = pin * 2;
[10:50:08.025]                      // -> [pos <= 0x00000006]
[10:50:08.026]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[10:50:08.027]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:50:08.029]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:08.029]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[10:50:08.031]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[10:50:08.032]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:08.033]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[10:50:08.034]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[10:50:08.035]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:08.036]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[10:50:08.037]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[10:50:08.038]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:08.039]                  </block>
[10:50:08.039]                  <control if="pin <  8" while="" timeout="0" info="">
[10:50:08.040]                    // if-block "pin <  8"
[10:50:08.040]                      // =>  TRUE
[10:50:08.041]                    <block atomic="false" info="">
[10:50:08.041]                      pos = ((pin    ) & 7) * 4;
[10:50:08.041]                        // -> [pos <= 0x0000000C]
[10:50:08.041]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[10:50:08.042]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:50:08.044]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:08.045]                    </block>
[10:50:08.045]                    // end if-block "pin <  8"
[10:50:08.045]                  </control>
[10:50:08.045]                  <control if="pin >= 8" while="" timeout="0" info="">
[10:50:08.046]                    // if-block "pin >= 8"
[10:50:08.046]                      // =>  FALSE
[10:50:08.046]                    // skip if-block "pin >= 8"
[10:50:08.047]                  </control>
[10:50:08.047]                </sequence>
[10:50:08.047]            </block>
[10:50:08.047]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[10:50:08.048]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[10:50:08.049]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:08.049]            </block>
[10:50:08.049]          </sequence>
[10:50:08.050]      </block>
[10:50:08.050]      // end if-block "traceSWO"
[10:50:08.050]    </control>
[10:50:08.050]    <control if="traceTPIU" while="" timeout="0" info="">
[10:50:08.051]      // if-block "traceTPIU"
[10:50:08.052]        // =>  FALSE
[10:50:08.052]      // skip if-block "traceTPIU"
[10:50:08.052]    </control>
[10:50:08.052]  </sequence>
[10:50:08.053]  
[10:50:09.119]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[10:50:09.119]  
[10:50:09.166]  <debugvars>
[10:50:09.166]    // Pre-defined
[10:50:09.167]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:50:09.167]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:50:09.167]    __dp=0x00000000
[10:50:09.168]    __ap=0x00000000
[10:50:09.168]    __traceout=0x00000001      (SWO Trace)
[10:50:09.169]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:50:09.169]    __FlashAddr=0x00000000
[10:50:09.170]    __FlashLen=0x00000000
[10:50:09.170]    __FlashArg=0x00000000
[10:50:09.170]    __FlashOp=0x00000000
[10:50:09.171]    __Result=0x00000000
[10:50:09.171]    
[10:50:09.171]    // User-defined
[10:50:09.172]    DbgMCU_CR=0x00000007
[10:50:09.172]    DbgMCU_APB1_Fz=0x00000000
[10:50:09.173]    DbgMCU_APB2_Fz=0x00000000
[10:50:09.173]    TraceClk_Pin=0x00040002
[10:50:09.173]    TraceD0_Pin=0x00040003
[10:50:09.174]    TraceD1_Pin=0x00040004
[10:50:09.175]    TraceD2_Pin=0x00040005
[10:50:09.175]    TraceD3_Pin=0x00040006
[10:50:09.175]  </debugvars>
[10:50:09.175]  
[10:50:09.176]  <sequence name="TraceStart" Pname="" disable="false" info="">
[10:50:09.176]    <block atomic="false" info="">
[10:50:09.176]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[10:50:09.176]        // -> [traceSWO <= 0x00000001]
[10:50:09.177]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[10:50:09.177]        // -> [traceTPIU <= 0x00000000]
[10:50:09.177]    </block>
[10:50:09.178]    <control if="traceSWO" while="" timeout="0" info="">
[10:50:09.178]      // if-block "traceSWO"
[10:50:09.178]        // =>  TRUE
[10:50:09.178]      <block atomic="false" info="">
[10:50:09.179]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[10:50:09.179]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[10:50:09.179]            <block atomic="false" info="">
[10:50:09.179]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[10:50:09.180]                // -> [dbgmcu_val <= 0x00000000]
[10:50:09.180]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[10:50:09.180]                // -> [dbgmcu_trace_val <= 0x00000000]
[10:50:09.181]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[10:50:09.182]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[10:50:09.183]                // -> [dbgmcu_val <= 0x00000007]
[10:50:09.183]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[10:50:09.183]                // -> [dbgmcu_trace_val <= 0x00000020]
[10:50:09.183]              Sequence("ConfigureTraceSWOPin");
[10:50:09.184]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[10:50:09.184]                  <block atomic="false" info="">
[10:50:09.184]                    __var pin     = 0;
[10:50:09.184]                      // -> [pin <= 0x00000000]
[10:50:09.185]                    __var port    = 0;
[10:50:09.185]                      // -> [port <= 0x00000000]
[10:50:09.185]                    __var portAdr = 0;
[10:50:09.185]                      // -> [portAdr <= 0x00000000]
[10:50:09.186]                    __var pos     = 0;
[10:50:09.186]                      // -> [pos <= 0x00000000]
[10:50:09.186]                    __var SWO_Pin = 0x00010003;          // PB3
[10:50:09.186]                      // -> [SWO_Pin <= 0x00010003]
[10:50:09.187]                  </block>
[10:50:09.187]                  <block atomic="false" info="configure SWO">
[10:50:09.187]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[10:50:09.188]                      // -> [pin <= 0x00000003]
[10:50:09.189]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[10:50:09.189]                      // -> [port <= 0x00000001]
[10:50:09.189]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[10:50:09.189]                      // -> [portAdr <= 0x40020400]
[10:50:09.190]                    pos = pin * 2;
[10:50:09.190]                      // -> [pos <= 0x00000006]
[10:50:09.190]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[10:50:09.191]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:50:09.193]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:09.194]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[10:50:09.195]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[10:50:09.196]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:09.197]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[10:50:09.199]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[10:50:09.200]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:09.201]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[10:50:09.202]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[10:50:09.204]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:09.204]                  </block>
[10:50:09.205]                  <control if="pin <  8" while="" timeout="0" info="">
[10:50:09.205]                    // if-block "pin <  8"
[10:50:09.206]                      // =>  TRUE
[10:50:09.206]                    <block atomic="false" info="">
[10:50:09.207]                      pos = ((pin    ) & 7) * 4;
[10:50:09.207]                        // -> [pos <= 0x0000000C]
[10:50:09.207]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[10:50:09.208]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:50:09.210]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:09.210]                    </block>
[10:50:09.210]                    // end if-block "pin <  8"
[10:50:09.210]                  </control>
[10:50:09.211]                  <control if="pin >= 8" while="" timeout="0" info="">
[10:50:09.211]                    // if-block "pin >= 8"
[10:50:09.211]                      // =>  FALSE
[10:50:09.212]                    // skip if-block "pin >= 8"
[10:50:09.212]                  </control>
[10:50:09.213]                </sequence>
[10:50:09.213]            </block>
[10:50:09.213]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[10:50:09.213]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[10:50:09.214]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[10:50:09.215]            </block>
[10:50:09.215]          </sequence>
[10:50:09.216]      </block>
[10:50:09.216]      // end if-block "traceSWO"
[10:50:09.216]    </control>
[10:50:09.216]    <control if="traceTPIU" while="" timeout="0" info="">
[10:50:09.217]      // if-block "traceTPIU"
[10:50:09.217]        // =>  FALSE
[10:50:09.217]      // skip if-block "traceTPIU"
[10:50:09.217]    </control>
[10:50:09.218]  </sequence>
[10:50:09.219]  
[10:55:03.479]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[10:55:03.479]  
[10:55:03.527]  <debugvars>
[10:55:03.527]    // Pre-defined
[10:55:03.528]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:55:03.528]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:55:03.528]    __dp=0x00000000
[10:55:03.528]    __ap=0x00000000
[10:55:03.529]    __traceout=0x00000001      (SWO Trace)
[10:55:03.529]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:55:03.530]    __FlashAddr=0x00000000
[10:55:03.530]    __FlashLen=0x00000000
[10:55:03.530]    __FlashArg=0x00000000
[10:55:03.530]    __FlashOp=0x00000000
[10:55:03.531]    __Result=0x00000000
[10:55:03.531]    
[10:55:03.531]    // User-defined
[10:55:03.532]    DbgMCU_CR=0x00000007
[10:55:03.532]    DbgMCU_APB1_Fz=0x00000000
[10:55:03.532]    DbgMCU_APB2_Fz=0x00000000
[10:55:03.532]    TraceClk_Pin=0x00040002
[10:55:03.532]    TraceD0_Pin=0x00040003
[10:55:03.532]    TraceD1_Pin=0x00040004
[10:55:03.533]    TraceD2_Pin=0x00040005
[10:55:03.533]    TraceD3_Pin=0x00040006
[10:55:03.534]  </debugvars>
[10:55:03.534]  
[10:55:03.535]  <sequence name="TraceStop" Pname="" disable="false" info="">
[10:55:03.535]    <block atomic="false" info="">
[10:55:03.536]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[10:55:03.536]        // -> [traceSWO <= 0x00000001]
[10:55:03.537]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[10:55:03.537]        // -> [traceTPIU <= 0x00000000]
[10:55:03.538]    </block>
[10:55:03.539]    <control if="traceSWO" while="" timeout="0" info="">
[10:55:03.539]      // if-block "traceSWO"
[10:55:03.539]        // =>  TRUE
[10:55:03.540]      <block atomic="false" info="">
[10:55:03.540]        Sequence("DisableTraceSWO");
[10:55:03.540]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[10:55:03.540]            <block atomic="false" info="">
[10:55:03.540]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[10:55:03.540]                // -> [dbgmcu_val <= 0x00000000]
[10:55:03.542]            </block>
[10:55:03.542]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[10:55:03.542]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[10:55:03.543]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[10:55:03.543]                // -> [dbgmcu_val <= 0x00000007]
[10:55:03.544]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[10:55:03.546]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:03.546]            </block>
[10:55:03.547]          </sequence>
[10:55:03.547]      </block>
[10:55:03.547]      // end if-block "traceSWO"
[10:55:03.547]    </control>
[10:55:03.548]    <control if="traceTPIU" while="" timeout="0" info="">
[10:55:03.548]      // if-block "traceTPIU"
[10:55:03.549]        // =>  FALSE
[10:55:03.549]      // skip if-block "traceTPIU"
[10:55:03.549]    </control>
[10:55:03.550]  </sequence>
[10:55:03.550]  
[10:55:10.985]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[10:55:10.985]  
[10:55:11.032]  <debugvars>
[10:55:11.033]    // Pre-defined
[10:55:11.033]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:55:11.033]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:55:11.034]    __dp=0x00000000
[10:55:11.034]    __ap=0x00000000
[10:55:11.034]    __traceout=0x00000001      (SWO Trace)
[10:55:11.035]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:55:11.035]    __FlashAddr=0x00000000
[10:55:11.036]    __FlashLen=0x00000000
[10:55:11.036]    __FlashArg=0x00000000
[10:55:11.036]    __FlashOp=0x00000000
[10:55:11.037]    __Result=0x00000000
[10:55:11.037]    
[10:55:11.037]    // User-defined
[10:55:11.037]    DbgMCU_CR=0x00000007
[10:55:11.037]    DbgMCU_APB1_Fz=0x00000000
[10:55:11.038]    DbgMCU_APB2_Fz=0x00000000
[10:55:11.038]    TraceClk_Pin=0x00040002
[10:55:11.038]    TraceD0_Pin=0x00040003
[10:55:11.038]    TraceD1_Pin=0x00040004
[10:55:11.039]    TraceD2_Pin=0x00040005
[10:55:11.039]    TraceD3_Pin=0x00040006
[10:55:11.039]  </debugvars>
[10:55:11.039]  
[10:55:11.040]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[10:55:11.040]    <block atomic="false" info="">
[10:55:11.040]      Sequence("CheckID");
[10:55:11.040]        <sequence name="CheckID" Pname="" disable="false" info="">
[10:55:11.041]          <block atomic="false" info="">
[10:55:11.041]            __var pidr1 = 0;
[10:55:11.042]              // -> [pidr1 <= 0x00000000]
[10:55:11.042]            __var pidr2 = 0;
[10:55:11.043]              // -> [pidr2 <= 0x00000000]
[10:55:11.043]            __var jep106id = 0;
[10:55:11.044]              // -> [jep106id <= 0x00000000]
[10:55:11.044]            __var ROMTableBase = 0;
[10:55:11.045]              // -> [ROMTableBase <= 0x00000000]
[10:55:11.045]            __ap = 0;      // AHB-AP
[10:55:11.045]              // -> [__ap <= 0x00000000]
[10:55:11.045]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[10:55:11.046]              // -> [ReadAP(0x000000F8) => 0xE00FF003]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.047]              // -> [ROMTableBase <= 0xE00FF000]
[10:55:11.047]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[10:55:11.049]              // -> [Read32(0xE00FFFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.049]              // -> [pidr1 <= 0x00000004]
[10:55:11.050]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[10:55:11.051]              // -> [Read32(0xE00FFFE8) => 0x0000000A]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.052]              // -> [pidr2 <= 0x0000000A]
[10:55:11.052]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[10:55:11.052]              // -> [jep106id <= 0x00000020]
[10:55:11.053]          </block>
[10:55:11.053]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[10:55:11.053]            // if-block "jep106id != 0x20"
[10:55:11.053]              // =>  FALSE
[10:55:11.053]            // skip if-block "jep106id != 0x20"
[10:55:11.054]          </control>
[10:55:11.054]        </sequence>
[10:55:11.055]    </block>
[10:55:11.055]  </sequence>
[10:55:11.055]  
[10:55:11.056]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[10:55:11.056]  
[10:55:11.056]  <debugvars>
[10:55:11.056]    // Pre-defined
[10:55:11.057]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:55:11.058]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:55:11.058]    __dp=0x00000000
[10:55:11.058]    __ap=0x00000000
[10:55:11.058]    __traceout=0x00000001      (SWO Trace)
[10:55:11.059]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:55:11.059]    __FlashAddr=0x00000000
[10:55:11.060]    __FlashLen=0x00000000
[10:55:11.060]    __FlashArg=0x00000000
[10:55:11.061]    __FlashOp=0x00000000
[10:55:11.061]    __Result=0x00000000
[10:55:11.061]    
[10:55:11.061]    // User-defined
[10:55:11.062]    DbgMCU_CR=0x00000007
[10:55:11.062]    DbgMCU_APB1_Fz=0x00000000
[10:55:11.062]    DbgMCU_APB2_Fz=0x00000000
[10:55:11.063]    TraceClk_Pin=0x00040002
[10:55:11.063]    TraceD0_Pin=0x00040003
[10:55:11.063]    TraceD1_Pin=0x00040004
[10:55:11.064]    TraceD2_Pin=0x00040005
[10:55:11.064]    TraceD3_Pin=0x00040006
[10:55:11.064]  </debugvars>
[10:55:11.065]  
[10:55:11.065]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[10:55:11.066]    <block atomic="false" info="">
[10:55:11.066]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[10:55:11.068]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.068]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[10:55:11.070]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.070]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[10:55:11.072]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.072]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[10:55:11.074]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.074]    </block>
[10:55:11.074]  </sequence>
[10:55:11.075]  
[10:55:11.133]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[10:55:11.133]  
[10:55:11.134]  <debugvars>
[10:55:11.134]    // Pre-defined
[10:55:11.135]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:55:11.135]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:55:11.135]    __dp=0x00000000
[10:55:11.136]    __ap=0x00000000
[10:55:11.136]    __traceout=0x00000001      (SWO Trace)
[10:55:11.136]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:55:11.137]    __FlashAddr=0x00000000
[10:55:11.137]    __FlashLen=0x00000000
[10:55:11.137]    __FlashArg=0x00000000
[10:55:11.138]    __FlashOp=0x00000000
[10:55:11.138]    __Result=0x00000000
[10:55:11.138]    
[10:55:11.138]    // User-defined
[10:55:11.139]    DbgMCU_CR=0x00000007
[10:55:11.139]    DbgMCU_APB1_Fz=0x00000000
[10:55:11.139]    DbgMCU_APB2_Fz=0x00000000
[10:55:11.139]    TraceClk_Pin=0x00040002
[10:55:11.140]    TraceD0_Pin=0x00040003
[10:55:11.140]    TraceD1_Pin=0x00040004
[10:55:11.140]    TraceD2_Pin=0x00040005
[10:55:11.140]    TraceD3_Pin=0x00040006
[10:55:11.141]  </debugvars>
[10:55:11.141]  
[10:55:11.141]  <sequence name="TraceStart" Pname="" disable="false" info="">
[10:55:11.141]    <block atomic="false" info="">
[10:55:11.142]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[10:55:11.142]        // -> [traceSWO <= 0x00000001]
[10:55:11.142]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[10:55:11.142]        // -> [traceTPIU <= 0x00000000]
[10:55:11.143]    </block>
[10:55:11.143]    <control if="traceSWO" while="" timeout="0" info="">
[10:55:11.143]      // if-block "traceSWO"
[10:55:11.143]        // =>  TRUE
[10:55:11.144]      <block atomic="false" info="">
[10:55:11.145]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[10:55:11.145]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[10:55:11.145]            <block atomic="false" info="">
[10:55:11.145]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[10:55:11.146]                // -> [dbgmcu_val <= 0x00000000]
[10:55:11.146]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[10:55:11.146]                // -> [dbgmcu_trace_val <= 0x00000000]
[10:55:11.146]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[10:55:11.148]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.148]                // -> [dbgmcu_val <= 0x00000007]
[10:55:11.148]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[10:55:11.149]                // -> [dbgmcu_trace_val <= 0x00000020]
[10:55:11.149]              Sequence("ConfigureTraceSWOPin");
[10:55:11.150]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[10:55:11.150]                  <block atomic="false" info="">
[10:55:11.150]                    __var pin     = 0;
[10:55:11.150]                      // -> [pin <= 0x00000000]
[10:55:11.151]                    __var port    = 0;
[10:55:11.151]                      // -> [port <= 0x00000000]
[10:55:11.151]                    __var portAdr = 0;
[10:55:11.152]                      // -> [portAdr <= 0x00000000]
[10:55:11.152]                    __var pos     = 0;
[10:55:11.152]                      // -> [pos <= 0x00000000]
[10:55:11.152]                    __var SWO_Pin = 0x00010003;          // PB3
[10:55:11.153]                      // -> [SWO_Pin <= 0x00010003]
[10:55:11.154]                  </block>
[10:55:11.154]                  <block atomic="false" info="configure SWO">
[10:55:11.154]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[10:55:11.154]                      // -> [pin <= 0x00000003]
[10:55:11.155]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[10:55:11.155]                      // -> [port <= 0x00000001]
[10:55:11.155]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[10:55:11.156]                      // -> [portAdr <= 0x40020400]
[10:55:11.156]                    pos = pin * 2;
[10:55:11.156]                      // -> [pos <= 0x00000006]
[10:55:11.156]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[10:55:11.158]                      // -> [Read32(0x40023830) => 0x00000007]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.159]                      // -> [Write32(0x40023830, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.160]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[10:55:11.161]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.163]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.163]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[10:55:11.165]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.166]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.167]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[10:55:11.168]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.170]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.170]                  </block>
[10:55:11.171]                  <control if="pin <  8" while="" timeout="0" info="">
[10:55:11.171]                    // if-block "pin <  8"
[10:55:11.171]                      // =>  TRUE
[10:55:11.172]                    <block atomic="false" info="">
[10:55:11.172]                      pos = ((pin    ) & 7) * 4;
[10:55:11.172]                        // -> [pos <= 0x0000000C]
[10:55:11.173]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[10:55:11.174]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.176]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.176]                    </block>
[10:55:11.176]                    // end if-block "pin <  8"
[10:55:11.177]                  </control>
[10:55:11.177]                  <control if="pin >= 8" while="" timeout="0" info="">
[10:55:11.177]                    // if-block "pin >= 8"
[10:55:11.178]                      // =>  FALSE
[10:55:11.178]                    // skip if-block "pin >= 8"
[10:55:11.178]                  </control>
[10:55:11.179]                </sequence>
[10:55:11.179]            </block>
[10:55:11.179]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[10:55:11.180]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[10:55:11.181]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.181]            </block>
[10:55:11.182]          </sequence>
[10:55:11.182]      </block>
[10:55:11.182]      // end if-block "traceSWO"
[10:55:11.183]    </control>
[10:55:11.183]    <control if="traceTPIU" while="" timeout="0" info="">
[10:55:11.183]      // if-block "traceTPIU"
[10:55:11.183]        // =>  FALSE
[10:55:11.184]      // skip if-block "traceTPIU"
[10:55:11.184]    </control>
[10:55:11.184]  </sequence>
[10:55:11.184]  
[10:55:11.205]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[10:55:11.205]  
[10:55:11.206]  <debugvars>
[10:55:11.206]    // Pre-defined
[10:55:11.207]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:55:11.207]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:55:11.208]    __dp=0x00000000
[10:55:11.208]    __ap=0x00000000
[10:55:11.208]    __traceout=0x00000001      (SWO Trace)
[10:55:11.209]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:55:11.209]    __FlashAddr=0x00000000
[10:55:11.210]    __FlashLen=0x00000000
[10:55:11.210]    __FlashArg=0x00000000
[10:55:11.210]    __FlashOp=0x00000000
[10:55:11.211]    __Result=0x00000000
[10:55:11.211]    
[10:55:11.211]    // User-defined
[10:55:11.211]    DbgMCU_CR=0x00000007
[10:55:11.211]    DbgMCU_APB1_Fz=0x00000000
[10:55:11.212]    DbgMCU_APB2_Fz=0x00000000
[10:55:11.213]    TraceClk_Pin=0x00040002
[10:55:11.213]    TraceD0_Pin=0x00040003
[10:55:11.213]    TraceD1_Pin=0x00040004
[10:55:11.214]    TraceD2_Pin=0x00040005
[10:55:11.214]    TraceD3_Pin=0x00040006
[10:55:11.214]  </debugvars>
[10:55:11.215]  
[10:55:11.215]  <sequence name="TraceStart" Pname="" disable="false" info="">
[10:55:11.216]    <block atomic="false" info="">
[10:55:11.216]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[10:55:11.217]        // -> [traceSWO <= 0x00000001]
[10:55:11.217]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[10:55:11.217]        // -> [traceTPIU <= 0x00000000]
[10:55:11.217]    </block>
[10:55:11.218]    <control if="traceSWO" while="" timeout="0" info="">
[10:55:11.218]      // if-block "traceSWO"
[10:55:11.218]        // =>  TRUE
[10:55:11.218]      <block atomic="false" info="">
[10:55:11.219]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[10:55:11.219]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[10:55:11.219]            <block atomic="false" info="">
[10:55:11.219]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[10:55:11.220]                // -> [dbgmcu_val <= 0x00000000]
[10:55:11.220]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[10:55:11.220]                // -> [dbgmcu_trace_val <= 0x00000000]
[10:55:11.221]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[10:55:11.223]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.223]                // -> [dbgmcu_val <= 0x00000007]
[10:55:11.224]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[10:55:11.224]                // -> [dbgmcu_trace_val <= 0x00000020]
[10:55:11.224]              Sequence("ConfigureTraceSWOPin");
[10:55:11.225]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[10:55:11.225]                  <block atomic="false" info="">
[10:55:11.225]                    __var pin     = 0;
[10:55:11.225]                      // -> [pin <= 0x00000000]
[10:55:11.226]                    __var port    = 0;
[10:55:11.226]                      // -> [port <= 0x00000000]
[10:55:11.226]                    __var portAdr = 0;
[10:55:11.227]                      // -> [portAdr <= 0x00000000]
[10:55:11.227]                    __var pos     = 0;
[10:55:11.227]                      // -> [pos <= 0x00000000]
[10:55:11.227]                    __var SWO_Pin = 0x00010003;          // PB3
[10:55:11.228]                      // -> [SWO_Pin <= 0x00010003]
[10:55:11.228]                  </block>
[10:55:11.229]                  <block atomic="false" info="configure SWO">
[10:55:11.229]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[10:55:11.229]                      // -> [pin <= 0x00000003]
[10:55:11.229]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[10:55:11.230]                      // -> [port <= 0x00000001]
[10:55:11.230]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[10:55:11.230]                      // -> [portAdr <= 0x40020400]
[10:55:11.231]                    pos = pin * 2;
[10:55:11.231]                      // -> [pos <= 0x00000006]
[10:55:11.232]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[10:55:11.233]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.234]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.235]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[10:55:11.236]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.238]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.238]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[10:55:11.240]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.241]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.241]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[10:55:11.243]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.245]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.245]                  </block>
[10:55:11.245]                  <control if="pin <  8" while="" timeout="0" info="">
[10:55:11.246]                    // if-block "pin <  8"
[10:55:11.246]                      // =>  TRUE
[10:55:11.246]                    <block atomic="false" info="">
[10:55:11.246]                      pos = ((pin    ) & 7) * 4;
[10:55:11.247]                        // -> [pos <= 0x0000000C]
[10:55:11.247]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[10:55:11.248]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.250]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.251]                    </block>
[10:55:11.251]                    // end if-block "pin <  8"
[10:55:11.252]                  </control>
[10:55:11.252]                  <control if="pin >= 8" while="" timeout="0" info="">
[10:55:11.252]                    // if-block "pin >= 8"
[10:55:11.253]                      // =>  FALSE
[10:55:11.253]                    // skip if-block "pin >= 8"
[10:55:11.254]                  </control>
[10:55:11.254]                </sequence>
[10:55:11.254]            </block>
[10:55:11.255]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[10:55:11.255]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[10:55:11.256]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:11.257]            </block>
[10:55:11.257]          </sequence>
[10:55:11.258]      </block>
[10:55:11.258]      // end if-block "traceSWO"
[10:55:11.258]    </control>
[10:55:11.258]    <control if="traceTPIU" while="" timeout="0" info="">
[10:55:11.259]      // if-block "traceTPIU"
[10:55:11.259]        // =>  FALSE
[10:55:11.259]      // skip if-block "traceTPIU"
[10:55:11.260]    </control>
[10:55:11.260]  </sequence>
[10:55:11.260]  
[10:55:12.403]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[10:55:12.403]  
[10:55:12.450]  <debugvars>
[10:55:12.450]    // Pre-defined
[10:55:12.451]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[10:55:12.451]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[10:55:12.452]    __dp=0x00000000
[10:55:12.452]    __ap=0x00000000
[10:55:12.452]    __traceout=0x00000001      (SWO Trace)
[10:55:12.452]    __errorcontrol=0x00000000  (Skip Errors="False")
[10:55:12.452]    __FlashAddr=0x00000000
[10:55:12.453]    __FlashLen=0x00000000
[10:55:12.454]    __FlashArg=0x00000000
[10:55:12.454]    __FlashOp=0x00000000
[10:55:12.454]    __Result=0x00000000
[10:55:12.454]    
[10:55:12.454]    // User-defined
[10:55:12.454]    DbgMCU_CR=0x00000007
[10:55:12.455]    DbgMCU_APB1_Fz=0x00000000
[10:55:12.456]    DbgMCU_APB2_Fz=0x00000000
[10:55:12.456]    TraceClk_Pin=0x00040002
[10:55:12.456]    TraceD0_Pin=0x00040003
[10:55:12.456]    TraceD1_Pin=0x00040004
[10:55:12.457]    TraceD2_Pin=0x00040005
[10:55:12.457]    TraceD3_Pin=0x00040006
[10:55:12.457]  </debugvars>
[10:55:12.458]  
[10:55:12.458]  <sequence name="TraceStart" Pname="" disable="false" info="">
[10:55:12.458]    <block atomic="false" info="">
[10:55:12.458]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[10:55:12.459]        // -> [traceSWO <= 0x00000001]
[10:55:12.459]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[10:55:12.460]        // -> [traceTPIU <= 0x00000000]
[10:55:12.461]    </block>
[10:55:12.461]    <control if="traceSWO" while="" timeout="0" info="">
[10:55:12.461]      // if-block "traceSWO"
[10:55:12.461]        // =>  TRUE
[10:55:12.461]      <block atomic="false" info="">
[10:55:12.462]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[10:55:12.462]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[10:55:12.463]            <block atomic="false" info="">
[10:55:12.464]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[10:55:12.464]                // -> [dbgmcu_val <= 0x00000000]
[10:55:12.464]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[10:55:12.464]                // -> [dbgmcu_trace_val <= 0x00000000]
[10:55:12.465]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[10:55:12.466]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[10:55:12.467]                // -> [dbgmcu_val <= 0x00000007]
[10:55:12.467]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[10:55:12.467]                // -> [dbgmcu_trace_val <= 0x00000020]
[10:55:12.469]              Sequence("ConfigureTraceSWOPin");
[10:55:12.469]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[10:55:12.469]                  <block atomic="false" info="">
[10:55:12.469]                    __var pin     = 0;
[10:55:12.469]                      // -> [pin <= 0x00000000]
[10:55:12.470]                    __var port    = 0;
[10:55:12.471]                      // -> [port <= 0x00000000]
[10:55:12.471]                    __var portAdr = 0;
[10:55:12.471]                      // -> [portAdr <= 0x00000000]
[10:55:12.472]                    __var pos     = 0;
[10:55:12.472]                      // -> [pos <= 0x00000000]
[10:55:12.472]                    __var SWO_Pin = 0x00010003;          // PB3
[10:55:12.472]                      // -> [SWO_Pin <= 0x00010003]
[10:55:12.472]                  </block>
[10:55:12.473]                  <block atomic="false" info="configure SWO">
[10:55:12.473]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[10:55:12.473]                      // -> [pin <= 0x00000003]
[10:55:12.474]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[10:55:12.474]                      // -> [port <= 0x00000001]
[10:55:12.474]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[10:55:12.475]                      // -> [portAdr <= 0x40020400]
[10:55:12.476]                    pos = pin * 2;
[10:55:12.476]                      // -> [pos <= 0x00000006]
[10:55:12.476]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[10:55:12.478]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:55:12.479]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:12.480]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[10:55:12.480]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[10:55:12.482]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:12.482]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[10:55:12.484]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[10:55:12.486]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:12.486]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[10:55:12.488]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[10:55:12.489]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:12.490]                  </block>
[10:55:12.490]                  <control if="pin <  8" while="" timeout="0" info="">
[10:55:12.491]                    // if-block "pin <  8"
[10:55:12.491]                      // =>  TRUE
[10:55:12.492]                    <block atomic="false" info="">
[10:55:12.493]                      pos = ((pin    ) & 7) * 4;
[10:55:12.493]                        // -> [pos <= 0x0000000C]
[10:55:12.493]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[10:55:12.494]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[10:55:12.495]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:12.496]                    </block>
[10:55:12.497]                    // end if-block "pin <  8"
[10:55:12.497]                  </control>
[10:55:12.497]                  <control if="pin >= 8" while="" timeout="0" info="">
[10:55:12.497]                    // if-block "pin >= 8"
[10:55:12.497]                      // =>  FALSE
[10:55:12.498]                    // skip if-block "pin >= 8"
[10:55:12.498]                  </control>
[10:55:12.499]                </sequence>
[10:55:12.499]            </block>
[10:55:12.499]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[10:55:12.500]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[10:55:12.501]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[10:55:12.502]            </block>
[10:55:12.502]          </sequence>
[10:55:12.503]      </block>
[10:55:12.503]      // end if-block "traceSWO"
[10:55:12.503]    </control>
[10:55:12.504]    <control if="traceTPIU" while="" timeout="0" info="">
[10:55:12.504]      // if-block "traceTPIU"
[10:55:12.505]        // =>  FALSE
[10:55:12.505]      // skip if-block "traceTPIU"
[10:55:12.506]    </control>
[10:55:12.506]  </sequence>
[10:55:12.506]  
[11:02:25.204]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[11:02:25.204]  
[11:02:25.252]  <debugvars>
[11:02:25.252]    // Pre-defined
[11:02:25.252]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:02:25.253]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:02:25.253]    __dp=0x00000000
[11:02:25.253]    __ap=0x00000000
[11:02:25.254]    __traceout=0x00000001      (SWO Trace)
[11:02:25.254]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:02:25.254]    __FlashAddr=0x00000000
[11:02:25.254]    __FlashLen=0x00000000
[11:02:25.255]    __FlashArg=0x00000000
[11:02:25.255]    __FlashOp=0x00000000
[11:02:25.255]    __Result=0x00000000
[11:02:25.256]    
[11:02:25.256]    // User-defined
[11:02:25.256]    DbgMCU_CR=0x00000007
[11:02:25.256]    DbgMCU_APB1_Fz=0x00000000
[11:02:25.256]    DbgMCU_APB2_Fz=0x00000000
[11:02:25.257]    TraceClk_Pin=0x00040002
[11:02:25.257]    TraceD0_Pin=0x00040003
[11:02:25.258]    TraceD1_Pin=0x00040004
[11:02:25.258]    TraceD2_Pin=0x00040005
[11:02:25.258]    TraceD3_Pin=0x00040006
[11:02:25.259]  </debugvars>
[11:02:25.259]  
[11:02:25.260]  <sequence name="TraceStop" Pname="" disable="false" info="">
[11:02:25.260]    <block atomic="false" info="">
[11:02:25.260]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[11:02:25.261]        // -> [traceSWO <= 0x00000001]
[11:02:25.261]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[11:02:25.262]        // -> [traceTPIU <= 0x00000000]
[11:02:25.262]    </block>
[11:02:25.262]    <control if="traceSWO" while="" timeout="0" info="">
[11:02:25.263]      // if-block "traceSWO"
[11:02:25.263]        // =>  TRUE
[11:02:25.263]      <block atomic="false" info="">
[11:02:25.264]        Sequence("DisableTraceSWO");
[11:02:25.264]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[11:02:25.264]            <block atomic="false" info="">
[11:02:25.264]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[11:02:25.265]                // -> [dbgmcu_val <= 0x00000000]
[11:02:25.265]            </block>
[11:02:25.265]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[11:02:25.265]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[11:02:25.267]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[11:02:25.267]                // -> [dbgmcu_val <= 0x00000007]
[11:02:25.268]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[11:02:25.269]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:25.269]            </block>
[11:02:25.270]          </sequence>
[11:02:25.270]      </block>
[11:02:25.271]      // end if-block "traceSWO"
[11:02:25.271]    </control>
[11:02:25.271]    <control if="traceTPIU" while="" timeout="0" info="">
[11:02:25.272]      // if-block "traceTPIU"
[11:02:25.272]        // =>  FALSE
[11:02:25.272]      // skip if-block "traceTPIU"
[11:02:25.273]    </control>
[11:02:25.273]  </sequence>
[11:02:25.273]  
[11:02:33.858]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[11:02:33.858]  
[11:02:33.905]  <debugvars>
[11:02:33.906]    // Pre-defined
[11:02:33.906]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:02:33.907]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:02:33.907]    __dp=0x00000000
[11:02:33.907]    __ap=0x00000000
[11:02:33.908]    __traceout=0x00000001      (SWO Trace)
[11:02:33.908]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:02:33.908]    __FlashAddr=0x00000000
[11:02:33.909]    __FlashLen=0x00000000
[11:02:33.909]    __FlashArg=0x00000000
[11:02:33.909]    __FlashOp=0x00000000
[11:02:33.909]    __Result=0x00000000
[11:02:33.910]    
[11:02:33.910]    // User-defined
[11:02:33.910]    DbgMCU_CR=0x00000007
[11:02:33.910]    DbgMCU_APB1_Fz=0x00000000
[11:02:33.910]    DbgMCU_APB2_Fz=0x00000000
[11:02:33.911]    TraceClk_Pin=0x00040002
[11:02:33.911]    TraceD0_Pin=0x00040003
[11:02:33.911]    TraceD1_Pin=0x00040004
[11:02:33.912]    TraceD2_Pin=0x00040005
[11:02:33.912]    TraceD3_Pin=0x00040006
[11:02:33.912]  </debugvars>
[11:02:33.912]  
[11:02:33.913]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[11:02:33.913]    <block atomic="false" info="">
[11:02:33.913]      Sequence("CheckID");
[11:02:33.913]        <sequence name="CheckID" Pname="" disable="false" info="">
[11:02:33.913]          <block atomic="false" info="">
[11:02:33.914]            __var pidr1 = 0;
[11:02:33.914]              // -> [pidr1 <= 0x00000000]
[11:02:33.914]            __var pidr2 = 0;
[11:02:33.914]              // -> [pidr2 <= 0x00000000]
[11:02:33.914]            __var jep106id = 0;
[11:02:33.916]              // -> [jep106id <= 0x00000000]
[11:02:33.916]            __var ROMTableBase = 0;
[11:02:33.916]              // -> [ROMTableBase <= 0x00000000]
[11:02:33.916]            __ap = 0;      // AHB-AP
[11:02:33.916]              // -> [__ap <= 0x00000000]
[11:02:33.917]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[11:02:33.918]              // -> [ReadAP(0x000000F8) => 0xE00FF003]   (__dp=0x00000000, __ap=0x00000000)
[11:02:33.918]              // -> [ROMTableBase <= 0xE00FF000]
[11:02:33.918]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[11:02:33.919]              // -> [Read32(0xE00FFFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[11:02:33.919]              // -> [pidr1 <= 0x00000004]
[11:02:33.920]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[11:02:33.922]              // -> [Read32(0xE00FFFE8) => 0x0000000A]   (__dp=0x00000000, __ap=0x00000000)
[11:02:33.922]              // -> [pidr2 <= 0x0000000A]
[11:02:33.922]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[11:02:33.923]              // -> [jep106id <= 0x00000020]
[11:02:33.923]          </block>
[11:02:33.924]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[11:02:33.924]            // if-block "jep106id != 0x20"
[11:02:33.924]              // =>  FALSE
[11:02:33.924]            // skip if-block "jep106id != 0x20"
[11:02:33.924]          </control>
[11:02:33.924]        </sequence>
[11:02:33.924]    </block>
[11:02:33.926]  </sequence>
[11:02:33.926]  
[11:02:33.926]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[11:02:33.926]  
[11:02:33.926]  <debugvars>
[11:02:33.927]    // Pre-defined
[11:02:33.927]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:02:33.927]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:02:33.927]    __dp=0x00000000
[11:02:33.927]    __ap=0x00000000
[11:02:33.928]    __traceout=0x00000001      (SWO Trace)
[11:02:33.928]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:02:33.928]    __FlashAddr=0x00000000
[11:02:33.928]    __FlashLen=0x00000000
[11:02:33.929]    __FlashArg=0x00000000
[11:02:33.929]    __FlashOp=0x00000000
[11:02:33.929]    __Result=0x00000000
[11:02:33.929]    
[11:02:33.929]    // User-defined
[11:02:33.930]    DbgMCU_CR=0x00000007
[11:02:33.930]    DbgMCU_APB1_Fz=0x00000000
[11:02:33.931]    DbgMCU_APB2_Fz=0x00000000
[11:02:33.932]    TraceClk_Pin=0x00040002
[11:02:33.932]    TraceD0_Pin=0x00040003
[11:02:33.932]    TraceD1_Pin=0x00040004
[11:02:33.932]    TraceD2_Pin=0x00040005
[11:02:33.932]    TraceD3_Pin=0x00040006
[11:02:33.932]  </debugvars>
[11:02:33.934]  
[11:02:33.934]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[11:02:33.934]    <block atomic="false" info="">
[11:02:33.934]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[11:02:33.936]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:33.937]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[11:02:33.938]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:33.938]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[11:02:33.939]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:33.939]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[11:02:33.941]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:33.941]    </block>
[11:02:33.941]  </sequence>
[11:02:33.942]  
[11:02:33.988]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[11:02:33.988]  
[11:02:33.989]  <debugvars>
[11:02:33.989]    // Pre-defined
[11:02:33.989]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:02:33.989]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:02:33.990]    __dp=0x00000000
[11:02:33.990]    __ap=0x00000000
[11:02:33.991]    __traceout=0x00000001      (SWO Trace)
[11:02:33.991]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:02:33.991]    __FlashAddr=0x00000000
[11:02:33.992]    __FlashLen=0x00000000
[11:02:33.993]    __FlashArg=0x00000000
[11:02:33.993]    __FlashOp=0x00000000
[11:02:33.993]    __Result=0x00000000
[11:02:33.993]    
[11:02:33.993]    // User-defined
[11:02:33.993]    DbgMCU_CR=0x00000007
[11:02:33.993]    DbgMCU_APB1_Fz=0x00000000
[11:02:33.994]    DbgMCU_APB2_Fz=0x00000000
[11:02:33.995]    TraceClk_Pin=0x00040002
[11:02:33.995]    TraceD0_Pin=0x00040003
[11:02:33.995]    TraceD1_Pin=0x00040004
[11:02:33.995]    TraceD2_Pin=0x00040005
[11:02:33.996]    TraceD3_Pin=0x00040006
[11:02:33.996]  </debugvars>
[11:02:33.996]  
[11:02:33.996]  <sequence name="TraceStart" Pname="" disable="false" info="">
[11:02:33.997]    <block atomic="false" info="">
[11:02:33.997]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[11:02:33.997]        // -> [traceSWO <= 0x00000001]
[11:02:33.997]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[11:02:33.997]        // -> [traceTPIU <= 0x00000000]
[11:02:33.998]    </block>
[11:02:33.998]    <control if="traceSWO" while="" timeout="0" info="">
[11:02:33.998]      // if-block "traceSWO"
[11:02:33.998]        // =>  TRUE
[11:02:33.999]      <block atomic="false" info="">
[11:02:33.999]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[11:02:33.999]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[11:02:33.999]            <block atomic="false" info="">
[11:02:33.999]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[11:02:34.000]                // -> [dbgmcu_val <= 0x00000000]
[11:02:34.001]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[11:02:34.001]                // -> [dbgmcu_trace_val <= 0x00000000]
[11:02:34.001]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[11:02:34.002]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.002]                // -> [dbgmcu_val <= 0x00000007]
[11:02:34.002]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[11:02:34.003]                // -> [dbgmcu_trace_val <= 0x00000020]
[11:02:34.004]              Sequence("ConfigureTraceSWOPin");
[11:02:34.004]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[11:02:34.004]                  <block atomic="false" info="">
[11:02:34.005]                    __var pin     = 0;
[11:02:34.005]                      // -> [pin <= 0x00000000]
[11:02:34.005]                    __var port    = 0;
[11:02:34.005]                      // -> [port <= 0x00000000]
[11:02:34.006]                    __var portAdr = 0;
[11:02:34.006]                      // -> [portAdr <= 0x00000000]
[11:02:34.006]                    __var pos     = 0;
[11:02:34.007]                      // -> [pos <= 0x00000000]
[11:02:34.007]                    __var SWO_Pin = 0x00010003;          // PB3
[11:02:34.007]                      // -> [SWO_Pin <= 0x00010003]
[11:02:34.007]                  </block>
[11:02:34.009]                  <block atomic="false" info="configure SWO">
[11:02:34.009]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[11:02:34.009]                      // -> [pin <= 0x00000003]
[11:02:34.009]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[11:02:34.009]                      // -> [port <= 0x00000001]
[11:02:34.010]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[11:02:34.010]                      // -> [portAdr <= 0x40020400]
[11:02:34.010]                    pos = pin * 2;
[11:02:34.010]                      // -> [pos <= 0x00000006]
[11:02:34.011]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[11:02:34.012]                      // -> [Read32(0x40023830) => 0x00000007]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.013]                      // -> [Write32(0x40023830, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.014]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[11:02:34.015]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.017]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.017]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[11:02:34.018]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.019]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.019]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[11:02:34.021]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.022]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.023]                  </block>
[11:02:34.023]                  <control if="pin <  8" while="" timeout="0" info="">
[11:02:34.023]                    // if-block "pin <  8"
[11:02:34.024]                      // =>  TRUE
[11:02:34.024]                    <block atomic="false" info="">
[11:02:34.024]                      pos = ((pin    ) & 7) * 4;
[11:02:34.024]                        // -> [pos <= 0x0000000C]
[11:02:34.024]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[11:02:34.026]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.028]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.028]                    </block>
[11:02:34.028]                    // end if-block "pin <  8"
[11:02:34.029]                  </control>
[11:02:34.029]                  <control if="pin >= 8" while="" timeout="0" info="">
[11:02:34.029]                    // if-block "pin >= 8"
[11:02:34.029]                      // =>  FALSE
[11:02:34.030]                    // skip if-block "pin >= 8"
[11:02:34.030]                  </control>
[11:02:34.030]                </sequence>
[11:02:34.030]            </block>
[11:02:34.030]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[11:02:34.031]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[11:02:34.032]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.033]            </block>
[11:02:34.033]          </sequence>
[11:02:34.033]      </block>
[11:02:34.033]      // end if-block "traceSWO"
[11:02:34.034]    </control>
[11:02:34.034]    <control if="traceTPIU" while="" timeout="0" info="">
[11:02:34.034]      // if-block "traceTPIU"
[11:02:34.034]        // =>  FALSE
[11:02:34.034]      // skip if-block "traceTPIU"
[11:02:34.035]    </control>
[11:02:34.036]  </sequence>
[11:02:34.036]  
[11:02:34.052]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[11:02:34.052]  
[11:02:34.053]  <debugvars>
[11:02:34.053]    // Pre-defined
[11:02:34.053]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:02:34.054]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:02:34.054]    __dp=0x00000000
[11:02:34.054]    __ap=0x00000000
[11:02:34.054]    __traceout=0x00000001      (SWO Trace)
[11:02:34.055]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:02:34.055]    __FlashAddr=0x00000000
[11:02:34.055]    __FlashLen=0x00000000
[11:02:34.055]    __FlashArg=0x00000000
[11:02:34.056]    __FlashOp=0x00000000
[11:02:34.056]    __Result=0x00000000
[11:02:34.056]    
[11:02:34.056]    // User-defined
[11:02:34.056]    DbgMCU_CR=0x00000007
[11:02:34.057]    DbgMCU_APB1_Fz=0x00000000
[11:02:34.057]    DbgMCU_APB2_Fz=0x00000000
[11:02:34.057]    TraceClk_Pin=0x00040002
[11:02:34.057]    TraceD0_Pin=0x00040003
[11:02:34.058]    TraceD1_Pin=0x00040004
[11:02:34.058]    TraceD2_Pin=0x00040005
[11:02:34.058]    TraceD3_Pin=0x00040006
[11:02:34.058]  </debugvars>
[11:02:34.058]  
[11:02:34.058]  <sequence name="TraceStart" Pname="" disable="false" info="">
[11:02:34.058]    <block atomic="false" info="">
[11:02:34.058]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[11:02:34.059]        // -> [traceSWO <= 0x00000001]
[11:02:34.059]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[11:02:34.059]        // -> [traceTPIU <= 0x00000000]
[11:02:34.059]    </block>
[11:02:34.059]    <control if="traceSWO" while="" timeout="0" info="">
[11:02:34.059]      // if-block "traceSWO"
[11:02:34.059]        // =>  TRUE
[11:02:34.059]      <block atomic="false" info="">
[11:02:34.060]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[11:02:34.060]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[11:02:34.060]            <block atomic="false" info="">
[11:02:34.060]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[11:02:34.060]                // -> [dbgmcu_val <= 0x00000000]
[11:02:34.060]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[11:02:34.061]                // -> [dbgmcu_trace_val <= 0x00000000]
[11:02:34.061]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[11:02:34.062]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.062]                // -> [dbgmcu_val <= 0x00000007]
[11:02:34.062]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[11:02:34.062]                // -> [dbgmcu_trace_val <= 0x00000020]
[11:02:34.062]              Sequence("ConfigureTraceSWOPin");
[11:02:34.062]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[11:02:34.062]                  <block atomic="false" info="">
[11:02:34.063]                    __var pin     = 0;
[11:02:34.063]                      // -> [pin <= 0x00000000]
[11:02:34.063]                    __var port    = 0;
[11:02:34.063]                      // -> [port <= 0x00000000]
[11:02:34.063]                    __var portAdr = 0;
[11:02:34.063]                      // -> [portAdr <= 0x00000000]
[11:02:34.064]                    __var pos     = 0;
[11:02:34.065]                      // -> [pos <= 0x00000000]
[11:02:34.065]                    __var SWO_Pin = 0x00010003;          // PB3
[11:02:34.065]                      // -> [SWO_Pin <= 0x00010003]
[11:02:34.065]                  </block>
[11:02:34.065]                  <block atomic="false" info="configure SWO">
[11:02:34.065]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[11:02:34.066]                      // -> [pin <= 0x00000003]
[11:02:34.066]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[11:02:34.066]                      // -> [port <= 0x00000001]
[11:02:34.066]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[11:02:34.066]                      // -> [portAdr <= 0x40020400]
[11:02:34.066]                    pos = pin * 2;
[11:02:34.066]                      // -> [pos <= 0x00000006]
[11:02:34.067]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[11:02:34.067]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.068]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.069]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[11:02:34.070]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.070]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.071]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[11:02:34.072]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.073]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.074]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[11:02:34.075]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.076]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.076]                  </block>
[11:02:34.076]                  <control if="pin <  8" while="" timeout="0" info="">
[11:02:34.076]                    // if-block "pin <  8"
[11:02:34.076]                      // =>  TRUE
[11:02:34.077]                    <block atomic="false" info="">
[11:02:34.077]                      pos = ((pin    ) & 7) * 4;
[11:02:34.077]                        // -> [pos <= 0x0000000C]
[11:02:34.077]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[11:02:34.078]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.079]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.079]                    </block>
[11:02:34.079]                    // end if-block "pin <  8"
[11:02:34.080]                  </control>
[11:02:34.080]                  <control if="pin >= 8" while="" timeout="0" info="">
[11:02:34.080]                    // if-block "pin >= 8"
[11:02:34.080]                      // =>  FALSE
[11:02:34.081]                    // skip if-block "pin >= 8"
[11:02:34.081]                  </control>
[11:02:34.081]                </sequence>
[11:02:34.081]            </block>
[11:02:34.082]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[11:02:34.082]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[11:02:34.083]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:34.084]            </block>
[11:02:34.084]          </sequence>
[11:02:34.084]      </block>
[11:02:34.084]      // end if-block "traceSWO"
[11:02:34.084]    </control>
[11:02:34.084]    <control if="traceTPIU" while="" timeout="0" info="">
[11:02:34.084]      // if-block "traceTPIU"
[11:02:34.085]        // =>  FALSE
[11:02:34.085]      // skip if-block "traceTPIU"
[11:02:34.085]    </control>
[11:02:34.085]  </sequence>
[11:02:34.085]  
[11:02:34.964]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[11:02:34.964]  
[11:02:35.012]  <debugvars>
[11:02:35.012]    // Pre-defined
[11:02:35.013]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:02:35.013]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:02:35.013]    __dp=0x00000000
[11:02:35.014]    __ap=0x00000000
[11:02:35.014]    __traceout=0x00000001      (SWO Trace)
[11:02:35.014]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:02:35.014]    __FlashAddr=0x00000000
[11:02:35.014]    __FlashLen=0x00000000
[11:02:35.015]    __FlashArg=0x00000000
[11:02:35.015]    __FlashOp=0x00000000
[11:02:35.015]    __Result=0x00000000
[11:02:35.015]    
[11:02:35.015]    // User-defined
[11:02:35.016]    DbgMCU_CR=0x00000007
[11:02:35.016]    DbgMCU_APB1_Fz=0x00000000
[11:02:35.017]    DbgMCU_APB2_Fz=0x00000000
[11:02:35.017]    TraceClk_Pin=0x00040002
[11:02:35.017]    TraceD0_Pin=0x00040003
[11:02:35.018]    TraceD1_Pin=0x00040004
[11:02:35.018]    TraceD2_Pin=0x00040005
[11:02:35.018]    TraceD3_Pin=0x00040006
[11:02:35.019]  </debugvars>
[11:02:35.019]  
[11:02:35.019]  <sequence name="TraceStart" Pname="" disable="false" info="">
[11:02:35.020]    <block atomic="false" info="">
[11:02:35.020]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[11:02:35.020]        // -> [traceSWO <= 0x00000001]
[11:02:35.021]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[11:02:35.021]        // -> [traceTPIU <= 0x00000000]
[11:02:35.021]    </block>
[11:02:35.021]    <control if="traceSWO" while="" timeout="0" info="">
[11:02:35.022]      // if-block "traceSWO"
[11:02:35.022]        // =>  TRUE
[11:02:35.022]      <block atomic="false" info="">
[11:02:35.022]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[11:02:35.023]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[11:02:35.023]            <block atomic="false" info="">
[11:02:35.023]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[11:02:35.023]                // -> [dbgmcu_val <= 0x00000000]
[11:02:35.024]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[11:02:35.024]                // -> [dbgmcu_trace_val <= 0x00000000]
[11:02:35.024]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[11:02:35.025]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[11:02:35.026]                // -> [dbgmcu_val <= 0x00000007]
[11:02:35.026]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[11:02:35.026]                // -> [dbgmcu_trace_val <= 0x00000020]
[11:02:35.027]              Sequence("ConfigureTraceSWOPin");
[11:02:35.027]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[11:02:35.027]                  <block atomic="false" info="">
[11:02:35.027]                    __var pin     = 0;
[11:02:35.028]                      // -> [pin <= 0x00000000]
[11:02:35.028]                    __var port    = 0;
[11:02:35.028]                      // -> [port <= 0x00000000]
[11:02:35.028]                    __var portAdr = 0;
[11:02:35.029]                      // -> [portAdr <= 0x00000000]
[11:02:35.029]                    __var pos     = 0;
[11:02:35.029]                      // -> [pos <= 0x00000000]
[11:02:35.029]                    __var SWO_Pin = 0x00010003;          // PB3
[11:02:35.030]                      // -> [SWO_Pin <= 0x00010003]
[11:02:35.030]                  </block>
[11:02:35.030]                  <block atomic="false" info="configure SWO">
[11:02:35.030]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[11:02:35.030]                      // -> [pin <= 0x00000003]
[11:02:35.031]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[11:02:35.031]                      // -> [port <= 0x00000001]
[11:02:35.031]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[11:02:35.032]                      // -> [portAdr <= 0x40020400]
[11:02:35.032]                    pos = pin * 2;
[11:02:35.032]                      // -> [pos <= 0x00000006]
[11:02:35.032]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[11:02:35.034]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[11:02:35.035]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:35.036]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[11:02:35.037]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[11:02:35.038]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:35.039]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[11:02:35.040]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[11:02:35.041]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:35.041]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[11:02:35.042]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[11:02:35.043]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:35.044]                  </block>
[11:02:35.045]                  <control if="pin <  8" while="" timeout="0" info="">
[11:02:35.045]                    // if-block "pin <  8"
[11:02:35.045]                      // =>  TRUE
[11:02:35.045]                    <block atomic="false" info="">
[11:02:35.046]                      pos = ((pin    ) & 7) * 4;
[11:02:35.046]                        // -> [pos <= 0x0000000C]
[11:02:35.046]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[11:02:35.047]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[11:02:35.048]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:35.048]                    </block>
[11:02:35.050]                    // end if-block "pin <  8"
[11:02:35.050]                  </control>
[11:02:35.050]                  <control if="pin >= 8" while="" timeout="0" info="">
[11:02:35.050]                    // if-block "pin >= 8"
[11:02:35.050]                      // =>  FALSE
[11:02:35.051]                    // skip if-block "pin >= 8"
[11:02:35.051]                  </control>
[11:02:35.051]                </sequence>
[11:02:35.051]            </block>
[11:02:35.052]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[11:02:35.052]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[11:02:35.053]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[11:02:35.053]            </block>
[11:02:35.054]          </sequence>
[11:02:35.055]      </block>
[11:02:35.055]      // end if-block "traceSWO"
[11:02:35.055]    </control>
[11:02:35.055]    <control if="traceTPIU" while="" timeout="0" info="">
[11:02:35.056]      // if-block "traceTPIU"
[11:02:35.056]        // =>  FALSE
[11:02:35.056]      // skip if-block "traceTPIU"
[11:02:35.056]    </control>
[11:02:35.057]  </sequence>
[11:02:35.057]  
[11:10:40.780]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[11:10:40.780]  
[11:10:40.827]  <debugvars>
[11:10:40.827]    // Pre-defined
[11:10:40.828]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:10:40.828]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:10:40.829]    __dp=0x00000000
[11:10:40.829]    __ap=0x00000000
[11:10:40.829]    __traceout=0x00000001      (SWO Trace)
[11:10:40.829]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:10:40.830]    __FlashAddr=0x00000000
[11:10:40.830]    __FlashLen=0x00000000
[11:10:40.830]    __FlashArg=0x00000000
[11:10:40.830]    __FlashOp=0x00000000
[11:10:40.831]    __Result=0x00000000
[11:10:40.831]    
[11:10:40.831]    // User-defined
[11:10:40.832]    DbgMCU_CR=0x00000007
[11:10:40.832]    DbgMCU_APB1_Fz=0x00000000
[11:10:40.832]    DbgMCU_APB2_Fz=0x00000000
[11:10:40.832]    TraceClk_Pin=0x00040002
[11:10:40.833]    TraceD0_Pin=0x00040003
[11:10:40.833]    TraceD1_Pin=0x00040004
[11:10:40.833]    TraceD2_Pin=0x00040005
[11:10:40.833]    TraceD3_Pin=0x00040006
[11:10:40.834]  </debugvars>
[11:10:40.834]  
[11:10:40.834]  <sequence name="TraceStop" Pname="" disable="false" info="">
[11:10:40.834]    <block atomic="false" info="">
[11:10:40.834]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[11:10:40.835]        // -> [traceSWO <= 0x00000001]
[11:10:40.835]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[11:10:40.836]        // -> [traceTPIU <= 0x00000000]
[11:10:40.836]    </block>
[11:10:40.836]    <control if="traceSWO" while="" timeout="0" info="">
[11:10:40.837]      // if-block "traceSWO"
[11:10:40.837]        // =>  TRUE
[11:10:40.838]      <block atomic="false" info="">
[11:10:40.838]        Sequence("DisableTraceSWO");
[11:10:40.838]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[11:10:40.839]            <block atomic="false" info="">
[11:10:40.840]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[11:10:40.840]                // -> [dbgmcu_val <= 0x00000000]
[11:10:40.840]            </block>
[11:10:40.841]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[11:10:40.841]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[11:10:40.842]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[11:10:40.842]                // -> [dbgmcu_val <= 0x00000007]
[11:10:40.843]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[11:10:40.844]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:40.844]            </block>
[11:10:40.845]          </sequence>
[11:10:40.846]      </block>
[11:10:40.846]      // end if-block "traceSWO"
[11:10:40.846]    </control>
[11:10:40.846]    <control if="traceTPIU" while="" timeout="0" info="">
[11:10:40.847]      // if-block "traceTPIU"
[11:10:40.847]        // =>  FALSE
[11:10:40.847]      // skip if-block "traceTPIU"
[11:10:40.847]    </control>
[11:10:40.847]  </sequence>
[11:10:40.848]  
[11:10:52.772]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[11:10:52.772]  
[11:10:52.818]  <debugvars>
[11:10:52.819]    // Pre-defined
[11:10:52.819]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:10:52.819]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:10:52.819]    __dp=0x00000000
[11:10:52.819]    __ap=0x00000000
[11:10:52.819]    __traceout=0x00000001      (SWO Trace)
[11:10:52.819]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:10:52.819]    __FlashAddr=0x00000000
[11:10:52.820]    __FlashLen=0x00000000
[11:10:52.821]    __FlashArg=0x00000000
[11:10:52.821]    __FlashOp=0x00000000
[11:10:52.821]    __Result=0x00000000
[11:10:52.821]    
[11:10:52.821]    // User-defined
[11:10:52.821]    DbgMCU_CR=0x00000007
[11:10:52.822]    DbgMCU_APB1_Fz=0x00000000
[11:10:52.822]    DbgMCU_APB2_Fz=0x00000000
[11:10:52.822]    TraceClk_Pin=0x00040002
[11:10:52.823]    TraceD0_Pin=0x00040003
[11:10:52.823]    TraceD1_Pin=0x00040004
[11:10:52.823]    TraceD2_Pin=0x00040005
[11:10:52.823]    TraceD3_Pin=0x00040006
[11:10:52.823]  </debugvars>
[11:10:52.824]  
[11:10:52.824]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[11:10:52.825]    <block atomic="false" info="">
[11:10:52.825]      Sequence("CheckID");
[11:10:52.826]        <sequence name="CheckID" Pname="" disable="false" info="">
[11:10:52.826]          <block atomic="false" info="">
[11:10:52.826]            __var pidr1 = 0;
[11:10:52.827]              // -> [pidr1 <= 0x00000000]
[11:10:52.827]            __var pidr2 = 0;
[11:10:52.827]              // -> [pidr2 <= 0x00000000]
[11:10:52.827]            __var jep106id = 0;
[11:10:52.829]              // -> [jep106id <= 0x00000000]
[11:10:52.829]            __var ROMTableBase = 0;
[11:10:52.829]              // -> [ROMTableBase <= 0x00000000]
[11:10:52.829]            __ap = 0;      // AHB-AP
[11:10:52.830]              // -> [__ap <= 0x00000000]
[11:10:52.830]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[11:10:52.832]              // -> [ReadAP(0x000000F8) => 0xE00FF003]   (__dp=0x00000000, __ap=0x00000000)
[11:10:52.832]              // -> [ROMTableBase <= 0xE00FF000]
[11:10:52.832]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[11:10:52.834]              // -> [Read32(0xE00FFFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[11:10:52.835]              // -> [pidr1 <= 0x00000004]
[11:10:52.835]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[11:10:52.836]              // -> [Read32(0xE00FFFE8) => 0x0000000A]   (__dp=0x00000000, __ap=0x00000000)
[11:10:52.836]              // -> [pidr2 <= 0x0000000A]
[11:10:52.837]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[11:10:52.838]              // -> [jep106id <= 0x00000020]
[11:10:52.838]          </block>
[11:10:52.838]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[11:10:52.838]            // if-block "jep106id != 0x20"
[11:10:52.839]              // =>  FALSE
[11:10:52.839]            // skip if-block "jep106id != 0x20"
[11:10:52.840]          </control>
[11:10:52.840]        </sequence>
[11:10:52.840]    </block>
[11:10:52.840]  </sequence>
[11:10:52.841]  
[11:10:52.841]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[11:10:52.841]  
[11:10:52.842]  <debugvars>
[11:10:52.842]    // Pre-defined
[11:10:52.842]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:10:52.843]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:10:52.843]    __dp=0x00000000
[11:10:52.844]    __ap=0x00000000
[11:10:52.844]    __traceout=0x00000001      (SWO Trace)
[11:10:52.844]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:10:52.845]    __FlashAddr=0x00000000
[11:10:52.845]    __FlashLen=0x00000000
[11:10:52.846]    __FlashArg=0x00000000
[11:10:52.846]    __FlashOp=0x00000000
[11:10:52.846]    __Result=0x00000000
[11:10:52.847]    
[11:10:52.847]    // User-defined
[11:10:52.847]    DbgMCU_CR=0x00000007
[11:10:52.848]    DbgMCU_APB1_Fz=0x00000000
[11:10:52.848]    DbgMCU_APB2_Fz=0x00000000
[11:10:52.849]    TraceClk_Pin=0x00040002
[11:10:52.849]    TraceD0_Pin=0x00040003
[11:10:52.849]    TraceD1_Pin=0x00040004
[11:10:52.850]    TraceD2_Pin=0x00040005
[11:10:52.850]    TraceD3_Pin=0x00040006
[11:10:52.851]  </debugvars>
[11:10:52.851]  
[11:10:52.852]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[11:10:52.852]    <block atomic="false" info="">
[11:10:52.853]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[11:10:52.854]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:52.855]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[11:10:52.856]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:52.857]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[11:10:52.858]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:52.858]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[11:10:52.860]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:52.860]    </block>
[11:10:52.861]  </sequence>
[11:10:52.861]  
[11:10:54.712]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[11:10:54.712]  
[11:10:54.759]  <debugvars>
[11:10:54.760]    // Pre-defined
[11:10:54.760]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:10:54.761]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:10:54.762]    __dp=0x00000000
[11:10:54.762]    __ap=0x00000000
[11:10:54.762]    __traceout=0x00000001      (SWO Trace)
[11:10:54.762]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:10:54.762]    __FlashAddr=0x00000000
[11:10:54.763]    __FlashLen=0x00000000
[11:10:54.763]    __FlashArg=0x00000000
[11:10:54.763]    __FlashOp=0x00000000
[11:10:54.764]    __Result=0x00000000
[11:10:54.764]    
[11:10:54.764]    // User-defined
[11:10:54.765]    DbgMCU_CR=0x00000007
[11:10:54.765]    DbgMCU_APB1_Fz=0x00000000
[11:10:54.767]    DbgMCU_APB2_Fz=0x00000000
[11:10:54.767]    TraceClk_Pin=0x00040002
[11:10:54.767]    TraceD0_Pin=0x00040003
[11:10:54.767]    TraceD1_Pin=0x00040004
[11:10:54.767]    TraceD2_Pin=0x00040005
[11:10:54.768]    TraceD3_Pin=0x00040006
[11:10:54.769]  </debugvars>
[11:10:54.769]  
[11:10:54.769]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[11:10:54.769]    <block atomic="false" info="">
[11:10:54.770]      Sequence("CheckID");
[11:10:54.770]        <sequence name="CheckID" Pname="" disable="false" info="">
[11:10:54.770]          <block atomic="false" info="">
[11:10:54.770]            __var pidr1 = 0;
[11:10:54.771]              // -> [pidr1 <= 0x00000000]
[11:10:54.772]            __var pidr2 = 0;
[11:10:54.772]              // -> [pidr2 <= 0x00000000]
[11:10:54.772]            __var jep106id = 0;
[11:10:54.772]              // -> [jep106id <= 0x00000000]
[11:10:54.773]            __var ROMTableBase = 0;
[11:10:54.773]              // -> [ROMTableBase <= 0x00000000]
[11:10:54.773]            __ap = 0;      // AHB-AP
[11:10:54.773]              // -> [__ap <= 0x00000000]
[11:10:54.774]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[11:10:54.774]              // -> [ReadAP(0x000000F8) => 0xE00FF003]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.775]              // -> [ROMTableBase <= 0xE00FF000]
[11:10:54.776]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[11:10:54.777]              // -> [Read32(0xE00FFFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.777]              // -> [pidr1 <= 0x00000004]
[11:10:54.778]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[11:10:54.779]              // -> [Read32(0xE00FFFE8) => 0x0000000A]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.779]              // -> [pidr2 <= 0x0000000A]
[11:10:54.780]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[11:10:54.780]              // -> [jep106id <= 0x00000020]
[11:10:54.780]          </block>
[11:10:54.781]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[11:10:54.782]            // if-block "jep106id != 0x20"
[11:10:54.782]              // =>  FALSE
[11:10:54.782]            // skip if-block "jep106id != 0x20"
[11:10:54.782]          </control>
[11:10:54.783]        </sequence>
[11:10:54.783]    </block>
[11:10:54.783]  </sequence>
[11:10:54.783]  
[11:10:54.784]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[11:10:54.784]  
[11:10:54.784]  <debugvars>
[11:10:54.784]    // Pre-defined
[11:10:54.784]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:10:54.785]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:10:54.785]    __dp=0x00000000
[11:10:54.785]    __ap=0x00000000
[11:10:54.785]    __traceout=0x00000001      (SWO Trace)
[11:10:54.786]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:10:54.786]    __FlashAddr=0x00000000
[11:10:54.786]    __FlashLen=0x00000000
[11:10:54.786]    __FlashArg=0x00000000
[11:10:54.787]    __FlashOp=0x00000000
[11:10:54.788]    __Result=0x00000000
[11:10:54.788]    
[11:10:54.788]    // User-defined
[11:10:54.788]    DbgMCU_CR=0x00000007
[11:10:54.788]    DbgMCU_APB1_Fz=0x00000000
[11:10:54.789]    DbgMCU_APB2_Fz=0x00000000
[11:10:54.789]    TraceClk_Pin=0x00040002
[11:10:54.789]    TraceD0_Pin=0x00040003
[11:10:54.789]    TraceD1_Pin=0x00040004
[11:10:54.790]    TraceD2_Pin=0x00040005
[11:10:54.790]    TraceD3_Pin=0x00040006
[11:10:54.790]  </debugvars>
[11:10:54.790]  
[11:10:54.791]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[11:10:54.791]    <block atomic="false" info="">
[11:10:54.791]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[11:10:54.793]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.793]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[11:10:54.795]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.795]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[11:10:54.796]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.798]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[11:10:54.798]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.799]    </block>
[11:10:54.800]  </sequence>
[11:10:54.800]  
[11:10:54.856]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[11:10:54.856]  
[11:10:54.857]  <debugvars>
[11:10:54.857]    // Pre-defined
[11:10:54.858]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:10:54.858]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:10:54.858]    __dp=0x00000000
[11:10:54.858]    __ap=0x00000000
[11:10:54.859]    __traceout=0x00000001      (SWO Trace)
[11:10:54.860]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:10:54.860]    __FlashAddr=0x00000000
[11:10:54.860]    __FlashLen=0x00000000
[11:10:54.860]    __FlashArg=0x00000000
[11:10:54.861]    __FlashOp=0x00000000
[11:10:54.861]    __Result=0x00000000
[11:10:54.861]    
[11:10:54.861]    // User-defined
[11:10:54.861]    DbgMCU_CR=0x00000007
[11:10:54.861]    DbgMCU_APB1_Fz=0x00000000
[11:10:54.862]    DbgMCU_APB2_Fz=0x00000000
[11:10:54.862]    TraceClk_Pin=0x00040002
[11:10:54.863]    TraceD0_Pin=0x00040003
[11:10:54.863]    TraceD1_Pin=0x00040004
[11:10:54.863]    TraceD2_Pin=0x00040005
[11:10:54.864]    TraceD3_Pin=0x00040006
[11:10:54.864]  </debugvars>
[11:10:54.865]  
[11:10:54.865]  <sequence name="TraceStart" Pname="" disable="false" info="">
[11:10:54.866]    <block atomic="false" info="">
[11:10:54.866]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[11:10:54.866]        // -> [traceSWO <= 0x00000001]
[11:10:54.867]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[11:10:54.867]        // -> [traceTPIU <= 0x00000000]
[11:10:54.868]    </block>
[11:10:54.868]    <control if="traceSWO" while="" timeout="0" info="">
[11:10:54.868]      // if-block "traceSWO"
[11:10:54.868]        // =>  TRUE
[11:10:54.869]      <block atomic="false" info="">
[11:10:54.869]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[11:10:54.869]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[11:10:54.870]            <block atomic="false" info="">
[11:10:54.870]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[11:10:54.871]                // -> [dbgmcu_val <= 0x00000000]
[11:10:54.871]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[11:10:54.872]                // -> [dbgmcu_trace_val <= 0x00000000]
[11:10:54.872]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[11:10:54.874]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.874]                // -> [dbgmcu_val <= 0x00000007]
[11:10:54.875]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[11:10:54.875]                // -> [dbgmcu_trace_val <= 0x00000020]
[11:10:54.875]              Sequence("ConfigureTraceSWOPin");
[11:10:54.876]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[11:10:54.877]                  <block atomic="false" info="">
[11:10:54.877]                    __var pin     = 0;
[11:10:54.877]                      // -> [pin <= 0x00000000]
[11:10:54.877]                    __var port    = 0;
[11:10:54.877]                      // -> [port <= 0x00000000]
[11:10:54.877]                    __var portAdr = 0;
[11:10:54.878]                      // -> [portAdr <= 0x00000000]
[11:10:54.878]                    __var pos     = 0;
[11:10:54.878]                      // -> [pos <= 0x00000000]
[11:10:54.879]                    __var SWO_Pin = 0x00010003;          // PB3
[11:10:54.879]                      // -> [SWO_Pin <= 0x00010003]
[11:10:54.880]                  </block>
[11:10:54.880]                  <block atomic="false" info="configure SWO">
[11:10:54.880]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[11:10:54.881]                      // -> [pin <= 0x00000003]
[11:10:54.881]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[11:10:54.882]                      // -> [port <= 0x00000001]
[11:10:54.882]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[11:10:54.882]                      // -> [portAdr <= 0x40020400]
[11:10:54.883]                    pos = pin * 2;
[11:10:54.883]                      // -> [pos <= 0x00000006]
[11:10:54.884]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[11:10:54.885]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.886]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.887]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[11:10:54.889]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.891]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.891]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[11:10:54.892]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.894]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.895]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[11:10:54.895]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.897]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.898]                  </block>
[11:10:54.898]                  <control if="pin <  8" while="" timeout="0" info="">
[11:10:54.899]                    // if-block "pin <  8"
[11:10:54.899]                      // =>  TRUE
[11:10:54.900]                    <block atomic="false" info="">
[11:10:54.900]                      pos = ((pin    ) & 7) * 4;
[11:10:54.900]                        // -> [pos <= 0x0000000C]
[11:10:54.901]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[11:10:54.902]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.904]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.904]                    </block>
[11:10:54.905]                    // end if-block "pin <  8"
[11:10:54.905]                  </control>
[11:10:54.906]                  <control if="pin >= 8" while="" timeout="0" info="">
[11:10:54.906]                    // if-block "pin >= 8"
[11:10:54.907]                      // =>  FALSE
[11:10:54.907]                    // skip if-block "pin >= 8"
[11:10:54.908]                  </control>
[11:10:54.908]                </sequence>
[11:10:54.908]            </block>
[11:10:54.908]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[11:10:54.909]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[11:10:54.910]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.910]            </block>
[11:10:54.911]          </sequence>
[11:10:54.911]      </block>
[11:10:54.912]      // end if-block "traceSWO"
[11:10:54.912]    </control>
[11:10:54.913]    <control if="traceTPIU" while="" timeout="0" info="">
[11:10:54.913]      // if-block "traceTPIU"
[11:10:54.913]        // =>  FALSE
[11:10:54.914]      // skip if-block "traceTPIU"
[11:10:54.914]    </control>
[11:10:54.915]  </sequence>
[11:10:54.915]  
[11:10:54.933]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[11:10:54.933]  
[11:10:54.934]  <debugvars>
[11:10:54.934]    // Pre-defined
[11:10:54.935]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:10:54.935]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:10:54.935]    __dp=0x00000000
[11:10:54.936]    __ap=0x00000000
[11:10:54.936]    __traceout=0x00000001      (SWO Trace)
[11:10:54.937]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:10:54.937]    __FlashAddr=0x00000000
[11:10:54.937]    __FlashLen=0x00000000
[11:10:54.938]    __FlashArg=0x00000000
[11:10:54.938]    __FlashOp=0x00000000
[11:10:54.938]    __Result=0x00000000
[11:10:54.938]    
[11:10:54.938]    // User-defined
[11:10:54.938]    DbgMCU_CR=0x00000007
[11:10:54.938]    DbgMCU_APB1_Fz=0x00000000
[11:10:54.940]    DbgMCU_APB2_Fz=0x00000000
[11:10:54.940]    TraceClk_Pin=0x00040002
[11:10:54.940]    TraceD0_Pin=0x00040003
[11:10:54.940]    TraceD1_Pin=0x00040004
[11:10:54.941]    TraceD2_Pin=0x00040005
[11:10:54.942]    TraceD3_Pin=0x00040006
[11:10:54.942]  </debugvars>
[11:10:54.942]  
[11:10:54.942]  <sequence name="TraceStart" Pname="" disable="false" info="">
[11:10:54.942]    <block atomic="false" info="">
[11:10:54.943]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[11:10:54.943]        // -> [traceSWO <= 0x00000001]
[11:10:54.944]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[11:10:54.945]        // -> [traceTPIU <= 0x00000000]
[11:10:54.945]    </block>
[11:10:54.946]    <control if="traceSWO" while="" timeout="0" info="">
[11:10:54.946]      // if-block "traceSWO"
[11:10:54.946]        // =>  TRUE
[11:10:54.946]      <block atomic="false" info="">
[11:10:54.946]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[11:10:54.946]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[11:10:54.948]            <block atomic="false" info="">
[11:10:54.948]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[11:10:54.948]                // -> [dbgmcu_val <= 0x00000000]
[11:10:54.949]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[11:10:54.949]                // -> [dbgmcu_trace_val <= 0x00000000]
[11:10:54.949]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[11:10:54.950]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.951]                // -> [dbgmcu_val <= 0x00000007]
[11:10:54.951]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[11:10:54.952]                // -> [dbgmcu_trace_val <= 0x00000020]
[11:10:54.952]              Sequence("ConfigureTraceSWOPin");
[11:10:54.952]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[11:10:54.953]                  <block atomic="false" info="">
[11:10:54.953]                    __var pin     = 0;
[11:10:54.953]                      // -> [pin <= 0x00000000]
[11:10:54.954]                    __var port    = 0;
[11:10:54.954]                      // -> [port <= 0x00000000]
[11:10:54.954]                    __var portAdr = 0;
[11:10:54.954]                      // -> [portAdr <= 0x00000000]
[11:10:54.954]                    __var pos     = 0;
[11:10:54.955]                      // -> [pos <= 0x00000000]
[11:10:54.955]                    __var SWO_Pin = 0x00010003;          // PB3
[11:10:54.955]                      // -> [SWO_Pin <= 0x00010003]
[11:10:54.956]                  </block>
[11:10:54.956]                  <block atomic="false" info="configure SWO">
[11:10:54.956]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[11:10:54.957]                      // -> [pin <= 0x00000003]
[11:10:54.957]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[11:10:54.958]                      // -> [port <= 0x00000001]
[11:10:54.958]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[11:10:54.958]                      // -> [portAdr <= 0x40020400]
[11:10:54.959]                    pos = pin * 2;
[11:10:54.959]                      // -> [pos <= 0x00000006]
[11:10:54.959]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[11:10:54.961]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.963]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.963]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[11:10:54.964]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.966]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.966]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[11:10:54.967]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.969]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.969]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[11:10:54.970]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.972]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.972]                  </block>
[11:10:54.973]                  <control if="pin <  8" while="" timeout="0" info="">
[11:10:54.973]                    // if-block "pin <  8"
[11:10:54.974]                      // =>  TRUE
[11:10:54.974]                    <block atomic="false" info="">
[11:10:54.974]                      pos = ((pin    ) & 7) * 4;
[11:10:54.975]                        // -> [pos <= 0x0000000C]
[11:10:54.975]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[11:10:54.976]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.978]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.978]                    </block>
[11:10:54.979]                    // end if-block "pin <  8"
[11:10:54.979]                  </control>
[11:10:54.980]                  <control if="pin >= 8" while="" timeout="0" info="">
[11:10:54.980]                    // if-block "pin >= 8"
[11:10:54.980]                      // =>  FALSE
[11:10:54.981]                    // skip if-block "pin >= 8"
[11:10:54.981]                  </control>
[11:10:54.981]                </sequence>
[11:10:54.981]            </block>
[11:10:54.982]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[11:10:54.982]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[11:10:54.983]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:54.983]            </block>
[11:10:54.984]          </sequence>
[11:10:54.984]      </block>
[11:10:54.985]      // end if-block "traceSWO"
[11:10:54.985]    </control>
[11:10:54.986]    <control if="traceTPIU" while="" timeout="0" info="">
[11:10:54.986]      // if-block "traceTPIU"
[11:10:54.986]        // =>  FALSE
[11:10:54.987]      // skip if-block "traceTPIU"
[11:10:54.987]    </control>
[11:10:54.987]  </sequence>
[11:10:54.988]  
[11:10:55.850]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[11:10:55.850]  
[11:10:55.897]  <debugvars>
[11:10:55.898]    // Pre-defined
[11:10:55.898]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:10:55.899]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:10:55.899]    __dp=0x00000000
[11:10:55.900]    __ap=0x00000000
[11:10:55.900]    __traceout=0x00000001      (SWO Trace)
[11:10:55.900]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:10:55.902]    __FlashAddr=0x00000000
[11:10:55.902]    __FlashLen=0x00000000
[11:10:55.902]    __FlashArg=0x00000000
[11:10:55.902]    __FlashOp=0x00000000
[11:10:55.903]    __Result=0x00000000
[11:10:55.903]    
[11:10:55.903]    // User-defined
[11:10:55.903]    DbgMCU_CR=0x00000007
[11:10:55.903]    DbgMCU_APB1_Fz=0x00000000
[11:10:55.904]    DbgMCU_APB2_Fz=0x00000000
[11:10:55.904]    TraceClk_Pin=0x00040002
[11:10:55.904]    TraceD0_Pin=0x00040003
[11:10:55.904]    TraceD1_Pin=0x00040004
[11:10:55.905]    TraceD2_Pin=0x00040005
[11:10:55.905]    TraceD3_Pin=0x00040006
[11:10:55.906]  </debugvars>
[11:10:55.906]  
[11:10:55.906]  <sequence name="TraceStart" Pname="" disable="false" info="">
[11:10:55.907]    <block atomic="false" info="">
[11:10:55.907]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[11:10:55.907]        // -> [traceSWO <= 0x00000001]
[11:10:55.907]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[11:10:55.907]        // -> [traceTPIU <= 0x00000000]
[11:10:55.908]    </block>
[11:10:55.908]    <control if="traceSWO" while="" timeout="0" info="">
[11:10:55.908]      // if-block "traceSWO"
[11:10:55.908]        // =>  TRUE
[11:10:55.909]      <block atomic="false" info="">
[11:10:55.910]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[11:10:55.910]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[11:10:55.910]            <block atomic="false" info="">
[11:10:55.910]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[11:10:55.910]                // -> [dbgmcu_val <= 0x00000000]
[11:10:55.910]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[11:10:55.911]                // -> [dbgmcu_trace_val <= 0x00000000]
[11:10:55.912]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[11:10:55.913]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[11:10:55.913]                // -> [dbgmcu_val <= 0x00000007]
[11:10:55.913]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[11:10:55.913]                // -> [dbgmcu_trace_val <= 0x00000020]
[11:10:55.915]              Sequence("ConfigureTraceSWOPin");
[11:10:55.915]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[11:10:55.915]                  <block atomic="false" info="">
[11:10:55.915]                    __var pin     = 0;
[11:10:55.915]                      // -> [pin <= 0x00000000]
[11:10:55.916]                    __var port    = 0;
[11:10:55.916]                      // -> [port <= 0x00000000]
[11:10:55.917]                    __var portAdr = 0;
[11:10:55.917]                      // -> [portAdr <= 0x00000000]
[11:10:55.917]                    __var pos     = 0;
[11:10:55.918]                      // -> [pos <= 0x00000000]
[11:10:55.918]                    __var SWO_Pin = 0x00010003;          // PB3
[11:10:55.919]                      // -> [SWO_Pin <= 0x00010003]
[11:10:55.919]                  </block>
[11:10:55.919]                  <block atomic="false" info="configure SWO">
[11:10:55.919]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[11:10:55.920]                      // -> [pin <= 0x00000003]
[11:10:55.920]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[11:10:55.920]                      // -> [port <= 0x00000001]
[11:10:55.920]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[11:10:55.921]                      // -> [portAdr <= 0x40020400]
[11:10:55.921]                    pos = pin * 2;
[11:10:55.922]                      // -> [pos <= 0x00000006]
[11:10:55.922]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[11:10:55.923]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[11:10:55.925]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:55.925]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[11:10:55.927]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[11:10:55.929]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:55.929]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[11:10:55.931]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[11:10:55.932]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:55.934]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[11:10:55.935]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[11:10:55.937]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:55.937]                  </block>
[11:10:55.937]                  <control if="pin <  8" while="" timeout="0" info="">
[11:10:55.937]                    // if-block "pin <  8"
[11:10:55.937]                      // =>  TRUE
[11:10:55.939]                    <block atomic="false" info="">
[11:10:55.939]                      pos = ((pin    ) & 7) * 4;
[11:10:55.939]                        // -> [pos <= 0x0000000C]
[11:10:55.939]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[11:10:55.940]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[11:10:55.942]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:55.942]                    </block>
[11:10:55.943]                    // end if-block "pin <  8"
[11:10:55.943]                  </control>
[11:10:55.943]                  <control if="pin >= 8" while="" timeout="0" info="">
[11:10:55.944]                    // if-block "pin >= 8"
[11:10:55.944]                      // =>  FALSE
[11:10:55.945]                    // skip if-block "pin >= 8"
[11:10:55.946]                  </control>
[11:10:55.946]                </sequence>
[11:10:55.946]            </block>
[11:10:55.946]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[11:10:55.947]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[11:10:55.948]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[11:10:55.948]            </block>
[11:10:55.948]          </sequence>
[11:10:55.949]      </block>
[11:10:55.949]      // end if-block "traceSWO"
[11:10:55.950]    </control>
[11:10:55.950]    <control if="traceTPIU" while="" timeout="0" info="">
[11:10:55.950]      // if-block "traceTPIU"
[11:10:55.951]        // =>  FALSE
[11:10:55.952]      // skip if-block "traceTPIU"
[11:10:55.952]    </control>
[11:10:55.952]  </sequence>
[11:10:55.952]  
[11:11:43.874]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[11:11:43.874]  
[11:11:43.922]  <debugvars>
[11:11:43.923]    // Pre-defined
[11:11:43.923]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:11:43.924]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:11:43.924]    __dp=0x00000000
[11:11:43.925]    __ap=0x00000000
[11:11:43.925]    __traceout=0x00000001      (SWO Trace)
[11:11:43.926]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:11:43.926]    __FlashAddr=0x00000000
[11:11:43.927]    __FlashLen=0x00000000
[11:11:43.927]    __FlashArg=0x00000000
[11:11:43.927]    __FlashOp=0x00000000
[11:11:43.928]    __Result=0x00000000
[11:11:43.928]    
[11:11:43.928]    // User-defined
[11:11:43.929]    DbgMCU_CR=0x00000007
[11:11:43.929]    DbgMCU_APB1_Fz=0x00000000
[11:11:43.929]    DbgMCU_APB2_Fz=0x00000000
[11:11:43.929]    TraceClk_Pin=0x00040002
[11:11:43.930]    TraceD0_Pin=0x00040003
[11:11:43.930]    TraceD1_Pin=0x00040004
[11:11:43.930]    TraceD2_Pin=0x00040005
[11:11:43.931]    TraceD3_Pin=0x00040006
[11:11:43.931]  </debugvars>
[11:11:43.931]  
[11:11:43.931]  <sequence name="TraceStop" Pname="" disable="false" info="">
[11:11:43.932]    <block atomic="false" info="">
[11:11:43.932]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[11:11:43.932]        // -> [traceSWO <= 0x00000001]
[11:11:43.933]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[11:11:43.933]        // -> [traceTPIU <= 0x00000000]
[11:11:43.933]    </block>
[11:11:43.933]    <control if="traceSWO" while="" timeout="0" info="">
[11:11:43.933]      // if-block "traceSWO"
[11:11:43.934]        // =>  TRUE
[11:11:43.934]      <block atomic="false" info="">
[11:11:43.934]        Sequence("DisableTraceSWO");
[11:11:43.934]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[11:11:43.935]            <block atomic="false" info="">
[11:11:43.935]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[11:11:43.935]                // -> [dbgmcu_val <= 0x00000000]
[11:11:43.935]            </block>
[11:11:43.936]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[11:11:43.936]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[11:11:43.940]  
[11:11:43.940]  !!! E310 : Debug access failed - cannot read address 0xE0042004 (accsize '4', AP '0x00000000')
[11:11:43.940]  
[11:11:43.941]                // -> [Read32(0xE0042004) => 0x000A0012]   (__dp=0x00000000, __ap=0x00000000)
[11:11:43.941]            </block>
[11:11:43.942]          </sequence>
[11:11:43.942]      </block>
[11:11:43.942]      // end if-block "traceSWO"
[11:11:43.943]    </control>
[11:11:43.943]  </sequence>
[11:11:43.944]  
[11:13:08.136]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[11:13:08.136]  
[11:13:08.183]  <debugvars>
[11:13:08.183]    // Pre-defined
[11:13:08.185]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:13:08.185]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:13:08.185]    __dp=0x00000000
[11:13:08.185]    __ap=0x00000000
[11:13:08.186]    __traceout=0x00000001      (SWO Trace)
[11:13:08.187]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:13:08.187]    __FlashAddr=0x00000000
[11:13:08.187]    __FlashLen=0x00000000
[11:13:08.187]    __FlashArg=0x00000000
[11:13:08.188]    __FlashOp=0x00000000
[11:13:08.188]    __Result=0x00000000
[11:13:08.189]    
[11:13:08.189]    // User-defined
[11:13:08.189]    DbgMCU_CR=0x00000007
[11:13:08.189]    DbgMCU_APB1_Fz=0x00000000
[11:13:08.189]    DbgMCU_APB2_Fz=0x00000000
[11:13:08.190]    TraceClk_Pin=0x00040002
[11:13:08.190]    TraceD0_Pin=0x00040003
[11:13:08.190]    TraceD1_Pin=0x00040004
[11:13:08.190]    TraceD2_Pin=0x00040005
[11:13:08.191]    TraceD3_Pin=0x00040006
[11:13:08.191]  </debugvars>
[11:13:08.191]  
[11:13:08.191]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[11:13:08.192]    <block atomic="false" info="">
[11:13:08.193]      Sequence("CheckID");
[11:13:08.193]        <sequence name="CheckID" Pname="" disable="false" info="">
[11:13:08.193]          <block atomic="false" info="">
[11:13:08.193]            __var pidr1 = 0;
[11:13:08.194]              // -> [pidr1 <= 0x00000000]
[11:13:08.194]            __var pidr2 = 0;
[11:13:08.194]              // -> [pidr2 <= 0x00000000]
[11:13:08.194]            __var jep106id = 0;
[11:13:08.195]              // -> [jep106id <= 0x00000000]
[11:13:08.195]            __var ROMTableBase = 0;
[11:13:08.195]              // -> [ROMTableBase <= 0x00000000]
[11:13:08.195]            __ap = 0;      // AHB-AP
[11:13:08.196]              // -> [__ap <= 0x00000000]
[11:13:08.196]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[11:13:08.197]              // -> [ReadAP(0x000000F8) => 0xE00FF003]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.197]              // -> [ROMTableBase <= 0xE00FF000]
[11:13:08.197]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[11:13:08.199]              // -> [Read32(0xE00FFFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.199]              // -> [pidr1 <= 0x00000004]
[11:13:08.201]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[11:13:08.201]              // -> [Read32(0xE00FFFE8) => 0x0000000A]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.203]              // -> [pidr2 <= 0x0000000A]
[11:13:08.203]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[11:13:08.203]              // -> [jep106id <= 0x00000020]
[11:13:08.204]          </block>
[11:13:08.204]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[11:13:08.204]            // if-block "jep106id != 0x20"
[11:13:08.204]              // =>  FALSE
[11:13:08.205]            // skip if-block "jep106id != 0x20"
[11:13:08.205]          </control>
[11:13:08.205]        </sequence>
[11:13:08.206]    </block>
[11:13:08.206]  </sequence>
[11:13:08.206]  
[11:13:08.206]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[11:13:08.206]  
[11:13:08.207]  <debugvars>
[11:13:08.207]    // Pre-defined
[11:13:08.207]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:13:08.207]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:13:08.208]    __dp=0x00000000
[11:13:08.208]    __ap=0x00000000
[11:13:08.208]    __traceout=0x00000001      (SWO Trace)
[11:13:08.208]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:13:08.209]    __FlashAddr=0x00000000
[11:13:08.209]    __FlashLen=0x00000000
[11:13:08.209]    __FlashArg=0x00000000
[11:13:08.209]    __FlashOp=0x00000000
[11:13:08.210]    __Result=0x00000000
[11:13:08.210]    
[11:13:08.210]    // User-defined
[11:13:08.210]    DbgMCU_CR=0x00000007
[11:13:08.210]    DbgMCU_APB1_Fz=0x00000000
[11:13:08.211]    DbgMCU_APB2_Fz=0x00000000
[11:13:08.211]    TraceClk_Pin=0x00040002
[11:13:08.211]    TraceD0_Pin=0x00040003
[11:13:08.212]    TraceD1_Pin=0x00040004
[11:13:08.212]    TraceD2_Pin=0x00040005
[11:13:08.212]    TraceD3_Pin=0x00040006
[11:13:08.213]  </debugvars>
[11:13:08.213]  
[11:13:08.213]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[11:13:08.213]    <block atomic="false" info="">
[11:13:08.214]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[11:13:08.215]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.215]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[11:13:08.217]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.218]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[11:13:08.219]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.219]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[11:13:08.221]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.221]    </block>
[11:13:08.221]  </sequence>
[11:13:08.221]  
[11:13:08.271]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[11:13:08.271]  
[11:13:08.271]  <debugvars>
[11:13:08.272]    // Pre-defined
[11:13:08.273]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:13:08.273]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:13:08.273]    __dp=0x00000000
[11:13:08.273]    __ap=0x00000000
[11:13:08.274]    __traceout=0x00000001      (SWO Trace)
[11:13:08.274]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:13:08.275]    __FlashAddr=0x00000000
[11:13:08.275]    __FlashLen=0x00000000
[11:13:08.275]    __FlashArg=0x00000000
[11:13:08.276]    __FlashOp=0x00000000
[11:13:08.277]    __Result=0x00000000
[11:13:08.277]    
[11:13:08.277]    // User-defined
[11:13:08.277]    DbgMCU_CR=0x00000007
[11:13:08.277]    DbgMCU_APB1_Fz=0x00000000
[11:13:08.277]    DbgMCU_APB2_Fz=0x00000000
[11:13:08.278]    TraceClk_Pin=0x00040002
[11:13:08.278]    TraceD0_Pin=0x00040003
[11:13:08.278]    TraceD1_Pin=0x00040004
[11:13:08.278]    TraceD2_Pin=0x00040005
[11:13:08.279]    TraceD3_Pin=0x00040006
[11:13:08.279]  </debugvars>
[11:13:08.279]  
[11:13:08.279]  <sequence name="TraceStart" Pname="" disable="false" info="">
[11:13:08.279]    <block atomic="false" info="">
[11:13:08.280]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[11:13:08.280]        // -> [traceSWO <= 0x00000001]
[11:13:08.280]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[11:13:08.280]        // -> [traceTPIU <= 0x00000000]
[11:13:08.281]    </block>
[11:13:08.281]    <control if="traceSWO" while="" timeout="0" info="">
[11:13:08.281]      // if-block "traceSWO"
[11:13:08.281]        // =>  TRUE
[11:13:08.282]      <block atomic="false" info="">
[11:13:08.282]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[11:13:08.282]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[11:13:08.282]            <block atomic="false" info="">
[11:13:08.283]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[11:13:08.283]                // -> [dbgmcu_val <= 0x00000000]
[11:13:08.283]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[11:13:08.283]                // -> [dbgmcu_trace_val <= 0x00000000]
[11:13:08.283]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[11:13:08.285]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.285]                // -> [dbgmcu_val <= 0x00000007]
[11:13:08.286]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[11:13:08.286]                // -> [dbgmcu_trace_val <= 0x00000020]
[11:13:08.287]              Sequence("ConfigureTraceSWOPin");
[11:13:08.287]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[11:13:08.287]                  <block atomic="false" info="">
[11:13:08.288]                    __var pin     = 0;
[11:13:08.288]                      // -> [pin <= 0x00000000]
[11:13:08.288]                    __var port    = 0;
[11:13:08.288]                      // -> [port <= 0x00000000]
[11:13:08.289]                    __var portAdr = 0;
[11:13:08.289]                      // -> [portAdr <= 0x00000000]
[11:13:08.289]                    __var pos     = 0;
[11:13:08.289]                      // -> [pos <= 0x00000000]
[11:13:08.290]                    __var SWO_Pin = 0x00010003;          // PB3
[11:13:08.291]                      // -> [SWO_Pin <= 0x00010003]
[11:13:08.291]                  </block>
[11:13:08.291]                  <block atomic="false" info="configure SWO">
[11:13:08.291]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[11:13:08.292]                      // -> [pin <= 0x00000003]
[11:13:08.292]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[11:13:08.292]                      // -> [port <= 0x00000001]
[11:13:08.292]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[11:13:08.293]                      // -> [portAdr <= 0x40020400]
[11:13:08.293]                    pos = pin * 2;
[11:13:08.293]                      // -> [pos <= 0x00000006]
[11:13:08.293]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[11:13:08.294]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.296]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.297]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[11:13:08.298]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.299]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.299]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[11:13:08.300]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.302]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.302]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[11:13:08.304]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.306]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.306]                  </block>
[11:13:08.306]                  <control if="pin <  8" while="" timeout="0" info="">
[11:13:08.306]                    // if-block "pin <  8"
[11:13:08.307]                      // =>  TRUE
[11:13:08.307]                    <block atomic="false" info="">
[11:13:08.307]                      pos = ((pin    ) & 7) * 4;
[11:13:08.307]                        // -> [pos <= 0x0000000C]
[11:13:08.308]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[11:13:08.309]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.310]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.310]                    </block>
[11:13:08.311]                    // end if-block "pin <  8"
[11:13:08.311]                  </control>
[11:13:08.311]                  <control if="pin >= 8" while="" timeout="0" info="">
[11:13:08.311]                    // if-block "pin >= 8"
[11:13:08.312]                      // =>  FALSE
[11:13:08.313]                    // skip if-block "pin >= 8"
[11:13:08.313]                  </control>
[11:13:08.313]                </sequence>
[11:13:08.313]            </block>
[11:13:08.314]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[11:13:08.314]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[11:13:08.315]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.315]            </block>
[11:13:08.315]          </sequence>
[11:13:08.316]      </block>
[11:13:08.316]      // end if-block "traceSWO"
[11:13:08.316]    </control>
[11:13:08.316]    <control if="traceTPIU" while="" timeout="0" info="">
[11:13:08.317]      // if-block "traceTPIU"
[11:13:08.317]        // =>  FALSE
[11:13:08.317]      // skip if-block "traceTPIU"
[11:13:08.318]    </control>
[11:13:08.318]  </sequence>
[11:13:08.318]  
[11:13:08.337]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[11:13:08.337]  
[11:13:08.337]  <debugvars>
[11:13:08.337]    // Pre-defined
[11:13:08.337]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:13:08.338]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:13:08.338]    __dp=0x00000000
[11:13:08.338]    __ap=0x00000000
[11:13:08.339]    __traceout=0x00000001      (SWO Trace)
[11:13:08.339]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:13:08.339]    __FlashAddr=0x00000000
[11:13:08.339]    __FlashLen=0x00000000
[11:13:08.340]    __FlashArg=0x00000000
[11:13:08.340]    __FlashOp=0x00000000
[11:13:08.340]    __Result=0x00000000
[11:13:08.340]    
[11:13:08.340]    // User-defined
[11:13:08.341]    DbgMCU_CR=0x00000007
[11:13:08.341]    DbgMCU_APB1_Fz=0x00000000
[11:13:08.341]    DbgMCU_APB2_Fz=0x00000000
[11:13:08.341]    TraceClk_Pin=0x00040002
[11:13:08.341]    TraceD0_Pin=0x00040003
[11:13:08.342]    TraceD1_Pin=0x00040004
[11:13:08.342]    TraceD2_Pin=0x00040005
[11:13:08.342]    TraceD3_Pin=0x00040006
[11:13:08.342]  </debugvars>
[11:13:08.343]  
[11:13:08.343]  <sequence name="TraceStart" Pname="" disable="false" info="">
[11:13:08.343]    <block atomic="false" info="">
[11:13:08.343]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[11:13:08.343]        // -> [traceSWO <= 0x00000001]
[11:13:08.344]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[11:13:08.344]        // -> [traceTPIU <= 0x00000000]
[11:13:08.344]    </block>
[11:13:08.344]    <control if="traceSWO" while="" timeout="0" info="">
[11:13:08.345]      // if-block "traceSWO"
[11:13:08.345]        // =>  TRUE
[11:13:08.345]      <block atomic="false" info="">
[11:13:08.345]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[11:13:08.345]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[11:13:08.346]            <block atomic="false" info="">
[11:13:08.346]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[11:13:08.346]                // -> [dbgmcu_val <= 0x00000000]
[11:13:08.346]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[11:13:08.347]                // -> [dbgmcu_trace_val <= 0x00000000]
[11:13:08.347]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[11:13:08.349]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.349]                // -> [dbgmcu_val <= 0x00000007]
[11:13:08.349]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[11:13:08.350]                // -> [dbgmcu_trace_val <= 0x00000020]
[11:13:08.350]              Sequence("ConfigureTraceSWOPin");
[11:13:08.350]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[11:13:08.350]                  <block atomic="false" info="">
[11:13:08.351]                    __var pin     = 0;
[11:13:08.351]                      // -> [pin <= 0x00000000]
[11:13:08.351]                    __var port    = 0;
[11:13:08.351]                      // -> [port <= 0x00000000]
[11:13:08.352]                    __var portAdr = 0;
[11:13:08.352]                      // -> [portAdr <= 0x00000000]
[11:13:08.352]                    __var pos     = 0;
[11:13:08.352]                      // -> [pos <= 0x00000000]
[11:13:08.352]                    __var SWO_Pin = 0x00010003;          // PB3
[11:13:08.353]                      // -> [SWO_Pin <= 0x00010003]
[11:13:08.353]                  </block>
[11:13:08.354]                  <block atomic="false" info="configure SWO">
[11:13:08.354]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[11:13:08.355]                      // -> [pin <= 0x00000003]
[11:13:08.355]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[11:13:08.355]                      // -> [port <= 0x00000001]
[11:13:08.355]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[11:13:08.356]                      // -> [portAdr <= 0x40020400]
[11:13:08.356]                    pos = pin * 2;
[11:13:08.356]                      // -> [pos <= 0x00000006]
[11:13:08.356]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[11:13:08.357]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.359]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.359]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[11:13:08.361]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.362]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.362]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[11:13:08.363]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.365]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.365]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[11:13:08.367]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.368]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.369]                  </block>
[11:13:08.369]                  <control if="pin <  8" while="" timeout="0" info="">
[11:13:08.369]                    // if-block "pin <  8"
[11:13:08.370]                      // =>  TRUE
[11:13:08.370]                    <block atomic="false" info="">
[11:13:08.370]                      pos = ((pin    ) & 7) * 4;
[11:13:08.371]                        // -> [pos <= 0x0000000C]
[11:13:08.371]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[11:13:08.372]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.374]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.374]                    </block>
[11:13:08.374]                    // end if-block "pin <  8"
[11:13:08.374]                  </control>
[11:13:08.375]                  <control if="pin >= 8" while="" timeout="0" info="">
[11:13:08.375]                    // if-block "pin >= 8"
[11:13:08.375]                      // =>  FALSE
[11:13:08.375]                    // skip if-block "pin >= 8"
[11:13:08.376]                  </control>
[11:13:08.376]                </sequence>
[11:13:08.376]            </block>
[11:13:08.376]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[11:13:08.377]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[11:13:08.378]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:08.378]            </block>
[11:13:08.379]          </sequence>
[11:13:08.379]      </block>
[11:13:08.380]      // end if-block "traceSWO"
[11:13:08.380]    </control>
[11:13:08.380]    <control if="traceTPIU" while="" timeout="0" info="">
[11:13:08.380]      // if-block "traceTPIU"
[11:13:08.380]        // =>  FALSE
[11:13:08.381]      // skip if-block "traceTPIU"
[11:13:08.381]    </control>
[11:13:08.381]  </sequence>
[11:13:08.382]  
[11:13:09.109]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[11:13:09.109]  
[11:13:09.155]  <debugvars>
[11:13:09.155]    // Pre-defined
[11:13:09.156]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:13:09.156]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:13:09.156]    __dp=0x00000000
[11:13:09.157]    __ap=0x00000000
[11:13:09.157]    __traceout=0x00000001      (SWO Trace)
[11:13:09.157]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:13:09.157]    __FlashAddr=0x00000000
[11:13:09.158]    __FlashLen=0x00000000
[11:13:09.158]    __FlashArg=0x00000000
[11:13:09.158]    __FlashOp=0x00000000
[11:13:09.158]    __Result=0x00000000
[11:13:09.159]    
[11:13:09.159]    // User-defined
[11:13:09.159]    DbgMCU_CR=0x00000007
[11:13:09.159]    DbgMCU_APB1_Fz=0x00000000
[11:13:09.160]    DbgMCU_APB2_Fz=0x00000000
[11:13:09.160]    TraceClk_Pin=0x00040002
[11:13:09.160]    TraceD0_Pin=0x00040003
[11:13:09.161]    TraceD1_Pin=0x00040004
[11:13:09.161]    TraceD2_Pin=0x00040005
[11:13:09.161]    TraceD3_Pin=0x00040006
[11:13:09.161]  </debugvars>
[11:13:09.162]  
[11:13:09.162]  <sequence name="TraceStart" Pname="" disable="false" info="">
[11:13:09.162]    <block atomic="false" info="">
[11:13:09.163]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[11:13:09.163]        // -> [traceSWO <= 0x00000001]
[11:13:09.163]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[11:13:09.163]        // -> [traceTPIU <= 0x00000000]
[11:13:09.164]    </block>
[11:13:09.164]    <control if="traceSWO" while="" timeout="0" info="">
[11:13:09.164]      // if-block "traceSWO"
[11:13:09.164]        // =>  TRUE
[11:13:09.165]      <block atomic="false" info="">
[11:13:09.165]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[11:13:09.165]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[11:13:09.165]            <block atomic="false" info="">
[11:13:09.166]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[11:13:09.166]                // -> [dbgmcu_val <= 0x00000000]
[11:13:09.166]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[11:13:09.166]                // -> [dbgmcu_trace_val <= 0x00000000]
[11:13:09.167]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[11:13:09.168]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[11:13:09.169]                // -> [dbgmcu_val <= 0x00000007]
[11:13:09.169]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[11:13:09.169]                // -> [dbgmcu_trace_val <= 0x00000020]
[11:13:09.170]              Sequence("ConfigureTraceSWOPin");
[11:13:09.170]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[11:13:09.171]                  <block atomic="false" info="">
[11:13:09.171]                    __var pin     = 0;
[11:13:09.171]                      // -> [pin <= 0x00000000]
[11:13:09.172]                    __var port    = 0;
[11:13:09.172]                      // -> [port <= 0x00000000]
[11:13:09.172]                    __var portAdr = 0;
[11:13:09.173]                      // -> [portAdr <= 0x00000000]
[11:13:09.173]                    __var pos     = 0;
[11:13:09.173]                      // -> [pos <= 0x00000000]
[11:13:09.173]                    __var SWO_Pin = 0x00010003;          // PB3
[11:13:09.174]                      // -> [SWO_Pin <= 0x00010003]
[11:13:09.174]                  </block>
[11:13:09.174]                  <block atomic="false" info="configure SWO">
[11:13:09.175]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[11:13:09.175]                      // -> [pin <= 0x00000003]
[11:13:09.175]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[11:13:09.175]                      // -> [port <= 0x00000001]
[11:13:09.176]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[11:13:09.176]                      // -> [portAdr <= 0x40020400]
[11:13:09.176]                    pos = pin * 2;
[11:13:09.177]                      // -> [pos <= 0x00000006]
[11:13:09.177]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[11:13:09.178]                      // -> [Read32(0x40023830) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[11:13:09.179]                      // -> [Write32(0x40023830, 0x00000002)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:09.180]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[11:13:09.181]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[11:13:09.183]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:09.183]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[11:13:09.185]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[11:13:09.187]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:09.187]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[11:13:09.188]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[11:13:09.189]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:09.191]                  </block>
[11:13:09.191]                  <control if="pin <  8" while="" timeout="0" info="">
[11:13:09.191]                    // if-block "pin <  8"
[11:13:09.191]                      // =>  TRUE
[11:13:09.192]                    <block atomic="false" info="">
[11:13:09.192]                      pos = ((pin    ) & 7) * 4;
[11:13:09.192]                        // -> [pos <= 0x0000000C]
[11:13:09.192]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[11:13:09.193]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[11:13:09.194]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:09.195]                    </block>
[11:13:09.196]                    // end if-block "pin <  8"
[11:13:09.196]                  </control>
[11:13:09.196]                  <control if="pin >= 8" while="" timeout="0" info="">
[11:13:09.196]                    // if-block "pin >= 8"
[11:13:09.197]                      // =>  FALSE
[11:13:09.197]                    // skip if-block "pin >= 8"
[11:13:09.198]                  </control>
[11:13:09.198]                </sequence>
[11:13:09.198]            </block>
[11:13:09.198]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[11:13:09.199]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[11:13:09.200]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:09.200]            </block>
[11:13:09.201]          </sequence>
[11:13:09.202]      </block>
[11:13:09.202]      // end if-block "traceSWO"
[11:13:09.202]    </control>
[11:13:09.203]    <control if="traceTPIU" while="" timeout="0" info="">
[11:13:09.203]      // if-block "traceTPIU"
[11:13:09.203]        // =>  FALSE
[11:13:09.203]      // skip if-block "traceTPIU"
[11:13:09.203]    </control>
[11:13:09.203]  </sequence>
[11:13:09.204]  
[11:13:28.446]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[11:13:28.446]  
[11:13:28.494]  <debugvars>
[11:13:28.495]    // Pre-defined
[11:13:28.495]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:13:28.496]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:13:28.496]    __dp=0x00000000
[11:13:28.496]    __ap=0x00000000
[11:13:28.497]    __traceout=0x00000001      (SWO Trace)
[11:13:28.497]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:13:28.498]    __FlashAddr=0x00000000
[11:13:28.498]    __FlashLen=0x00000000
[11:13:28.498]    __FlashArg=0x00000000
[11:13:28.498]    __FlashOp=0x00000000
[11:13:28.499]    __Result=0x00000000
[11:13:28.499]    
[11:13:28.499]    // User-defined
[11:13:28.499]    DbgMCU_CR=0x00000007
[11:13:28.499]    DbgMCU_APB1_Fz=0x00000000
[11:13:28.500]    DbgMCU_APB2_Fz=0x00000000
[11:13:28.500]    TraceClk_Pin=0x00040002
[11:13:28.500]    TraceD0_Pin=0x00040003
[11:13:28.500]    TraceD1_Pin=0x00040004
[11:13:28.501]    TraceD2_Pin=0x00040005
[11:13:28.501]    TraceD3_Pin=0x00040006
[11:13:28.502]  </debugvars>
[11:13:28.502]  
[11:13:28.503]  <sequence name="TraceStop" Pname="" disable="false" info="">
[11:13:28.503]    <block atomic="false" info="">
[11:13:28.503]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[11:13:28.504]        // -> [traceSWO <= 0x00000001]
[11:13:28.504]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[11:13:28.505]        // -> [traceTPIU <= 0x00000000]
[11:13:28.505]    </block>
[11:13:28.506]    <control if="traceSWO" while="" timeout="0" info="">
[11:13:28.506]      // if-block "traceSWO"
[11:13:28.506]        // =>  TRUE
[11:13:28.506]      <block atomic="false" info="">
[11:13:28.507]        Sequence("DisableTraceSWO");
[11:13:28.507]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[11:13:28.508]            <block atomic="false" info="">
[11:13:28.508]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[11:13:28.508]                // -> [dbgmcu_val <= 0x00000000]
[11:13:28.508]            </block>
[11:13:28.509]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[11:13:28.509]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[11:13:28.510]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[11:13:28.511]                // -> [dbgmcu_val <= 0x00000007]
[11:13:28.512]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[11:13:28.513]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[11:13:28.513]            </block>
[11:13:28.513]          </sequence>
[11:13:28.514]      </block>
[11:13:28.515]      // end if-block "traceSWO"
[11:13:28.515]    </control>
[11:13:28.515]    <control if="traceTPIU" while="" timeout="0" info="">
[11:13:28.515]      // if-block "traceTPIU"
[11:13:28.516]        // =>  FALSE
[11:13:28.516]      // skip if-block "traceTPIU"
[11:13:28.516]    </control>
[11:13:28.517]  </sequence>
[11:13:28.517]  
